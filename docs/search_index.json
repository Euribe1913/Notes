[["index.html", "Stat 255: Statistics for Data Science Notes Preface", " Stat 255: Statistics for Data Science Notes Andrew Sage - Lawrence University 2022-10-11 Preface These notes serve as the primary textual resource for Stat 255: Statistics for Data Science at Lawrence University. What is this course about? Stat 255 provides an introduction to essential statistical tasks including modeling, inference, prediction, and computation. The course employs a modern approach, intended to equip students with skills needed for working with today’s complex data. Traditional concepts, like interval estimation, and hypothesis testing, are introduced through the lens of multivariate models and simulation. Data computation in R plays a central role throughout the course. The course’s overarching learning outcomes are: Visualize and wrangle data using statistical software R. Build and assess multivariate models to predict future outcomes. Quantify uncertainty associated with estimates and predictions. Explain the assumptions associated with statistical models, and evalate whether these assumptions are reasonably satisfied in context. Write reproducible analyses, using statistical software. Work with data in an ethical and responsible manner. More specific learning tasks, related to these outcomes are provided in each chapter. Who is this course intended for? This course is intended for students who are interested in learning statistical modeling and data computation skills that might prove useful in further courses, research, or career. Stat 255 can serve as either: a first course in statistics for students with a strong quantitative background, typically including calculus. a second course in statistics, building on introductory topics taught in courses like Lawrence’s Stat 107: Principles of Statistics, or AP Statistics. At Lawrence, this course is required for the Statistics Track of the Mathematics Major, the Economics and Mathematics-Economics Majors, and the Statistics and Data Science Minor. The prerequisite for the course is either 1) a prior college-level course in statistics (i.e. STAT 107, BIOL 170 or 280, ANTH 207, AP Stats) OR 2) Calculus. (Math 140, AP Calculus, or equivalent). The course does not assume any prior knowledge of statistics, but does move more rapidly than a typical introductory statistics course. Students engage rigorously in statistical thinking and computation, intended to equip them with essential skills for further study in statistics and data science. "],["exploratory-data-analysis.html", "Chapter 1 Exploratory Data Analysis 1.1 Exploring Data Visualizations 1.2 Exploratory Analysis in R", " Chapter 1 Exploratory Data Analysis Learning Outcomes: Interpret graphical summaries of data, including boxplots, histograms, violin plots, density plots, scatterplots, and correlation plots. Read data from a .csv file into R. Preview data in R. Create graphical summaries of data using R. Calculate summary statistics for entire datasets and grouped summaries. Create reproducible documents using R Markdown. 1.1 Exploring Data Visualizations 1.1.1 COVID-19 Data The following data were contained in a UK technical report on the Delta Variant on August 2, 2021 Vaccination Status Deaths Total Cases Fatality Rate Fully Vax 402 47,008 0.86% Unvax 253 151,054 0.17 % ggplot(data=Covid_Data, aes(x=Vac_Status, fill=Outcome)) + geom_bar(position=&quot;fill&quot;) One explanation would be that vaccines don’t work, and even cause harm. Can you think of another explanation? 1.1.2 Breakdown by Age &lt; 50 We break down the cases based on whether the patient was older or younger than 50. Under 50 Vaccination Status Deaths Total Cases Fatality Rate Fully Vax 13 25,536 0.05% Unvax 48 147, 612 0.03 % 50 or Older Vaccination Status Deaths Total Cases Fatality Rate Fully Vax 389 21,472 1.81% Unvax 205 3,440 5.96 % ggplot(data=Covid_Data, aes(x=Vac_Status, fill=Outcome)) + geom_bar(position=&quot;fill&quot;) + facet_wrap(~Age) Before accounting for age, vaccinated people appear to be 5 times MORE likely to die from covid than unvaccinated people. After accounting for age, vaccinated young people appear to be about 1.5 times more likely to die from covid (though death rates are very low) overall, and vaccinated older people appear to be more than 3 times LESS likely. 1.1.3 Vaccination by Age Breakdown ggplot(data=Covid_Data, aes(x=Vac_Status, fill=Age)) + geom_bar(position=&quot;fill&quot;) Since almost all of the unvaccinated people were from the lower risk category, the death rate among unvaccinated people appears lower. We should account for age when comparing survival rates. 1.1.4 Simpson’s Paradox Simpson’s Paradox refers to a situation where an apparent trend either disappears or reverses when one or more additional variables are accounted for. These additional variables are called confounding variables. In this situation, age is a counfouding variable. Older people are more likely to be vaccinated, and also more likely to die of covid (regardless of vaccination status), thus it appears that vaccinated people are more likely to die from covid, unless we account for age. When we build statistical models, it will be important to account for potential confounding variables in our data, otherwise a model will give misleading results. Final note: Subsequent data has shown that among people under 50, vaccinated people also had lower death rates (though death rates remained very low for both vaccinated and unvaccinated people). The slightly higher death rate for vaccinated people under 50, seen in these early data, is likely due to young people with other risk conditions being vaccinated first. Data Source 1.1.5 Exploring Diamond Prices The following data come from a dataset with information on over 53,940 diamonds. We’ll explore the relationship between price (in $ US) and quality of the cut of the diamond (ideal, premium, very good, good, fair.\" Consider the following plots: ggplot(data=diamonds, aes(x=price, y=cut, fill=cut)) + geom_boxplot(outlier.size=0.01, outlier.alpha = 0.1) + stat_summary(fun=mean, geom=&quot;point&quot;, shape=4, color=&quot;red&quot;, size=3) + ggtitle(&quot;Price by Quality of Cut&quot;) Diamonds come in different carat sizes, so we should consider information about that as well. We examine a histogram, displaying the number of diamonds with each cut, and carat size. ggplot(data=diamonds, aes(x=carat, fill=cut)) + geom_histogram() + ggtitle(&quot;Diamonds by Carat Size and Cut Quality&quot;) The table shows the number of diamonds of each cut, as well as the average carat size and price of each diamond. diamonds %&gt;% group_by(cut) %&gt;% summarize(N=n(), Avg_carat=mean(carat), Avg_price=mean(price) ) ## # A tibble: 5 × 4 ## cut N Avg_carat Avg_price ## &lt;ord&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Fair 1610 1.05 4359. ## 2 Good 4906 0.849 3929. ## 3 Very Good 12082 0.806 3982. ## 4 Premium 13791 0.892 4584. ## 5 Ideal 21551 0.703 3458. Finally, we use a scatterplot to visualize cut, price, and carat size. ggplot(data=diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + ggtitle(&quot;Price by Carat Size and Cut&quot;) Question: How is Simpson’s paradox present in the diamonds data? What is the confounding variable? What conclusion should we draw about the relationship between the price of a diamond and the quality of the cut? 1.2 Exploratory Analysis in R This section provides examples of how to read data into R, create graphics, like those in the previous section, and calculate summary statistics. We’ll work with data on movies released in Hollywood between 2012 and 2018. 1.2.1 Loading the Data We’ll begin by loading the tidyverse package, which can be used to create professional graphics, and wrangle (or manipulate) data into forms that are informative and easy to work with. library(tidyverse) Next, we read in the data itself, from the website where it is stored. HollywoodMovies &lt;- read_csv(&quot;https://www.lock5stat.com/datasets3e/HollywoodMovies.csv&quot;) 1.2.2 Previewing the Data head() The head() function displays the first 5 rows of the dataset. head(HollywoodMovies) ## # A tibble: 6 × 15 ## Movie LeadStudio RottenTomatoes AudienceScore Genre TheatersOpenWeek ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2016: Obama&#39;s … Rocky Mou… 26 73 Docu… 1 ## 2 21 Jump Street Sony Pict… 85 82 Come… 3121 ## 3 A Late Quartet Entertain… 76 71 Drama 9 ## 4 A Royal Affair Magnolia … 90 82 Drama 7 ## 5 Abraham Lincol… Twentieth… 35 51 Horr… 3108 ## 6 Act of Valor Relativit… 27 72 Acti… 3039 ## # … with 9 more variables: OpeningWeekend &lt;dbl&gt;, BOAvgOpenWeekend &lt;dbl&gt;, ## # Budget &lt;dbl&gt;, DomesticGross &lt;dbl&gt;, WorldGross &lt;dbl&gt;, ForeignGross &lt;dbl&gt;, ## # Profitability &lt;dbl&gt;, OpenProfit &lt;dbl&gt;, Year &lt;dbl&gt; The rows of the dataset are called observations. In this case, the observations are the movies. The columns of the dataset, which contain information about the movies, are called variables. glimpse The glimpse() command shows the number of observations (rows), and the number of variables, (columns). We also see the name of each variable and its type. Variable types include Categorical variables, which take on groups or categories, rather than numeric values. In R, these might be coded as logical &lt;logi&gt;, character &lt;chr&gt;, factor &lt;fct&gt; and ordered factor &lt;ord&gt;. Quantitative variables, which take on meaningful numeric values. These include numeric &lt;num&gt;, integer &lt;int&gt;, and double &lt;dbl&gt;. glimpse(HollywoodMovies) ## Rows: 1,295 ## Columns: 15 ## $ Movie &lt;chr&gt; &quot;2016: Obama&#39;s America&quot;, &quot;21 Jump Street&quot;, &quot;A Late Qu… ## $ LeadStudio &lt;chr&gt; &quot;Rocky Mountain Pictures&quot;, &quot;Sony Pictures Releasing&quot;,… ## $ RottenTomatoes &lt;dbl&gt; 26, 85, 76, 90, 35, 27, 91, 56, 11, 44, 93, 63, 87, 9… ## $ AudienceScore &lt;dbl&gt; 73, 82, 71, 82, 51, 72, 62, 47, 47, 63, 82, 51, 63, 9… ## $ Genre &lt;chr&gt; &quot;Documentary&quot;, &quot;Comedy&quot;, &quot;Drama&quot;, &quot;Drama&quot;, &quot;Horror&quot;, … ## $ TheatersOpenWeek &lt;dbl&gt; 1, 3121, 9, 7, 3108, 3039, 132, 245, 2539, 3192, 3, 1… ## $ OpeningWeekend &lt;dbl&gt; 0.03, 36.30, 0.08, 0.04, 16.31, 24.48, 1.14, 0.70, 11… ## $ BOAvgOpenWeekend &lt;dbl&gt; 30000, 11631, 8889, 5714, 5248, 8055, 8636, 2857, 449… ## $ Budget &lt;dbl&gt; 3.0, 42.0, NA, NA, 68.0, 12.0, NA, 7.5, 35.0, 50.0, 1… ## $ DomesticGross &lt;dbl&gt; 33.35, 138.45, 1.56, 1.55, 37.52, 70.01, 1.99, 3.01, … ## $ WorldGross &lt;dbl&gt; 33.35, 202.81, 6.30, 7.60, 137.49, 82.50, 3.59, 8.54,… ## $ ForeignGross &lt;dbl&gt; 0.00, 64.36, 4.74, 6.05, 99.97, 12.49, 1.60, 5.53, 9.… ## $ Profitability &lt;dbl&gt; 1334.00, 482.88, NA, NA, 202.19, 687.50, NA, 113.87, … ## $ OpenProfit &lt;dbl&gt; 1.20, 86.43, NA, NA, 23.99, 204.00, NA, 9.33, 32.57, … ## $ Year &lt;dbl&gt; 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,… There are 1,295 movies in the dataset, and 15 variables for each film. summary summary displays the mean, minimum, first quartile, median, third quartile, and maximum for each numeric variable. summary(HollywoodMovies) ## Movie LeadStudio RottenTomatoes AudienceScore ## Length:1295 Length:1295 Min. : 0.00 Min. :10.00 ## Class :character Class :character 1st Qu.:33.00 1st Qu.:49.00 ## Mode :character Mode :character Median :61.00 Median :64.00 ## Mean :57.58 Mean :62.18 ## 3rd Qu.:84.00 3rd Qu.:77.00 ## Max. :99.00 Max. :99.00 ## NA&#39;s :6 ## Genre TheatersOpenWeek OpeningWeekend BOAvgOpenWeekend ## Length:1295 Min. : 1.0 Min. : 0.020 Min. : 204 ## Class :character 1st Qu.: 152.5 1st Qu.: 0.845 1st Qu.: 3482 ## Mode :character Median :2459.0 Median : 7.600 Median : 6586 ## Mean :2008.0 Mean : 17.541 Mean : 13400 ## 3rd Qu.:3213.5 3rd Qu.: 20.810 3rd Qu.: 14534 ## Max. :4529.0 Max. :257.700 Max. :240000 ## ## Budget DomesticGross WorldGross ForeignGross ## Min. : 0.90 Min. : 1.02 Min. : 0.74 Min. : -0.76 ## 1st Qu.: 12.00 1st Qu.: 6.40 1st Qu.: 13.09 1st Qu.: 3.91 ## Median : 30.00 Median : 26.46 Median : 50.37 Median : 21.58 ## Mean : 51.38 Mean : 58.16 Mean : 147.01 Mean : 88.84 ## 3rd Qu.: 65.00 3rd Qu.: 66.44 3rd Qu.: 160.38 3rd Qu.: 89.75 ## Max. :365.00 Max. :936.66 Max. :2068.22 Max. :1369.54 ## NA&#39;s :239 ## Profitability OpenProfit Year ## Min. : 2.3 Min. : 0.05 Min. :2012 ## 1st Qu.: 139.1 1st Qu.: 12.87 1st Qu.:2013 ## Median : 268.9 Median : 31.77 Median :2015 ## Mean : 435.7 Mean : 64.50 Mean :2015 ## 3rd Qu.: 483.0 3rd Qu.: 62.59 3rd Qu.:2017 ## Max. :10176.0 Max. :3373.00 Max. :2018 ## NA&#39;s :239 NA&#39;s :239 Notice that 239 films have missing information on some of the variables, recorded as NA’s. 1.2.3 Adding a New Variable We can use the mutate() function to create a new variable based on variables already in the dataset. In the data description, the variable Profitability is defined as WorldGross as a percentage of Budget. Thus, films for which Profitability exceeds 100 were profitable. We create a variable to tell whether or not a film was profitable. Note that in R, a variable defined as a condition, such as Profitability&gt;100 will return values of either TRUE or FALSE. HollywoodMovies &lt;- HollywoodMovies %&gt;% mutate(Profitable = Profitability &gt; 100) summary(HollywoodMovies$Profitable) ## Mode FALSE TRUE NA&#39;s ## logical 170 886 239 1.2.4 Selecting Columns If the dataset contains a large number of variables, narrow down to the ones you are interested in working with. This can be done with the select() command. If there are not very many variables to begin with, or you are interested in all of them, then you may skip this step. Let’s narrow the dataset down to the variables Movie, RottenTomatoes, AudienceScore, Genre, WorldGross, Budget, “Profitable”, and Year. MoviesSubset &lt;- HollywoodMovies %&gt;% select(Movie, RottenTomatoes, AudienceScore, Genre, WorldGross, Budget, Profitable, Year) 1.2.5 Filtering by Row The filter() command narrows a dataset down to rows that meet specified conditions. Filtering by a Categorical Variable Let’s filter the data to only include action movies, comedies, dramas, and horror movies. We’ll also keep only those films whose budget was listed, excluding the 239 NA’s. The command !is.na() returns only values that are not NA’s. MoviesSubset1 &lt;- MoviesSubset %&gt;% filter(Genre %in% c(&quot;Action&quot;, &quot;Comedy&quot;, &quot;Drama&quot;, &quot;Horror&quot;)) %&gt;% filter(!is.na(Budget)) In R, the ! operator means “not”. glimpse(MoviesSubset1) ## Rows: 679 ## Columns: 8 ## $ Movie &lt;chr&gt; &quot;21 Jump Street&quot;, &quot;Abraham Lincoln: Vampire Hunter&quot;, &quot;A… ## $ RottenTomatoes &lt;dbl&gt; 85, 35, 27, 56, 44, 93, 63, 86, 34, 86, 74, 41, 71, 32,… ## $ AudienceScore &lt;dbl&gt; 82, 51, 72, 47, 63, 82, 51, 86, 55, 76, 64, 35, 62, 70,… ## $ Genre &lt;chr&gt; &quot;Comedy&quot;, &quot;Horror&quot;, &quot;Action&quot;, &quot;Drama&quot;, &quot;Comedy&quot;, &quot;Drama… ## $ WorldGross &lt;dbl&gt; 202.81, 137.49, 82.50, 8.54, 236.80, 36.79, 71.00, 36.7… ## $ Budget &lt;dbl&gt; 42.0, 68.0, 12.0, 7.5, 50.0, 10.0, 49.0, 4.6, 220.0, 1.… ## $ Profitable &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T… ## $ Year &lt;dbl&gt; 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2… Filtering by a Quantitative Variable Let’s filter the data to only include films whose world gross exceeds 100 million dollars. MoviesSubset2 &lt;- MoviesSubset %&gt;% filter(WorldGross &gt;100) Now, let’s preview the data again. glimpse(MoviesSubset2) ## Rows: 444 ## Columns: 8 ## $ Movie &lt;chr&gt; &quot;21 Jump Street&quot;, &quot;Abraham Lincoln: Vampire Hunter&quot;, &quot;A… ## $ RottenTomatoes &lt;dbl&gt; 85, 35, 44, 96, 34, 78, 85, 66, 38, 88, 78, 17, 74, 45,… ## $ AudienceScore &lt;dbl&gt; 82, 51, 63, 90, 55, 76, 71, 67, 46, 92, 75, 32, 56, 72,… ## $ Genre &lt;chr&gt; &quot;Comedy&quot;, &quot;Horror&quot;, &quot;Comedy&quot;, &quot;Thriller&quot;, &quot;Action&quot;, &quot;Ad… ## $ WorldGross &lt;dbl&gt; 202.81, 137.49, 236.80, 227.14, 313.48, 554.61, 123.68,… ## $ Budget &lt;dbl&gt; 42.0, 68.0, 50.0, 45.0, 220.0, 185.0, 12.0, 102.0, 150.… ## $ Profitable &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T… ## $ Year &lt;dbl&gt; 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2… We’ll use MoviesSubset1 from this point forward. 1.2.6 Histogram Next, we’ll create graphics to help us visualize the distributions and relationships between variables. We’ll use the ggplot() function, which is part of the tidyverse package. Histograms are useful for displaying the distribution of a single quantitative variable General Template for Histogram ggplot(data=DatasetName, aes(x=VariableName)) + geom_histogram(fill=&quot;colorchoice&quot;, color=&quot;colorchoice&quot;) + ggtitle(&quot;Plot Title&quot;) + xlab(&quot;x-axis label&quot;) + ylab(&quot;y-axis label&quot;) Histogram of Audience Scores ggplot(data=MoviesSubset1, aes(x=AudienceScore)) + geom_histogram(fill=&quot;lightblue&quot;, color=&quot;white&quot;) + ggtitle(&quot;Distribution of Audience Scores&quot;) + xlab(&quot;Audience Score&quot;) + ylab(&quot;Frequency&quot;) 1.2.7 Density Plots Density plots show the distribution for a quantitative variable like audience score. Scores can be compared across categories, like genre. General Template for Density Plot ggplot(data=DatasetName, aes(x=QuantitativeVariable, color=CategoricalVariable, fill=CategoricalVariable)) + geom_density(alpha=0.2) + ggtitle(&quot;Plot Title&quot;) + xlab(&quot;Axis Label&quot;) + ylab(&quot;Frequency&quot;) alpha, ranging from 0 to 1 dictates transparency. Density Plot of Audience Scores ggplot(data=MoviesSubset1, aes(x=AudienceScore, color=Genre, fill=Genre)) + geom_density(alpha=0.2) + ggtitle(&quot;Distribution of Audience Scores&quot;) + xlab(&quot;Audience Score&quot;) + ylab(&quot;Frequency&quot;) 1.2.8 Boxplot Boxplots can be used to compare a quantitative variable with a categorical variable General Template for Boxplot ggplot(data=DatasetName, aes(x=CategoricalVariable, y=QuantitativeVariable)) + geom_boxplot() + ggtitle(&quot;Plot Title&quot;) + xlab(&quot;Variable Name&quot;) + ylab(&quot;Variable Name&quot;) You can make the plot horizontal by adding + coordflip(). You can turn the axis text vertical by adding theme(axis.text.x = element_text(angle = 90)). Boxplot Comparing Scores for Genres ggplot(data=MoviesSubset1, aes(x=Genre, y=AudienceScore)) + geom_boxplot() + ggtitle(&quot;Audience Score by Genre&quot;) + xlab(&quot;Genre&quot;) + ylab(&quot;Audience Score&quot;) + theme(axis.text.x = element_text(angle = 90)) 1.2.9 Violin Plot Violin plots are an alternative to boxplots. The width of the violin tells us the density of observations in a given range. General Template for Violin Plot ggplot(data=DatasetName, aes(x=CategoricalVariable, y=QuantitativeVariable, fill=CategoricalVariable)) + geom_violin() + ggtitle(&quot;Plot Title&quot;) + xlab(&quot;Variable Name&quot;) + ylab(&quot;Variable Name&quot;) Violin Plot Comparing Scores for Genres ggplot(data=MoviesSubset1, aes(x=Genre, y=AudienceScore, fill=Genre)) + geom_violin() + ggtitle(&quot;Audience Score by Genre&quot;) + xlab(&quot;Genre&quot;) + ylab(&quot;Audience Score&quot;) + theme(axis.text.x = element_text(angle = 90)) We can view the boxplot and violin plot together. 1.2.10 Scatterplots Scatterplots are used to visualize the relationship between two quantitative variables. Scatterplot Template ggplot(data=DatasetName, aes(x=CategoricalVariable, y=QuantitativeVariable)) + geom_point() + ggtitle(&quot;Plot Title&quot;) + ylab(&quot;Axis Label&quot;) + xlab(&quot;Axis Label&quot;) Scatterplot Comparing Audience Score and Rotten Tomatoes Score ggplot(data=MoviesSubset1, aes(x=RottenTomatoes, y=AudienceScore)) + geom_point() + ggtitle(&quot;Audience and Critics Ratings&quot;) + ylab(&quot;Audience Rating&quot;) + xlab(&quot;Critics&#39; Rating&quot;) We see that there is an upward trend, indicating a positive association between critics scores (RottenTomatoes), and audience scores. However, there is a lot of variability, and the relationship is moderately strong at best. We can also add color, size, and shape to the scatterplot to display information about other variables. ggplot(data=MoviesSubset1, aes(x=RottenTomatoes, y=AudienceScore, color=Genre, size=WorldGross)) + geom_point() + ggtitle(&quot;Audience and Critics Ratings&quot;) + ylab(&quot;Audience Rating&quot;) + xlab(&quot;Critics&#39; Rating&quot;) We can add labels for points meeting certain conditions, using geom_text(). This should be done carefully, to avoid overlap. ggplot(data=MoviesSubset1, aes(x=RottenTomatoes, y=AudienceScore, color=Genre, size=WorldGross)) + geom_point() + ggtitle(&quot;Audience and Critics Ratings&quot;) + ylab(&quot;Audience Rating&quot;) + xlab(&quot;Critics&#39; Rating&quot;) + geom_text(data = MoviesSubset1 %&gt;% filter(WorldGross &gt;800), aes(label = Movie), color=&quot;black&quot;, check_overlap = TRUE) 1.2.11 Bar Graphs Bar graphs can be used to visualize one or more categorical variables Bar Graph Template ggplot(data=DatasetName, aes(x=CategoricalVariable)) + geom_bar(fill=&quot;colorchoice&quot;,color=&quot;colorchoice&quot;) + ggtitle(&quot;Plot Title&quot;) + xlab(&quot;Variable Name&quot;) + ylab(&quot;Frequency&quot;) Bar Graph by Genre ggplot(data=MoviesSubset1, aes(x=Genre)) + geom_bar(fill=&quot;lightblue&quot;,color=&quot;white&quot;) + ggtitle(&quot;Number of Films by Genre&quot;) + xlab(&quot;Genre&quot;) + ylab(&quot;Number of Films&quot;) + theme(axis.text.x = element_text(angle = 90)) 1.2.12 Stacked and Side-by-Side Bar Graphs Stacked Bar Graph Template ggplot(data = DatasetName, mapping = aes(x = CategoricalVariable1, fill = CategoricalVariable2)) + stat_count(position=&quot;fill&quot;) + theme_bw() + ggtitle(&quot;Plot Title&quot;) + xlab(&quot;Variable 1&quot;) + ylab(&quot;Proportion of Variable 2&quot;) + theme(axis.text.x = element_text(angle = 90)) Stacked Bar Graph Example The stat_count(position=\"fill\") command creates a stacked bar graph, comparing two categorical variables. Let’s explore whether certain genres are more profitable than others, using the profitability variable. ggplot(data = MoviesSubset1, mapping = aes(x = Genre, fill = Profitable)) + stat_count(position=&quot;fill&quot;) + theme_bw() + ggtitle(&quot;Profitability by Genre&quot;) + xlab(&quot;Genre&quot;) + ylab(&quot;Proportion Profitable&quot;) + theme(axis.text.x = element_text(angle = 90)) Side-by-side Bar Graph Template We can create a side-by-side bar graph, using position=dodge. ggplot(data = DatasetName, mapping = aes(x = CategoricalVariable1, fill = CategoricalVariable2)) + geom_bar(position = &quot;dodge&quot;) + ggtitle(&quot;Plot Title&quot;) + xlab(&quot;Genre&quot;) + ylab(&quot;Frequency&quot;) Side-by-side Bar Graph Example ggplot(data = MoviesSubset1, mapping = aes(x = Genre, fill = Profitable)) + geom_bar(position = &quot;dodge&quot;) + ggtitle(&quot;Number of Films by Genre&quot;) + xlab(&quot;Genre&quot;) + ylab(&quot;Number of Films&quot;) + theme(axis.text.x = element_text(angle = 90)) 1.2.13 Correlation Plot Correlation plots can be used to visualize relationships between quantitative variables. These can be helpful when we proceed to modeling. Explanatory variables that are highly correlated with the response are often strong predictors that should be included in a model. However, including two explanatory variables that are highly correlated with one another can create interpretation problems. The cor() function calculates correlations between quantitative variables. We’ll use select_if to select only numeric variables. The `use=“complete.obs” command tells R to ignore observations with missing data. cor(select_if(HollywoodMovies, is.numeric), use=&quot;complete.obs&quot;) %&gt;% round(2) ## RottenTomatoes AudienceScore TheatersOpenWeek OpeningWeekend ## RottenTomatoes 1.00 0.71 -0.27 0.14 ## AudienceScore 0.71 1.00 -0.21 0.20 ## TheatersOpenWeek -0.27 -0.21 1.00 0.59 ## OpeningWeekend 0.14 0.20 0.59 1.00 ## BOAvgOpenWeekend 0.40 0.35 -0.37 0.13 ## Budget 0.06 0.13 0.59 0.72 ## DomesticGross 0.24 0.31 0.51 0.93 ## WorldGross 0.20 0.28 0.52 0.90 ## ForeignGross 0.17 0.25 0.49 0.84 ## Profitability 0.08 0.08 0.04 0.15 ## OpenProfit -0.10 -0.11 0.13 0.12 ## Year 0.04 -0.05 0.08 0.04 ## BOAvgOpenWeekend Budget DomesticGross WorldGross ForeignGross ## RottenTomatoes 0.40 0.06 0.24 0.20 0.17 ## AudienceScore 0.35 0.13 0.31 0.28 0.25 ## TheatersOpenWeek -0.37 0.59 0.51 0.52 0.49 ## OpeningWeekend 0.13 0.72 0.93 0.90 0.84 ## BOAvgOpenWeekend 1.00 0.08 0.27 0.25 0.22 ## Budget 0.08 1.00 0.70 0.78 0.79 ## DomesticGross 0.27 0.70 1.00 0.94 0.86 ## WorldGross 0.25 0.78 0.94 1.00 0.98 ## ForeignGross 0.22 0.79 0.86 0.98 1.00 ## Profitability 0.14 -0.12 0.17 0.15 0.13 ## OpenProfit -0.07 -0.14 0.07 0.02 -0.01 ## Year -0.04 0.01 0.03 0.04 0.04 ## Profitability OpenProfit Year ## RottenTomatoes 0.08 -0.10 0.04 ## AudienceScore 0.08 -0.11 -0.05 ## TheatersOpenWeek 0.04 0.13 0.08 ## OpeningWeekend 0.15 0.12 0.04 ## BOAvgOpenWeekend 0.14 -0.07 -0.04 ## Budget -0.12 -0.14 0.01 ## DomesticGross 0.17 0.07 0.03 ## WorldGross 0.15 0.02 0.04 ## ForeignGross 0.13 -0.01 0.04 ## Profitability 1.00 0.84 -0.01 ## OpenProfit 0.84 1.00 -0.03 ## Year -0.01 -0.03 1.00 The corrplot() function in the corrplot() package provides a visualization of the correlations. Larger, thicker circles indicate stronger correlations. library(corrplot) Corr &lt;- cor(select_if(HollywoodMovies, is.numeric), use=&quot;complete.obs&quot;) corrplot(Corr) We can also display a numeric version of the correlations by setting method=\"number\". Corr &lt;- cor(select_if(HollywoodMovies, is.numeric), use=&quot;complete.obs&quot;) corrplot(Corr, method=&quot;number&quot;) 1.2.14 Scatterplot Matrix A scatterplot matrix is a grid of plots. It can be created using the ggpairs() function in the GGally package. The scatterplot matrix shows us: Along the diagonal are density plots for quantitative variables, or bar graphs for categorical variables, showing the distribution of each variable. Under the diagonal are plots showing the relationships between the variables in the corresponding row and column. Scatterplots are used when both variables are quantitative, bar graphs are used when both variables are categorical, and boxplots are used when one variable is categorical, and the other is quantitative. Above the diagonal are correlations between quantitative variables. We need to remove the column with the movie names. This is done using select. library(GGally) ggpairs(MoviesSubset1 %&gt;% select(-Movie)) The scatterplot matrix is useful for helping us notice key trends in our data. However, the plot can hard to read as it is quite dense, especially when there are a large number of variables. These can help us look for trends from a distance, but we should then focus in on more specific plots. 1.2.15 Summary Tables group_by() and summarize() The group_by() and summarize() commands are useful for breaking categorical variables down by category. For example, let’s calculate number of films in each genre, and the mean, median, and standard deviation in film WorldGross by genre. MoviesSubset1 %&gt;% group_by(Genre) %&gt;% summarize(N = n(), Mean_Gross = mean(WorldGross, na.rm=TRUE), Median_Gross = median(WorldGross, na.rm=TRUE), StDev_Gross = sd(WorldGross, na.rm = TRUE)) %&gt;% arrange(desc(Mean_Gross)) ## # A tibble: 4 × 5 ## Genre N Mean_Gross Median_Gross StDev_Gross ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Action 162 371. 222. 393. ## 2 Horror 78 103. 79.6 113. ## 3 Comedy 160 85.1 65.0 77.0 ## 4 Drama 279 76.4 34.7 119. Notes: 1. The n() command calculates the number of observations in a category. 2. The na.rm=TRUE command removes missing values, so that summary statistics can be calculated. 3. arrange(desc(Mean_Gross)) arranges the table in descending order of Mean_Gross. To arrange in ascending order, use arrange(Mean_Gross). The kable() function in the knitr() package creates tables with professional appearance. library(knitr) MoviesTable &lt;- MoviesSubset1 %&gt;% group_by(Genre) %&gt;% summarize(N = n(), Mean_Gross = mean(WorldGross, na.rm=TRUE), Median_Gross = median(WorldGross, na.rm=TRUE), StDev_Gross = sd(WorldGross, na.rm = TRUE)) %&gt;% arrange(desc(Mean_Gross)) kable(MoviesTable) Genre N Mean_Gross Median_Gross StDev_Gross Action 162 370.85648 221.59 393.01213 Horror 78 102.55423 79.63 113.14402 Comedy 160 85.14469 64.99 77.00407 Drama 279 76.42573 34.72 119.08083 "],["introduction-to-statistical-models.html", "Chapter 2 Introduction to Statistical Models 2.1 Predicting House Prices 2.2 Variability Explained by a Model 2.3 Multiple Regression Model 2.4 Least-Squares Estimation 2.5 ANalysis Of VAriance 2.6 Models Involving Interaction 2.7 More on Interaction", " Chapter 2 Introduction to Statistical Models Learning Outcomes: Calculate sums of squares related to variability explained, including SST, SSR, and SSM., when given small datasets and/or summary statistics. Explain the meaning of SST, SSR, and SSM in a given context. Calculate \\(R^2\\) and ANOVA F-Statistics, when given small datasets and/or summary statistics. Intrepret \\(R^2\\) and F-statistics in context. Explain the process for estimating least-squares regression coefficients. Calculate predictions from linear regression models. Interpret regression coefficients for models involving quantitative and/or categorical variables in context, or explain why it is inappropriate to do so. Explain the meaning of interaction between quantitative and categorical explanatory variables. Apply graphical methods, statistical summaries, and background knowledge to argue for whether or not interaction term(s) should be used in a statistical model. Determine slopes, intercepts, and other regression coefficients for specific categories or values of an explanatory variable in models that involve interaction. 2.1 Predicting House Prices 2.1.1 House Prices in Ames IA Shown below are the prices of 10 houses sold in Ames, IA between 2006 and 2010. Houses$SalePrice ## [1] 187.00 163.99 235.00 113.00 110.00 84.90 123.00 176.50 150.00 137.00 ggplot(data=Houses, aes(x=SalePrice)) + geom_histogram(binwidth=60, fill=&quot;blue&quot;, color=&quot;white&quot;) + xlab(&quot;Price in thousands&quot;) + ylab(&quot;Frequency&quot;)+ theme_bw() + ggtitle(&quot;House Prices in Ames, IA&quot;) summary(Houses$SalePrice) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 84.9 115.5 143.5 148.0 173.4 235.0 Question: Suppose we know that a particular house sold in Ames during this time period, but know nothing else about the house. Based on this estimation, how might we predict the price of the house? How confident are you in this prediction? 2.1.2 Prices by Neighborhood Now, suppose that the houses are in one of three neighborhoods (College Creek, Edwards, North Ames). Prices of the houses in each neighborhood are shown below. p_House_Nbhd &lt;- ggplot(data=Houses, aes(x=Neighborhood, y=SalePrice)) +geom_point() + theme_bw() + ggtitle(&quot;Houses by Neighborhood&quot;) p_House_Nbhd kable(Houses %&gt;% select(Neighborhood, SalePrice)) Neighborhood SalePrice CollgCr 187.00 CollgCr 163.99 CollgCr 235.00 Edwards 113.00 Edwards 110.00 Edwards 84.90 NAmes 123.00 NAmes 176.50 NAmes 150.00 NAmes 137.00 Question: Suppose we know that a house sold in the College Creek neighborhood. How might we predict the price of the house? How confident are you in this prediction? 2.1.3 House Prices by Size The scatterplot shows the relationship between the size of a house in square feet, and its saleprice. ggplot(data=Houses, aes(x=SquareFeet, y=SalePrice)) + geom_point() Question: Suppose we know that another house, not in the original data, had 1200 square feet. How might we predict the saleprice of the house? How confident are you in this prediction? 2.1.4 Explanatory and Response Variables Now, suppose we want to use information about the house’s neighborhood in our predictions. We’ll predict a price of a house to be the average price among houses in the neightborhood. The variable we are trying to predict (price) is called the response variable (denoted \\(Y\\)). The variable(s) we use to help us make the prediction (neighborhood) is(are) called explanatory variables (denoted \\(X\\)). These are also referred to as predictor variables or covariates. 2.1.5 Prediction with No Explanatory Variables If we have the prices of \\(n\\) houses, \\(y_i, y_2, \\ldots, y_n\\), and want to predict the price of a new house, without information about any explanatory variables the ``statistically optimal\" prediction is the overall average price of all houses in the dataset. \\[ \\widehat{\\text{Price}} = \\bar{y}, \\text{where } \\bar{y}=\\frac{\\displaystyle\\sum_{i=1}^ny_i}{n}\\]. The symbol \\(\\widehat{\\text{Price}}\\), represents the predicted, or expected, price. ggplot(data=Houses, aes(x=1, y=SalePrice)) + geom_point() + ylab(&quot;Price in thousands&quot;) + xlab(&quot;&quot;)+ theme(axis.text.x = element_blank()) + stat_summary(fun = mean, geom = &quot;errorbar&quot;, aes(ymax = ..y.., ymin = ..y..), color=&quot;red&quot;) + annotate(&quot;text&quot;, y=145, x=1.25, label=&quot;sample mean&quot;, color=&quot;red&quot;) + theme_bw() + ggtitle(&quot;All 10 Houses&quot;) mean(Houses$SalePrice) ## [1] 148.039 Without information about any explanatory variables, we would predict the price of a house sold in Ames, IA during this time to be about 148 thousand dollars. 2.1.6 Simple Model in R M0 &lt;- lm(data=Houses, SalePrice~1) summary(M0) ## ## Call: ## lm(formula = SalePrice ~ 1, data = Houses) ## ## Residuals: ## Min 1Q Median 3Q Max ## -63.139 -32.539 -4.539 25.334 86.961 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 148.04 13.97 10.6 0.0000022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 44.17 on 9 degrees of freedom Without information about any explanatory variables, we would predict the price of a house sold in Ames, IA during this time to be about 148 thousand dollars. 2.1.7 Prediction for a Categorical Explanatory Variable When we have a categorical explanatory variable (e.g. neighborhood), the “statistically optimal” prediction is the average response among all observations in the given category. p_House_Nbhd NbhdTbl &lt;- Houses %&gt;% group_by(Neighborhood) %&gt;% summarize(AveragePrice=mean(SalePrice)) kable(NbhdTbl) Neighborhood AveragePrice CollgCr 195.3300 Edwards 102.6333 NAmes 146.6250 We predict the price of a house in College Creek to be 195.33 thousand dollars, compared with 102.63 thousand dollars in Edwards, and 146.62 thousand dollars in Edwards. 2.1.8 Model by Neighborhood in R M_Nbhd &lt;- lm(data=Houses, SalePrice ~ Neighborhood) summary(M_Nbhd) ## ## Call: ## lm(formula = SalePrice ~ Neighborhood, data = Houses) ## ## Residuals: ## Min 1Q Median 3Q Max ## -31.340 -15.706 -2.477 9.617 39.670 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 195.33 14.89 13.118 0.00000349 *** ## NeighborhoodEdwards -92.70 21.06 -4.402 0.00315 ** ## NeighborhoodNAmes -48.70 19.70 -2.473 0.04267 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 25.79 on 7 degrees of freedom ## Multiple R-squared: 0.7348, Adjusted R-squared: 0.6591 ## F-statistic: 9.699 on 2 and 7 DF, p-value: 0.009603 For categorical explanatory variables, R treats the category that comes first alphabetically (in this case CCreek), as a baseline. The intercept gives the prediction for this category. We would expect a house in College Creek to cost 195.33 thousand dollars. Each of the other rows in the coefficients table represent the difference between the expected response (price) for that category (neighborhood), compared to the baseline. We would expect a house in Edwards to cost 92.70 thousand less than a house in College Creek. (hence costing 102.63 thousand) We would expect a house in North Ames to cost 48.71 thousand less than a house in College Creek. (hence costing 146.62 thousand) 2.1.9 Model Notation for Houses by Neighborhood The model can be expressed in the form: \\(\\widehat{\\text{Price}}= b_0+ b_1 \\times\\text{I}_{\\text{Edwards}} +b_2 \\times\\text{I}_{\\text{NAmes}}\\) \\(\\widehat{\\text{Price}}= 195.33+ -92.7 \\times\\text{I}_{\\text{Edwards}} +-48.7 \\times\\text{I}_{\\text{NAmes}}\\), where represents an indicator variables, taking on values 0 or 1. - Example: \\[ \\text{I}_{\\text{Edwards}} =\\begin{cases} 1 &amp; \\text{if house is in Edwards Neighborhood} \\\\ 0 &amp; \\text{otherwise} \\end{cases} \\] Predicted Prices: College Creek: \\(\\widehat{\\text{Price}}= 195.33+ -92.7 \\times0 +-48.7 \\times0 = 195.33\\) thousand. Edwards: \\(\\widehat{\\text{Price}}= 195.33+ -92.7 \\times1 +-48.7 \\times0 = 102.63\\) thousand. North Ames: \\(\\widehat{\\text{Price}}= 195.33+ -92.7 \\times0 +-48.7 \\times1 = 146.62\\) thousand. 2.1.10 Prediction for Quantitative Explanatory Variable For a quantitative explanatory variable like square feet, the “statistically optimal” prediction is found by fitting a “line of best fit” to the data (more details to come.) ggplot(data=Houses, aes(x=SquareFeet, y=SalePrice)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) For a house with 1200 square feet, predicted price is about $150 thousand. 2.1.11 Model using Square Feet M_SqFt &lt;- lm(data=Houses, SalePrice~SquareFeet) summary(M_SqFt) ## ## Call: ## lm(formula = SalePrice ~ SquareFeet, data = Houses) ## ## Residuals: ## Min 1Q Median 3Q Max ## -39.235 -14.309 2.052 10.966 43.971 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.82000 36.35455 0.188 0.85586 ## SquareFeet 0.12079 0.03022 3.997 0.00397 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 27.06 on 8 degrees of freedom ## Multiple R-squared: 0.6663, Adjusted R-squared: 0.6246 ## F-statistic: 15.97 on 1 and 8 DF, p-value: 0.003967 2.1.12 Model for SquareFeet and Interpretations In the model using both square feet and neighborhood, the regression equation is \\(\\widehat{\\text{Price}}= b_0+ b_1 \\times\\text{SquareFeet}\\) \\(\\widehat{\\text{Price}}= 6.82+ 0.121 \\times\\text{SquareFeet}\\) \\(\\widehat{\\text{Price}}\\) represents the expected, or predicted, price. The slope, \\(b_1\\) represents the expected change in price (in thousands) per one-unit increase in square feet. The price of a house is expected to increase by 121 dollars for each additional square foot. The intercept, \\(b_0\\) represents the expected price of a house with 0 square feet. - In this situation, this is not a meaningful interpretation. 2.1.13 Calculating Predicted Prices \\(\\widehat{\\text{Price}}= 6.82+ 0.121 \\times\\text{SquareFeet}\\) Predicted price for a house with 1200 square feet: \\(\\widehat{\\text{Price}}= 6.82+ 0.121 \\times 1200 = 151.8\\) thousand dollars. 2.2 Variability Explained by a Model 2.2.1 Quantifying Variability We’ve seen the “statistically optimal” way to make predictions for data with categorical and quantitative explanatory variables, but we shouldn’t expect these predictions to be exact. We see that prices of individual houses vary from one another, even if they are in the same neighborhood or have the same size. We can get a sense of how much variability we should expect in our prediction by looking at how much the values in our dataset differ from the predicted (mean) price. The difference between the true and predicted values (\\(y_i - \\hat{y}_i\\)) is called the \\(ith\\) residual. 2.2.2 Residuals for Three Models Model with No Explanatory Variables M0Resid &lt;-ggplot(data=Houses, aes(x = 1:10, y = SalePrice)) +geom_point() + geom_segment(aes(xend = 1:10, yend = M0$fitted.values), color=&quot;red&quot;) + geom_abline(slope=0, intercept=mean(M0$fitted.values)) + xlab(&quot;&quot;) + theme_bw() + theme(axis.text.x = element_blank()) M0Resid Model with Neighborhood as Explanatory Variable Model with Square Feet as Explanatory Variable ggplot(data=Houses, aes(x = SquareFeet, y = SalePrice)) + geom_segment(aes(xend = SquareFeet, yend = M_SqFt$fitted.values), color=&quot;red&quot;) + geom_point() + geom_point(aes(y = M_SqFt$fitted.values), shape = 1) + stat_smooth(method=&quot;lm&quot;, se=FALSE)+ theme_bw() 2.2.3 Quantifying Unexplained Variablility The residuals tell us how much variability in the response variable (sale price) is left unexplained by a model. For a model with given explanatory variable(s), we can calculate the proportion of variability in the response variable explained by the model by comparing the size of the residuals to those of a model with no explanatory variables. * \\(\\displaystyle\\sum_{i=1}^n (y_i - \\hat{y})=0\\), so this is not a helpful measure, but we can instead use: \\[ \\displaystyle\\sum_{i=1}^n (y_i - \\hat{y}_i)^2 \\] 2.2.4 Total Sum of Squares (SST) We call the sum of squared residuals for the model with no explanatory variables the total sum of squares, abbreviated SST. In this model, \\(\\hat{y}_i = \\bar{y}\\). \\[SST = \\displaystyle\\sum_{i=1}^n (y_i - \\bar{y})^2 \\] SalePrice &lt;- Houses$SalePrice Predicted &lt;- M0$fitted.values SquareFeet &lt;- Houses$SquareFeet Residual &lt;- M0$residuals ResidSq &lt;- Residual^2 Residdf &lt;- data.frame(SquareFeet, SalePrice, Predicted, Residual, ResidSq) Residdf ## SquareFeet SalePrice Predicted Residual ResidSq ## 1 1499 187.00 148.039 38.961 1517.959521 ## 2 1456 163.99 148.039 15.951 254.434401 ## 3 1525 235.00 148.039 86.961 7562.215521 ## 4 672 113.00 148.039 -35.039 1227.731521 ## 5 1179 110.00 148.039 -38.039 1446.965521 ## 6 930 84.90 148.039 -63.139 3986.533321 ## 7 864 123.00 148.039 -25.039 626.951521 ## 8 1414 176.50 148.039 28.461 810.028521 ## 9 1144 150.00 148.039 1.961 3.845521 ## 10 1008 137.00 148.039 -11.039 121.859521 sum(Houses$SalePrice - mean(Houses$SalePrice)) ## [1] 0.0000000000001421085 sum((Houses$SalePrice - mean(Houses$SalePrice))^2) ## [1] 17558.52 knitr::include_graphics(&quot;SST.png&quot;) SST represents the total amount of variability in sale price (without accounting for any explanatory variables). 2.2.5 SSR and SSM When we fit a model with an explanatory variable (such as neighborhood), we can see how much the sum of squared residuals decreases, based on information introduced by that explanatory variable. SalePrice &lt;- Houses$SalePrice Predicted &lt;- M_Nbhd$fitted.values Residual &lt;- M_Nbhd$residuals ResidSq &lt;- Residual^2 Neighborhood &lt;- Houses$Neighborhood Residdf &lt;- data.frame(Neighborhood, SalePrice, Predicted, Residual, ResidSq) Residdf ## Neighborhood SalePrice Predicted Residual ResidSq ## 1 CollgCr 187.00 195.3300 -8.330000 69.38890 ## 2 CollgCr 163.99 195.3300 -31.340000 982.19560 ## 3 CollgCr 235.00 195.3300 39.670000 1573.70890 ## 4 Edwards 113.00 102.6333 10.366667 107.46778 ## 5 Edwards 110.00 102.6333 7.366667 54.26778 ## 6 Edwards 84.90 102.6333 -17.733333 314.47111 ## 7 NAmes 123.00 146.6250 -23.625000 558.14062 ## 8 NAmes 176.50 146.6250 29.875000 892.51562 ## 9 NAmes 150.00 146.6250 3.375000 11.39063 ## 10 NAmes 137.00 146.6250 -9.625000 92.64062 sum(M_Nbhd$residuals^2) ## [1] 4656.188 the variability in sale price remaining unexplained even after accounting for neighborhood is given by the sum of squared residuals. We abbreviate this SSR, for sum of squared residuals. \\[ \\text{SSR} = \\text{Variability Remaining}=\\displaystyle\\sum_{i=1}^n(y_i-\\hat{y}_i)^2 \\] the difference, \\(\\text{SST} - \\text{SSR} = 17558.52 - 4656.188 = 12902.33\\) tells us how much variability in sale price is explained by the model using neighborhood as an explanatory variable. We call this quantity the sum of squares explained by the model, abbreviated SSM. The proportion of variability in sale price explained by the model using neighborhoods as an explanatory variable is \\[\\frac{SSM}{SST}=\\frac{12902.33}{17558.52} = 0.7348 \\] 73.5% of the variation in house price is explained by the model using neighborhood as an explanatory variable. The proportion of variability in the response variable explained by a model with given explanatory variables is called the coefficient of determination, and is given the symbol \\(R^2\\). Our value matches the value of “Multiple R-squared” in the 2nd last line of the R model summary. summary(M_Nbhd) ## ## Call: ## lm(formula = SalePrice ~ Neighborhood, data = Houses) ## ## Residuals: ## Min 1Q Median 3Q Max ## -31.340 -15.706 -2.477 9.617 39.670 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 195.33 14.89 13.118 0.00000349 *** ## NeighborhoodEdwards -92.70 21.06 -4.402 0.00315 ** ## NeighborhoodNAmes -48.70 19.70 -2.473 0.04267 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 25.79 on 7 degrees of freedom ## Multiple R-squared: 0.7348, Adjusted R-squared: 0.6591 ## F-statistic: 9.699 on 2 and 7 DF, p-value: 0.009603 2.2.6 Summary: SST, SSR, SSM, \\(R^2\\) the total variability in house prices is the sum of the squared differences between price and average price. \\[\\text{Total Variability in Price}= \\text{SST} =\\displaystyle\\sum_{i=1}^n(y_i-\\bar{y})^2\\] the variability remaining unexplained even after accounting for neighborhood is given by the sum of squared residuals. We abbreviate this SSR, for sum of squared residuals. \\[ \\text{SSR} = \\text{Variability Remaining}=\\displaystyle\\sum_{i=1}^n(y_i-\\hat{y}_i)^2 \\] the variability explained by the model, abbreviated SSM, is given by \\[ \\text{SSM} = \\text{SST} - \\text{SSR} \\] It can be shown that \\(\\text{SSM}=\\displaystyle\\sum_{i=1}^n(\\hat{y}_i-\\bar{y})^2\\). These abbreviations here vary across texts. Be careful! The coefficient of determination (abbreviated \\(R^2\\)) is defined as \\[R^2=\\frac{\\text{Variability Explained by Model}}{\\text{Total Variability}}=\\frac{\\text{SSM}}{\\text{SST}} =\\frac{\\displaystyle\\sum_{i=1}^n(\\hat{y}_i-\\bar{y})^2}{\\displaystyle\\sum_{i=1}^n(y_i-\\bar{y})^2}\\] 2.2.7 \\(R^2\\) Visually Blue Area = Total Variability (SST) Red Area = Variability Remaining Unexplained by Model (SSR) Blue Area - Red Area = Variability Explained by Model (SSM) \\(R^2 = \\frac{\\text{Area of Blue Squares} - \\text{Area of Red Squares}}{\\text{Area of Blue Squares}} = \\frac{\\text{SST}-\\text{SSR}}{\\text{SST}}= \\frac{\\text{SSM}}{\\text{SST}}\\) 2.2.8 Residuals for Square Feet Model ggplot(data=Houses, aes(x = SquareFeet, y = SalePrice)) + geom_segment(aes(xend = SquareFeet, yend = M_SqFt$fitted.values), color=&quot;red&quot;) + geom_point() + geom_point(aes(y = M_SqFt$fitted.values), shape = 1) + stat_smooth(method=&quot;lm&quot;, se=FALSE)+ theme_bw() SalePrice &lt;- Houses$SalePrice Predicted &lt;- M_SqFt$fitted.values Residual &lt;- M_SqFt$residuals ResidSq &lt;- Residual^2 SquareFeet &lt;- Houses$SquareFeet Residdf &lt;- data.frame(SquareFeet, SalePrice, Predicted, Residual, ResidSq) Residdf ## SquareFeet SalePrice Predicted Residual ResidSq ## 1 1499 187.00 187.88858 -0.8885824 0.7895786 ## 2 1456 163.99 182.69449 -18.7044870 349.8578356 ## 3 1525 235.00 191.02920 43.9708019 1933.4314183 ## 4 672 113.00 87.99284 25.0071576 625.3579304 ## 5 1179 110.00 149.23485 -39.2348498 1539.3734427 ## 6 930 84.90 119.15741 -34.2574142 1173.5704309 ## 7 864 123.00 111.18508 11.8149181 139.5922893 ## 8 1414 176.50 177.62118 -1.1211847 1.2570550 ## 9 1144 150.00 145.00710 4.9929021 24.9290718 ## 10 1008 137.00 128.57926 8.4207385 70.9088361 sum(M_SqFt$residuals^2) ## [1] 5859.068 2.2.9 Variation Explained by SquareFeet Model Created at http://www.rossmanchance.com/applets/RegShuffle.htm. Blue Area = Total Variability (SST) Red Area = Variability Remaining Unexplained by Model (SSR) Blue Area - Red Area = Variability Explained by Model (SSM) \\(R^2 = \\frac{\\text{Area of Blue Squares} - \\text{Area of Red Squares}}{\\text{Area of Blue Squares}} = \\frac{\\text{SST}-\\text{SSR}}{\\text{SST}}= \\frac{\\text{SSM}}{\\text{SST}}\\) 2.2.10 Variation Explained by Square Feet Model Total variability in house prices SST = 17,558.52 Variability remaining unexplained after accounting for square feet is SSR = 5,859.07 Variation explained by model accounting for square feet is \\[ \\text{SSM} = 17,558.52 - 5,859.07 = 11,699.45 \\] Proportion of variation explained by model accounting for square feet is \\[ R^2=\\frac{11,699.45}{17,558.52}\\approx0.6663\\] 66.6% of the variation in house price is explained by the model using square feet as an explanatory variable. summary(M_SqFt) ## ## Call: ## lm(formula = SalePrice ~ SquareFeet, data = Houses) ## ## Residuals: ## Min 1Q Median 3Q Max ## -39.235 -14.309 2.052 10.966 43.971 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.82000 36.35455 0.188 0.85586 ## SquareFeet 0.12079 0.03022 3.997 0.00397 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 27.06 on 8 degrees of freedom ## Multiple R-squared: 0.6663, Adjusted R-squared: 0.6246 ## F-statistic: 15.97 on 1 and 8 DF, p-value: 0.003967 2.2.11 Linear Correlation Coefficient ggplot(data=Houses, aes(x=SquareFeet, y=SalePrice)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) For linear models with a single quantitative variable, the linear correlation coefficient \\(r=\\sqrt{R^2}\\), or \\(r=-\\sqrt{R^2}\\) (with sign matching the sign on the slope of the line), provides information about the strength and direction of the linear relationship between the variables. \\(-1 \\leq r \\leq 1\\), and \\(r\\) close to \\(\\pm1\\) provides evidence of strong linear relationship, while \\(r\\) close to 0 suggests linear relationship is weak. \\(r\\) is only relevant for models with a single quantitative explanatory variable and a quantitative response variable, while \\(R^2\\) is relevant for any linear model with a quantitative response variable. cor(Houses$SalePrice,Houses$SquareFeet) ## [1] 0.8162794 2.3 Multiple Regression Model 2.3.1 Multiple Regression Model Suppose we have information on both the neighborhood and square feet in the houses. We can account for both of these together using a multiple regression model, i.e. a model with more than one explanatory variable. kable(Houses) Neighborhood SquareFeet SalePrice CollgCr 1499 187.00 CollgCr 1456 163.99 CollgCr 1525 235.00 Edwards 672 113.00 Edwards 1179 110.00 Edwards 930 84.90 NAmes 864 123.00 NAmes 1414 176.50 NAmes 1144 150.00 NAmes 1008 137.00 How can we predict the price of a: 848 square foot house in College Creek? 1200 square foot house in North Ames? 2314 square foot house in Edwards? 2.3.2 2-Variable Model Different Slopes We could try to lines to the houses in each neighborhood, independent of the other neighborhoods. ggplot(data=Houses, aes(x=SquareFeet, y=SalePrice, color=Neighborhood)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) Since there are only 3-4 houses per neighbhorhood, though, this isn’t a lot of information to go on. 2.3.3 2-Variable Model with Constant Slope Instead, we’ll assume the rate of increase wrt. square feet (i.e. slope) is the same in each neighborhood, but that some neighborhoods are more expensive than others. This allows us to use all 10 houses to estimate slope, while allowing intercepts to differ between neighborhoods. 2.3.4 House Price 2-Variable Model Summary M_Nbhd_SqFt &lt;- lm(data=Houses, SalePrice~SquareFeet+Neighborhood) summary(M_Nbhd_SqFt) ## ## Call: ## lm(formula = SalePrice ~ SquareFeet + Neighborhood, data = Houses) ## ## Residuals: ## Min 1Q Median 3Q Max ## -29.125 -9.050 -5.653 9.069 37.791 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 106.72593 68.92188 1.549 0.172 ## SquareFeet 0.05933 0.04517 1.314 0.237 ## NeighborhoodEdwards -59.09436 32.49761 -1.818 0.119 ## NeighborhoodNAmes -25.81232 25.59807 -1.008 0.352 ## ## Residual standard error: 24.55 on 6 degrees of freedom ## Multiple R-squared: 0.7941, Adjusted R-squared: 0.6911 ## F-statistic: 7.711 on 3 and 6 DF, p-value: 0.01757 2.3.5 MR Model for SquareFeet and Neighborhood In the model using both square feet and neighborhood, the regression equation is \\(\\widehat{\\text{Price}}= b_0+ b_1 \\times\\text{SquareFeet}+ b_2\\times\\text{I}_{Edwards} + b_3 \\times\\text{I}_{NAmes}\\) \\(\\widehat{\\text{Price}}= 106.73+ 0.06 \\times\\text{SquareFeet}+ -59.09 \\times\\text{I}_{Edwards} +-25.81 \\times\\text{I}_{NAmes}\\) The intercept \\(b_0\\) represents the expected price of a house in College Creek with 0 square feet. the intercept has no meaningful interpretation in this context \\(b_1\\) represents the expected change in price (in thousands) per one-unit increase in square feet, assuming neighborhood is the same. on average, we expect the price of a house to increase by $0.05933 thousand (i.e. $59.33) for each additional square foot, assuming the houses are in the same neighborhood. \\(b_2\\) and \\(b_3\\) represent the expected difference in price between a house in the Edwards (or North Ames) neighborhood, compared to the College Creek neighborhood, assuming square footage is the same. We expect a house in the Edwards neighborhood to cost $59.094 less than a house in the College Creek Neighborhood, assuming the houses are the same size. We expect a house in the North Ames Neighborhood to cost $25.812 less than a house in the College Creek Neighborhood, assuming the houses are the same size. 2.3.6 Predicting Price in MR Model \\(\\widehat{\\text{Price}}= 106.73+ 0.06 \\times\\text{SquareFeet}+ -59.09 \\times\\text{I}_{Edwards} +-25.81 \\times\\text{I}_{NAmes}\\) 848 square foot house in College Creek \\(\\widehat{\\text{Price}}= 106.73+ 0.06 \\times848+ -59.09 \\times0 +-25.81 \\times 0 =157.0378\\) thousand 1200 square foot house in North Ames \\(\\widehat{\\text{Price}}= 106.73+ 0.06 \\times1200+ -59.09 \\times0 +-25.81 \\times1 = 152.1096\\) thousand 2314 square foot house in Edwards \\(\\widehat{\\text{Price}}= 106.73+ 0.06 \\times\\text{SquareFeet}+ -59.09 \\times1 +-25.81 \\times 0 =184.9212\\) thousand 2.3.7 Risk of Extrapolation Note that 2314 square feet is well outside the range of our observed data. We should treat this prediction with caution, since we don’t know whether the trend we see in our data will continue. 2.3.8 Residuals for 2-Variable Model 2.3.9 Residuals for 2-Variable Model (cont.) SalePrice &lt;- Houses$SalePrice Predicted &lt;- M_Nbhd_SqFt$fitted.values Residual &lt;- M_Nbhd_SqFt$residuals ResidSq &lt;- M_Nbhd_SqFt$residuals^2 Residdf &lt;- data.frame(SalePrice, Predicted, Residual, ResidSq) Residdf ## SalePrice Predicted Residual ResidSq ## 1 187.00 195.6662 -8.666221 75.103383 ## 2 163.99 193.1149 -29.124898 848.259699 ## 3 235.00 197.2089 37.791119 1428.168680 ## 4 113.00 87.5034 25.496603 650.076744 ## 5 110.00 117.5853 -7.585270 57.536321 ## 6 84.90 102.8113 -17.911333 320.815835 ## 7 123.00 132.1774 -9.177395 84.224570 ## 8 176.50 164.8106 11.689410 136.642314 ## 9 150.00 148.7907 1.209343 1.462509 ## 10 137.00 140.7214 -3.721358 13.848508 sum(M_Nbhd_SqFt$residuals^2) ## [1] 3616.139 2.3.10 Variation Explained by 2-Variable Model Total Variation in house prices: SST=17,558.52 Variation remaining unexplained after accounting for square feet is SSR=3,616.139 Variation explained by model accounting for square feet is \\[SSM=SST-SSR=17,558.52 - 3,616.139 = 13,942.38\\] Proportion of variation in house prices explained by model is: \\[ R^2 = \\frac{13,942.38}{17,558.52}\\approx0.794 \\] 79.4% of the variation in house price is explained by the model using square feet and neighborhood as an explanatory variables. 2.3.11 Model Comparison Summary Model Variables Unexplained Variability Variability Explained \\(R^2\\) 0 None 17558.52489 0 0 1 Nbhd 4656.1875667 12902.3373233 0.734819 2 Sq. Ft. 5859.0678887 11699.4570013 0.6663121 3 Nbhd, Sq. Ft. 3616.1385638 13942.3863262 0.7940523 Comments on \\(R^2\\): \\(R^2\\) will never decrease when a new variable is added to a model. This does not mean that adding more variables to a model always improves its ability to make predictions on new data. \\(R^2\\) measures how well a model fits the data on which it was built. It is possible for a model with high \\(R^2\\) to “overfit” the data it was built from, and thus perform poorly on new data. We will discuss this idea extensively later in the course. On some datasets, there is a lot of “natural” variability in the response variable, and no model will achieve a high \\(R^2\\). That’s okay. Even a model with \\(R^2 = 0.10\\) or less can provide useful information. The task of a statistician is not to achieve a model that makes perfect predictions, but rather to be able to quantify the amount of uncertainty associated with the predictions we make. 2.4 Least-Squares Estimation 2.4.1 Line of Best Fit ggplot(data=Houses, aes(x=SquareFeet, y=SalePrice)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) The line \\(\\text{Price} = 6.82 + 0.12 \\times \\text{Square Feet}\\) is considered the “line of best fit” in the sense that it minimizes the sum of the squared residuals. This Rossman-Chance applet provides an illustration of the line of best fit. 2.4.2 Least-Squares Estimation in Simple Linear Regression Consider a simple linear regression(SLR) model, which is one with a singe quantitative explanatory variable. \\(\\hat{y}_i = b_0+b_1x_i\\) we need to choose the values of \\(b_0\\) and \\(b_1\\) that minimize: \\[ \\displaystyle\\sum_{i=1}^n(y_i-\\hat{y}_i)^2 =\\displaystyle\\sum_{i=1}^n(y_i-(b_0+b_1x_i))^2 \\] 2.4.3 Least-Squares Estimation in Simple Linear Regression (cont.) Using calculus, it can be shown that this quantity is minimized when \\(b_1=\\frac{\\displaystyle\\sum_{i=1}^{n}(x_i-\\bar{x})(y_i-\\bar{y})}{\\displaystyle\\sum_{i=1}^{n}(x_i-\\bar{x})^2}=\\frac{\\displaystyle\\sum_{i=1}^{n} x_i y_i-\\frac{\\displaystyle\\sum_{i=1}^{n} x_i \\displaystyle\\sum_{i=1}^{n} y_i }{n}}{\\left(\\displaystyle\\sum_{i=1}^{n} x_i^2 -\\frac{\\left(\\displaystyle\\sum_{i=1}^{n} x_i\\right)^2}{n}\\right)}\\) \\(b_0=\\bar{y}-b_1\\bar{x}\\) (where \\(\\bar{y}=\\frac{\\displaystyle\\sum_{i=1}^{n}{y_i}}{n}\\), and \\(\\bar{x}=\\frac{\\displaystyle\\sum_{i=1}^{n}{x_i}}{n}\\)). 2.4.4 LS Estimation for One Categorical Variable Consider a model with a single categorical variable (such as neighborhood), with G+1 categories, numbered \\(g=0,2, \\ldots, G\\) Then \\(\\hat{y}_i = b_0 + b_1x_{i1} + \\ldots +b_{G}x_{iG}\\). we need to minimize \\[ \\displaystyle\\sum_{i=1}^n(y_i-\\hat{y}_i)^2 =\\displaystyle\\sum_{i=1}^n(y_i-(b_0 + b_1x_{i1} + \\ldots +b_{G}x_{iG}))^2. \\] It can be shown that this is achieved when \\(b_0 = \\bar{y_0}\\) (i.e. the average response in the “baseline group”), and \\(b_j = \\bar{y_j} - \\bar{y}_0\\) 2.4.5 LS Estimation More Generally For multiple regression models, the logic is the same. We need to choose \\(b_0, b_1, \\ldots, b_p\\) in order to minimize \\[ \\displaystyle\\sum_{i=1}^n (y_i -\\hat{y}_i)^2 = \\displaystyle\\sum_{i=1}^n (y_i -(b_0 + b_1x_{i1} + b_2x_{i2} + \\ldots + b_px_{ip}))^2 \\] The mathematics, however are more complicated and require inverting a matrix. This goes beyond the scope of this class, so we will let R do the estimation and use the results. More on least squares estimation in multiple regression can be found here. 2.5 ANalysis Of VAriance 2.5.1 Submodels Model Variables Unexplained Variability Variability Explained \\(R^2\\) 0 None 17558.52489 0 0 1 Nbhd. 4656.1875667 12902.3373233 0.734819 2 Sq. Ft 5859.0678887 11699.4570013 0.6663121 3 Nbhd, Sq. Ft. 3616.1385638 13942.3863262 0.7940523 Notice that Model 1 is a submodel of Model 3, since all variables used in Model 1 are also used in Model 3. Model 2 is also a submodel of Model 3. Model 0 is a submodel of Models 1, 2, and 3. Models 1 and 2 are not submodels of each other, since Model 1 contains a variable used in Model 2 and Model 2 contains a variable not used in Model 1. 2.5.2 Comparing Submodels When one model is a submodel of another, we can compare the amount of variability explained by the models, using a technique known as ANalysis Of VAriance (ANOVA). Reduced Model: \\(\\hat{y}_i = b_0 + b_1x_{i1} + b_2x_{i2} + \\ldots + b_qx_{iq}\\) Full Model: \\(\\hat{y}_i = b_0 + b_1x_{i1} + b_2x_{i2} + \\ldots + b_qx_{iq} + b_{q+1}x_{i{q+1}} \\ldots + b_px_{ip}\\) p = # variables in Full Model q = # variables in Reduced Model n = number of observations We calculate a statistic called F: \\[ \\begin{aligned} F &amp;= \\frac{\\frac{\\text{SSR}_{\\text{Reduced}}-\\text{SSR}_{\\text{Full}}}{p-q}}{\\frac{\\text{SSR}_{\\text{Full}}}{n-(p+1)}} \\end{aligned} \\] Questions: 1. If the full model does a much better job explaining variability in the response variable than the reduced model, will the F-statistic be large or small? Can an F-statistic ever be negative? Why or why not? 2.5.3 Comments on F-Statistic The F-statistic measures the amount of variability explained by adding additional variable(s) to the model, relative to the total amount of unexplained variability. Large values of F indicate that adding the additional explanatory variables is helpful in explaining variability in the response variable Small values of F indicate that adding new explanatory variables variables does not make much of a difference in explaining variability in the response variable What counts as “large” is depends on \\(n, p,\\) and \\(q\\). We will revisit this later in the course. 2.5.4 ANOVA F-Statistic Let’s Calculate an ANOVA F-Statistic to compare Models 2 and 3. Reduced Model: \\(\\widehat{\\text{Price}}= b_0+ b_1 \\times\\text{SquareFeet}\\) Full Model: \\(\\widehat{\\text{Price}}= b_0+ b_1 \\times\\text{SquareFeet}+ b_2\\times\\text{I}_{Edwards} + b_3 \\times\\text{I}_{NAmes}\\) \\[ \\begin{aligned} F &amp;= \\frac{\\frac{\\text{SSR}_{\\text{Reduced}}-\\text{SSR}_{\\text{Full}}}{p-q}}{\\frac{\\text{SSR}_{\\text{Full}}}{n-(p+1)}} \\\\ &amp;=\\frac{\\frac{5,859.07-3,616.14}{3-1}}{\\frac{3,616.13}{10-(3+1)}} \\\\ \\end{aligned} \\] SSR2 &lt;- sum(M_SqFt$residuals^2); SSR3 &lt;- sum(M_Nbhd_SqFt$residuals^2); ((SSR2-SSR3)/(3-1))/((SSR3)/(10-(3+1))) ## [1] 1.860766 2.5.5 ANOVA F-Statistic for M2 vs M3 in R anova(M_SqFt, M_Nbhd_SqFt) ## Analysis of Variance Table ## ## Model 1: SalePrice ~ SquareFeet ## Model 2: SalePrice ~ SquareFeet + Neighborhood ## Res.Df RSS Df Sum of Sq F Pr(&gt;F) ## 1 8 5859.1 ## 2 6 3616.1 2 2242.9 1.8608 0.2351 Notice the F-statistic has the same value. Later, we will examine what this tells us about adding Neighborhood to a model already containing square feet as an explanatory variable. 2.5.6 ANOVA F-Statistic for M1 vs M0 Now, let’s compare Models 0 and 1. Reduced Model: \\(\\widehat{\\text{Price}}_i = b_0\\) Full Model: \\(\\widehat{\\text{Price}}_i = b_0 + b_1\\text{I}_{\\text{Edwards}} + b_2\\text{I}_{\\text{NAmes}}\\) \\[ \\begin{aligned} F &amp;= \\frac{\\frac{\\text{SSR}_{\\text{Reduced}}-\\text{SSR}_{\\text{Full}}}{p-q}}{\\frac{\\text{SSR}_{\\text{Full}}}{n-(p+1)}} \\\\ &amp;=\\frac{\\frac{17558.52-4656.19}{2-0}}{\\frac{4656.19}{10-(2+1)}} \\end{aligned} \\] SSR0 &lt;- sum(M0$residuals^2); SSR1 &lt;- sum(M_Nbhd$residuals^2); ((SSR0-SSR1)/(2-0))/((SSR1)/(10-(2+1))) ## [1] 9.698531 2.5.7 ANOVA F-Statistic for M0 vs M1 in R anova(M0, M_Nbhd) ## Analysis of Variance Table ## ## Model 1: SalePrice ~ 1 ## Model 2: SalePrice ~ Neighborhood ## Res.Df RSS Df Sum of Sq F Pr(&gt;F) ## 1 9 17558.5 ## 2 7 4656.2 2 12902 9.6985 0.009603 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 2.5.8 ANOVA F-Statistic for Categorical Variables The difference between M1 and M0 is that M1 considers the house’s neighborhood, while M0 does not. If neighborhood is helpful in modeling house price, then we would expect to see a high F-statistic. Another way to think about this is that if the amount of variability in house prices between different neighborhoods is large, relative to the amount of variability within neighborhoods, then the F-statistic should be large. In fact, an alternative (an mathematically equivalent) way to calculate the F-statistic is to calculate the ratio of variability between different neighborhoods, relative to the amount of variability within neighborhoods. 2.5.9 F-Statistic for Categorical Variables Illustration An F-statistic compares the amount of variability between groups to the amount of variability within groups. Scenario 1 Scenario 2 variation between groups High Low variation within groups Low High F Statistic Large Small Result Evidence of Group Differences No evidence of differences Question: Suppose, in these scenarios, we perform an F-test comparing a model the includes group as an explanatory variable, to one the includes no explanatory variables? Which scenario (1 or 2) would you expect to result in a larger F-statistic? 2.5.10 Alternative F-Statistic Formula For a categorical variable with \\(g\\) groups, let \\(\\bar{y}_{1\\cdot}, \\ldots, \\bar{y}_{g\\cdot}\\) represent the mean response for each group. let \\(n_1, \\ldots, n_g\\) represent the sample size for each group Then \\(\\frac{\\displaystyle\\sum_{i=1}^g\\sum_{j=1}^{n_i}n_i(y_{i\\cdot}-\\bar{y}_{\\cdot\\cdot})^2}{g-1}\\) gives a measure of how much the group means differ, and \\(\\frac{\\displaystyle\\sum_{i=1}^g\\sum_{j=1}^{n_i}(y_{ij}-\\bar{y}_{i\\cdot})^2}{n-g}\\) gives a measure of how much individual observations differ within groups An alternative formula for this F-statistic is: \\[ F= \\frac{\\text{Variability between Neighborhoods}}{\\text{Variability within Neighborhoods}}= \\frac{\\frac{\\displaystyle\\sum_{i=1}^g\\sum_{j=1}^{n_i}n_i(y_{i\\cdot}-\\bar{y}_{\\cdot\\cdot})^2}{g-1}}{\\frac{\\displaystyle\\sum_{i=1}^g\\sum_{j=1}^{n_i}(y_{ij}-\\bar{y}_{i\\cdot})^2}{n-g}} \\] It can be shown that this statistic is equivalent to the one we saw previously. 2.5.11 Calculating F-Statistic for Categorical Variables We have seen previously that: \\(\\bar{y}_{\\cdot\\cdot}=148.039\\) (overall average price), and \\(n=10\\) \\(\\bar{y}_{1\\cdot}=195.330\\) (average price in College Creek), and \\(n_1=3\\) \\(\\bar{y}_{2\\cdot}=102.633\\) (average price in Edwards), and \\(n_2=4\\) \\(\\bar{y}_{3\\cdot}=146.625\\) (average price in North Ames), and \\(n_3=3\\) Then, \\(\\frac{\\displaystyle\\sum_{i=1}^g\\sum_{j=1}^{n_i}(y_{i\\cdot}-\\bar{y}_{\\cdot\\cdot})^2}{g-1} = \\frac{3(195.330-148.039)^2+3(102.633-148.039)^2+4(146.625-148.039)^2}{3-1} = \\frac{12902}{2}\\), and \\(\\frac{\\displaystyle\\sum_{i=1}^g\\sum_{j=1}^{n_i}(y_{ij}-\\bar{y}_{i\\cdot})^2}{n-g} = \\frac{(123.00-146.625)^2+ (187.00 - 195.33)^2 + \\ldots + (137.00-146.625)^2}{10-3} = \\frac{4656}{7}\\) 2.5.12 Calculating F-Statistic for Categorical Variables \\[ F= \\frac{\\frac{\\displaystyle\\sum_{i=1}^g\\sum_{j=1}^{n_i}n_i(y_{i\\cdot}-\\bar{y}_{\\cdot\\cdot})^2}{g-1}}{\\frac{\\displaystyle\\sum_{i=1}^g\\sum_{j=1}^{n_i}(y_{ij}-\\bar{y}_{i\\cdot})^2}{n-g}} = \\frac{\\frac{(195.330-148.039)^2+(102.633-148.039)^2+(146.625-148.039)^2}{3-1}}{\\frac{(123.00-146.625)^2+ (187.00 - 195.33)^2 + \\ldots + (137.00-146.625)^2}{10-3}} = \\frac{\\frac{12902}{2}}{\\frac{4656}{7}} \\] Note that the quantity in the the quantity in the third line is equivalent to the sum of the squared residuals using M2. Thus, we can calculate F using: ((3*(195.330-148.039)^2+3*(102.633-148.039)^2+4*(146.625-148.039)^2)/(3-1))/(sum(M_Nbhd$residuals^2)/(10-3)) ## [1] 9.6986 2.5.13 Alternative Calculation in R This interpretation of the F-statistic can be seen using the AOV command in R. AOV_Nbhd &lt;- aov(data=Houses, SalePrice~Neighborhood) summary(AOV_Nbhd) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Neighborhood 2 12902 6451 9.699 0.0096 ** ## Residuals 7 4656 665 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The Neighborhood line represents the variability between neighborhoods The Residuals line represents the variability within neighborhoods The first two columns give the quantities we use in our formula. The third column, representing the ratio of the first two columns is called a mean square. 2.5.14 F-Statistic in R Output The last line in the summary output includes the F-statistic for the specified model, compared to a reduced model that includes only the intercept. Reduced Model: \\(\\widehat{Y}= b_0\\) Full Model: \\(\\widehat{Y}= b_0+ b_1 X_{i1}+ \\ldots+ b_p X_{ip}\\) This statistic addresses the question “Do any of the explanatory variables help explain variability in Y?”. When there is only one explanatory variable in the model, this statistic can be used to test whether there is evidence that this statistic is associated with \\(Y\\). 2.5.15 F-Statistic in R Output M1 The F-statistic compares a full model that includes neighborhood to a reduced model that predicts each price using the overall average. summary(M_Nbhd) ## ## Call: ## lm(formula = SalePrice ~ Neighborhood, data = Houses) ## ## Residuals: ## Min 1Q Median 3Q Max ## -31.340 -15.706 -2.477 9.617 39.670 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 195.33 14.89 13.118 0.00000349 *** ## NeighborhoodEdwards -92.70 21.06 -4.402 0.00315 ** ## NeighborhoodNAmes -48.70 19.70 -2.473 0.04267 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 25.79 on 7 degrees of freedom ## Multiple R-squared: 0.7348, Adjusted R-squared: 0.6591 ## F-statistic: 9.699 on 2 and 7 DF, p-value: 0.009603 2.5.16 F-Statistic in R Output M2 The F-statistic compares a full model that includes square feet to a reduced model that predicts each price using the overall average. summary(M_SqFt) ## ## Call: ## lm(formula = SalePrice ~ SquareFeet, data = Houses) ## ## Residuals: ## Min 1Q Median 3Q Max ## -39.235 -14.309 2.052 10.966 43.971 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.82000 36.35455 0.188 0.85586 ## SquareFeet 0.12079 0.03022 3.997 0.00397 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 27.06 on 8 degrees of freedom ## Multiple R-squared: 0.6663, Adjusted R-squared: 0.6246 ## F-statistic: 15.97 on 1 and 8 DF, p-value: 0.003967 2.5.17 F-Statistic in R Output M3 The F-statistic compares a full model that includes square feet and neighborhood to a reduced model that predicts each price using only the overall average. summary(M_Nbhd_SqFt) ## ## Call: ## lm(formula = SalePrice ~ SquareFeet + Neighborhood, data = Houses) ## ## Residuals: ## Min 1Q Median 3Q Max ## -29.125 -9.050 -5.653 9.069 37.791 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 106.72593 68.92188 1.549 0.172 ## SquareFeet 0.05933 0.04517 1.314 0.237 ## NeighborhoodEdwards -59.09436 32.49761 -1.818 0.119 ## NeighborhoodNAmes -25.81232 25.59807 -1.008 0.352 ## ## Residual standard error: 24.55 on 6 degrees of freedom ## Multiple R-squared: 0.7941, Adjusted R-squared: 0.6911 ## F-statistic: 7.711 on 3 and 6 DF, p-value: 0.01757 2.5.18 When to Use F-Statistics for Model Comparison We have used F-statistics to compare models 1 and 3, and models 0 and 2. We could also calculate F-statistics comparing models 2 and 3, models 0 and 1, and models 0 and 3. We cannot use an F-statistic to compare models 1 and 2, since neither is a submodel of the other. When comparing a model to the “intercept-only” model, we can use the model summary output. When comparing other to other submodels, use the aov() or anova() commands. 2.6 Models Involving Interaction 2.6.1 Bear Weights Dataset The Bolstad R package provides data on body measurements for a sample of 143 wild bears, who were anesthetized, measured and weighed, then released. Variables include: ID.- Indentification number Age - Bear’s age, in months. Note, wild bears are always born in January, so an expert can estimate the bear’s age without directly asking it how old it is. Month- Month when the measurement was made. 1 = Jan., 12 = Dec. Since bears hibernate in the winter, their body shape probably depends on the season. Sex - 1 = male 2 = female Head.L - Length of the head, in inches Head.W. - Width of the head, in inches Neck.G. - Girth (distance around) the neck, in inches Length. - Body length, in inches Chest.G. - Girth (distance around) the chest, in inches Weight - Weight of the bear, in pounds Obs.No - Observation number for this bear. For example, the bear with ID = 41 (Bertha) was measured on four occasions, in the months coded 7, 8, 11, and 5. The value of Obs.No goes from 1 to 4 for these observations. Name - The names of the bears given to them by the researchers Question of Interest: How quickly do bears gain weight as they grow? Do male and female bears gain weight at the same rate? 2.6.2 Exploring Bears Data library(Bolstad) data(bears) glimpse(bears) ## Rows: 143 ## Columns: 12 ## $ ID &lt;int&gt; 39, 41, 41, 41, 41, 43, 43, 45, 45, 48, 69, 83, 83, 83, 83, 91… ## $ Age &lt;int&gt; 19, 19, 20, 23, 29, 19, 20, 55, 67, 81, NA, 115, 117, 124, 140… ## $ Month &lt;int&gt; 7, 7, 8, 11, 5, 7, 8, 7, 7, 9, 10, 7, 9, 4, 8, 8, 4, 9, 7, 4, … ## $ Sex &lt;int&gt; 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1,… ## $ Head.L &lt;dbl&gt; 10.0, 11.0, 12.0, 12.5, 12.0, 11.0, 12.0, 16.5, 16.5, 15.5, 16… ## $ Head.W &lt;dbl&gt; 5.0, 6.5, 6.0, 5.0, 6.0, 5.5, 5.5, 9.0, 9.0, 8.0, 8.0, 10.0, 7… ## $ Neck.G &lt;dbl&gt; 15.0, 20.0, 17.0, 20.5, 18.0, 16.0, 17.0, 28.0, 27.0, 31.0, 32… ## $ Length &lt;dbl&gt; 45.0, 47.5, 57.0, 59.5, 62.0, 53.0, 56.0, 67.5, 78.0, 72.0, 77… ## $ Chest.G &lt;dbl&gt; 23.0, 24.0, 27.0, 38.0, 31.0, 26.0, 30.5, 45.0, 49.0, 54.0, 52… ## $ Weight &lt;int&gt; 65, 70, 74, 142, 121, 80, 108, 344, 371, 416, 432, 348, 476, 4… ## $ Obs.No &lt;int&gt; 1, 1, 2, 3, 4, 1, 2, 1, 2, 1, 1, 1, 2, 3, 4, 1, 1, 2, 1, 1, 2,… ## $ Name &lt;fct&gt; Allen, Berta, Berta, Berta, Berta, Clyde, Clyde, Doc, Doc, Qui… head(bears) ## ID Age Month Sex Head.L Head.W Neck.G Length Chest.G Weight Obs.No Name ## 1 39 19 7 1 10.0 5.0 15.0 45.0 23 65 1 Allen ## 2 41 19 7 2 11.0 6.5 20.0 47.5 24 70 1 Berta ## 3 41 20 8 2 12.0 6.0 17.0 57.0 27 74 2 Berta ## 4 41 23 11 2 12.5 5.0 20.5 59.5 38 142 3 Berta ## 5 41 29 5 2 12.0 6.0 18.0 62.0 31 121 4 Berta ## 6 43 19 7 1 11.0 5.5 16.0 53.0 26 80 1 Clyde 2.6.3 Bears Data Cleaning Notice that we have multiple observations on the same bears. The procedures we have learned so far require observations to be independent of each other. Thus, we’ll keep only the first observation on each bear. Bears_Subset &lt;- bears %&gt;% filter(Obs.No == 1) The variables Month and Sex are coded as integers, but it really makes more sense to think of these as categorical variables. Thus, we will convert them to factors. Bears_Subset$Month &lt;- as.factor(Bears_Subset$Month) Bears_Subset$Sex &lt;- as.factor(Bears_Subset$Sex) summary(Bears_Subset) ## ID Age Month Sex Head.L ## Min. : 39.0 Min. : 8.00 8 :23 1:62 Min. : 9.00 ## 1st Qu.:525.0 1st Qu.: 17.00 9 :20 2:35 1st Qu.:12.00 ## Median :579.0 Median : 34.00 10 :14 Median :13.00 ## Mean :537.6 Mean : 42.64 7 :11 Mean :13.29 ## 3rd Qu.:640.0 3rd Qu.: 57.25 11 : 9 3rd Qu.:14.50 ## Max. :911.0 Max. :177.00 4 : 8 Max. :18.50 ## NA&#39;s :41 (Other):12 ## Head.W Neck.G Length Chest.G ## Min. : 4.000 Min. :10.00 Min. :36.00 Min. :19.00 ## 1st Qu.: 5.000 1st Qu.:17.50 1st Qu.:54.50 1st Qu.:30.00 ## Median : 6.000 Median :20.00 Median :61.00 Median :34.00 ## Mean : 6.364 Mean :21.03 Mean :60.41 Mean :35.93 ## 3rd Qu.: 7.000 3rd Qu.:24.00 3rd Qu.:67.00 3rd Qu.:42.00 ## Max. :10.000 Max. :32.00 Max. :83.00 Max. :55.00 ## ## Weight Obs.No Name ## Min. : 26.0 Min. :1 Ian : 2 ## 1st Qu.:114.0 1st Qu.:1 Abe : 1 ## Median :154.0 Median :1 Addy : 1 ## Mean :187.2 Mean :1 Albert : 1 ## 3rd Qu.:236.0 3rd Qu.:1 Allen : 1 ## Max. :514.0 Max. :1 (Other):89 ## NA&#39;s : 2 2.6.4 Bear Weights and Ages Histogram of Bear Weights ggplot(data=Bears_Subset, aes(x=Weight)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;Weight&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Weights of Bears&quot;) We see that bears most commonly weigh between 100 and 200 lbs, and the distribution of weights is right-skewed. Histogram of Bear Ages ggplot(data=Bears_Subset, aes(x=Age)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;Age (in months)&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Ages of Bears (in months)&quot;) Most of the bears are less than 72 months (6 years) old, although there are a few older bears. Bears with Missing Ages Recall that 41 bears had missing ages. They will be ignored if we use age in our model. To see how this might impact predicted weights, let’s look at how weights compare for bears with and without missing ages. ggplot(data=Bears_Subset, aes(x=is.na(Age), y=Weight)) + geom_boxplot() + coord_flip() Bears with missing ages do not seem to be systematically different than those whose ages are recorded, with respect to weight, so the missing ages should not cause too much concern with out model results. Boxplot of Weight by Sex ggplot(data=Bears_Subset, aes(y=Weight, x=Sex)) + geom_boxplot() + xlab(&quot;Sex(1=M, 2=F)&quot;) + ylab(&quot;Weight in lbs&quot;) + ggtitle(&quot;Weight by Sex&quot;) + coord_flip() Boxplot of Age by Sex ggplot(data=Bears_Subset, aes(y=Age, x=Sex)) + geom_boxplot() + xlab(&quot;Sex(1=M, 2=F)&quot;) + ylab(&quot;Age in Months&quot;) + ggtitle(&quot;Age by Sex&quot;) + coord_flip() The median age for female bears is older than for male bears. There are 2 male bears that are much older than any others. Scatterplot of Age and Weight ggplot(data=Bears_Subset, aes(x=Age, y=Weight, color=Sex)) + geom_point() + xlab(&quot;Age in Months&quot;) We see that there is a positive, roughly linear, relationship between age and weight. We should note that this linear trend is not likely to continue outside the range of our observed ages. 2.6.5 Two Possible Models We’ll consider two possible models, based on different sets of assumptions. Model 1 Assumptions: * Assume weight increases linearly with age * Allow for differences in expected weight for male and female bears of same age * Assume male and female bears gain weight at the same rate as they age Model 2 Assumptions * Assumes weight increases linearly with age * Allows for differences in expected weight for male and female bears of same age * Allows male and female bears to gain weight at different rates as they age 2.6.6 Models with Interaction Notice that in Model 1, the effect of age on weight is the same for both sexes, while in Model 2, the effect of age on weight depends on sex. An interaction between two explanatory variables occurs when the effect of one explanatory variable on the response depends on the other explanatory variable. In Model 2, there is an interaction between age and sex. **Note that neigher Model 1 nor Model 2 is inherently “correct”. They are just different ways to represent and model growth of bears. We should rely on our intuition, and background knowledge, as well as the data to inform us which model is more appropriate in a given context. 2.6.7 Model Equations Model 1: \\(\\widehat{\\text{Weight}}= b_0+ b_1 \\times\\text{Age}+ b_2\\times\\text{I}_{Female}\\) Model 2: \\(\\widehat{\\text{Weight}}= b_0+ b_1 \\times\\text{Age}+ b_2\\times\\text{I}_{Female} + b_3\\times\\text{Age}\\times\\text{I}_{Female}\\) The term \\(b_3\\times\\text{Age}\\times\\text{I}_{Female}\\), involving a product of the explanatory variables is called an interaction term. 2.6.8 Expected Weight Equations Model 1: \\(\\widehat{\\text{Weight}}= b_0+ b_1 \\times\\text{Age}+ b_2\\times\\text{I}_{Female}\\) Sex Pred. Weight M \\(b_0 + b_1 \\times\\text{Age}\\) F \\((b_0 + b_2) + b_1 \\times\\text{Age}\\) Model 2: \\(\\widehat{\\text{Weight}}= b_0+ b_1 \\times\\text{Age}+ b_2\\times\\text{I}_{Female} + b_3\\times\\text{Age}\\times\\text{I}_{Female}\\) Sex Pred. Weight M \\(b_0 + b_1 \\times\\text{Age}\\) F \\((b_0 + b_2) + (b_1 + b_3) \\times\\text{Age}\\) Question: How should we interpret the coefficient \\(b_1\\) in Model 1? Is the interpretation the same in Model 2? Why or why not? 2.6.9 Interpretations of Interaction Model Coefficients Model 2 \\(\\widehat{\\text{Weight}}= b_0+ b_1 \\times\\text{Age}+ b_2\\times\\text{I}_{Female} + b_3\\times\\text{Age}\\times\\text{I}_{Female}\\) Sex Pred. Weight M \\(b_0 + b_1 \\times\\text{Age}\\) F \\((b_0 + b_2) + (b_1 + b_3) \\times\\text{Age}\\) Interpretations: \\(b_0\\): expected weight of a male bear at birth (caution:extrapolation) \\(b_1\\): expected weight gain per month for male bears \\(b_2\\): expected difference in weight between female and male bears at birth (caution:extrapolation) \\(b_3\\): expected difference in monthly weight gain for female bears, compared to male bears \\(b_0+b_2\\): expected weight of a female bear at birth (caution:extrapolation) \\(b1 + b3\\): expected weight gain per month for female bears 2.6.10 Model 1 R Output Bears_M_Age_Sex &lt;- lm(data=Bears_Subset, Weight ~ Age + Sex) summary(Bears_M_Age_Sex) ## ## Call: ## lm(formula = Weight ~ Age + Sex, data = Bears_Subset) ## ## Residuals: ## Min 1Q Median 3Q Max ## -164.194 -48.483 -3.723 27.766 188.684 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 82.6049 16.4019 5.036 0.0000058437067215 *** ## Age 2.9242 0.2914 10.035 0.0000000000000744 *** ## Sex2 -79.8967 20.1416 -3.967 0.00022 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 71.33 on 53 degrees of freedom ## (41 observations deleted due to missingness) ## Multiple R-squared: 0.6679, Adjusted R-squared: 0.6554 ## F-statistic: 53.29 on 2 and 53 DF, p-value: 0.0000000000002061 2.6.11 Model 2 R Output To fit an interaction model in R, use * instead of + Bears_M_Age_Sex_Int &lt;- lm(data=Bears_Subset, Weight~ Age*Sex) summary(Bears_M_Age_Sex_Int) ## ## Call: ## lm(formula = Weight ~ Age * Sex, data = Bears_Subset) ## ## Residuals: ## Min 1Q Median 3Q Max ## -207.583 -38.854 -9.574 23.905 174.802 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 70.4322 17.7260 3.973 0.000219 *** ## Age 3.2381 0.3435 9.428 0.000000000000765 *** ## Sex2 -31.9574 35.0314 -0.912 0.365848 ## Age:Sex2 -1.0350 0.6237 -1.659 0.103037 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 70.18 on 52 degrees of freedom ## (41 observations deleted due to missingness) ## Multiple R-squared: 0.6846, Adjusted R-squared: 0.6664 ## F-statistic: 37.62 on 3 and 52 DF, p-value: 0.0000000000004552 2.6.12 Model 1 Interpretations \\(\\widehat{\\text{Weight}}= 82.60 + 2.92 \\times\\text{Age} - 79.90\\times\\text{I}_{Female}\\) Male Bears: \\[ \\widehat{\\text{Weight}}= 70.43 + 2.92 \\times\\text{Age} \\] Female Bears: \\[ \\widehat{\\text{Weight}}= (82.60 -79.90) + (2.92)\\times\\text{Age} \\\\ = 2.7+2.92\\times Age \\] For bears of the same sex, weight is expected to increase by 2.92 lbs. each month. On average, a female bear is expected to weigh 79.90 lbs less than a male bear of the same age. Approximately 67% of the variation in bear weights is explained by the model using age and sex as explanatory variables. 2.6.13 Model 2 Interpretations \\(\\widehat{\\text{Weight}}= 70.43 + 3.24 \\times\\text{Age}- 31.96\\times\\text{I}_{Female} -1.04\\times\\text{Age}\\times\\text{I}_{Female}\\) For Model 2, we can write different equations for bears of each sex: Male Bears: \\[ \\widehat{\\text{Weight}}= 70.43 + 3.24 \\times\\text{Age} \\] Female Bears: \\[ \\widehat{\\text{Weight}}= (70.43 -31.96) + (3.24-1.04)\\times\\text{Age} \\\\ = 38.47+ 2.20\\times Age \\] On average, a male bear is expected to weigh \\(b_0=70.43\\) lbs at birth, and a female bear is expected to weigh 38.47 lbs at birth. We should treat these interpretation with caution, since all bears in the dataset were at least 8 months old. A male bear is expected to gain 3.24 lbs per month, on average. A female bear is expected to gain 2.2 lbs per month on average. Approximately 68.5% of the variation in bear weights is explained by the model using age and sex as explanatory variables. 2.6.14 Predicting Bear Weights Suppose Sally and Yogi are 25 month old bears, Sally is a female, Yogi a male. Model 1 Sally’s Predicted Weight: \\(\\widehat{\\text{Weight}}= 82.60 + 2.920 \\times 25 -78.90\\times 1 \\approx 75.8 \\text{ lbs.}\\) Yogi’s Predicted Weight: \\(\\widehat{\\text{Weight}}= 82.60 + 2.920 \\times 25 -78.90\\times 0 \\approx 155.7 \\text{ lbs.}\\) Model 2 Sally’s Predicted Weight: \\(\\widehat{\\text{Weight}}= 70.43+ 3.24 \\times 25- 31.96\\times1 -1.04\\times25\\times1 \\approx 93.55 \\text{ lbs.}\\) Yogi’s Predicted Weight: \\(\\widehat{\\text{Weight}}= 70.43+ 3.24 \\times 25- 31.96\\times0 -1.04\\times25\\times0 \\approx 151.38 \\text{ lbs.}\\) 2.6.15 predict Function in R We can use the predict function in R to calculate predictions. We first create a dataframe with the values and categories of explanatory variables for the cases we’re trying to predict. Sex &lt;- factor(c(1, 2)) Age &lt;- c(25, 25) NewBears &lt;- data.frame(Age, Sex) Model 1 predict(Bears_M_Age_Sex, newdata=NewBears) ## 1 2 ## 155.71061 75.81394 Model 2 predict(Bears_M_Age_Sex_Int, newdata=NewBears) ## 1 2 ## 151.38566 93.55306 2.6.16 Bears Weight Model Considerations \\(R^2\\) increased from 0.67 to 0.68 when the interaction term is added. This is a relatively small increase, so we might question whether the interaction term is needed. The constant slope model allows us to combine information across sexes to estimate the expected slope. The interaction model treats the two sexes completely separately, thus has less information to use for each estimate. Which model is preferable is not clear. In addition to the data, we should consider other relevent information. Do experts who study bears believe it is reasonable to assume that male and female bears grow at the same rate per month? While the models yield drastically different predictions for very young bears, the differences are not as big for bear 8 months or older. Regardless of model we use, we should be careful about making predictions for bears that are younger or older than those that we have data on. Both of these models contain assumptions that are probably unrealistic Both models assume that bears of the same sex gain weight linearly with age. A more realistic model might assume that bears gain weight more quickly when they are younger, and that the rate of growth slows once they reach adulthood. Are there variables not included in the model that might be predictive of a bear’s weight? Of course there is no statistical model that perfectly describes expected weight gain of bears. The question is whether we can find a model that provides an approximation that is reasonable enough to draw conclusions from. As statistician George Box famously said, “All models are wrong, but some are useful.” 2.7 More on Interaction 2.7.1 Two Categorical Variables In the previous section, we saw an example of an interaction involving a quantitative variable (age), and a categorical variable (sex). Interactions between two categorical variables (or two quantitative variables) also occur in practice. Recall the definition of an interaction is that the effect of one explanatory variable on the response variable depends on the other categorical variable. 2.7.2 Bears Weight By Season and Sex We’ll investigate whether bears tend to weigh more in certain seasons than others, and whether there effect of season is the same for male and female bears. We start by creating plots to explore the relationship between season and sex. Observations per Season Recall that the dataset contains the month the bear was observed. Let’s combine the months of April and May into a category called “Spring”, June, July, and August into “Summer”, and “September”, “October”, and “November”, into “Fall”. Bears_Subset &lt;- Bears_Subset %&gt;% mutate(Season = ifelse(Month %in% 4:5, &quot;Spring&quot;, ifelse(Month %in% 6:8, &quot;Summer&quot;, &quot;Fall&quot;))) Bears_Subset$Season &lt;- as.factor(Bears_Subset$Season) ggplot(data=Bears_Subset, aes(x=Season)) + geom_bar(color=&quot;white&quot;, fill=&quot;lightblue&quot;) Boxplot of Weight by Season ggplot(data=Bears_Subset, aes(x=Season, y=Weight)) + geom_boxplot() + geom_jitter() Boxplot of Weight by Sex ggplot(data=Bears_Subset, aes(y=Weight, x=Sex)) + geom_boxplot() + geom_jitter()+ xlab(&quot;Sex(1=M, 2=F)&quot;) + ylab(&quot;Weight&quot;) + ggtitle(&quot;Weight by Sex&quot;) + coord_flip() We see that male bears (Category 1) weigh more than female bears on average, and that there is more variability in the weights of male bears than female bears. 2.7.3 Two Models We’ll consider two models: Model 1 Assumptions (No interaction): Allows weights to differ by sex and season. Assumes difference between sexes is the same in each season and difference between seasons is the same for each sex. Model 2 Assumptions: (Interaction between sex and season) Allows for differences between seasons and sexes. Allows for differences between sexes to vary between seasons and difference between seasons to vary between sexes. 2.7.4 Model Equations Model 1 Equation (No Interaction) \\(\\widehat{\\text{Weight}} = b_0+b_1\\times\\text{I}_{\\text{Spring}}+b_2\\times\\text{I}_{\\text{Summer}} + b_3\\times\\text{I}_{\\text{Female}}\\) Season Male Female Fall \\(b_0\\) \\(b_0 + b_3\\) Spring \\(b_0 + b_1\\) \\(b_0 + b_1+ b_3\\) Summer \\(b_0 + b_2\\) \\(b_0 + b_2+ b_3\\) Model 2 Equation (Interaction) \\[\\widehat{\\text{Weight}} = b_0 + b_1 \\times\\text{I}_{\\text{Spring}} + b_2\\times\\text{I}_{\\text{Summer}} +b_3\\times\\text{I}_{\\text{Female}}\\\\ +b_4\\times\\text{I}_{\\text{Spring}}\\text{I}_{\\text{Female}} +b_5\\times\\text{I}_{\\text{Summer}}\\text{I}_{\\text{Female}}\\] Male Female Fall \\(b_0\\) \\(b_0+b_3\\) Spring \\(b_0+b_1\\) \\(b_0+b_1 +b_3+b_4\\) Summer \\(b_0+b_2\\) \\(b_0+b_2+b_3+b_5\\) \\(b_4\\) and \\(b_5\\) are called interaction effects. Notice that in Model 1, \\(b3\\) always represents the expected difference in weights between male and female bears, regardless of season, while in Model 2, the expected difference between male and female bears’ weights depends on the season. 2.7.5 Bears Season and Sex Interaction Model To fit an interaction model in R, use * instead of + Bears_M_Season_Sex_Int &lt;- lm(data=Bears_Subset, Weight~Season * Sex) summary(Bears_M_Season_Sex_Int) ## ## Call: ## lm(formula = Weight ~ Season * Sex, data = Bears_Subset) ## ## Residuals: ## Min 1Q Median 3Q Max ## -181.14 -73.14 -13.07 58.81 292.86 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 221.14 20.28 10.905 &lt;0.0000000000000002 *** ## SeasonSpring -14.00 45.99 -0.304 0.762 ## SeasonSummer -17.95 29.49 -0.608 0.544 ## Sex2 -50.07 35.54 -1.409 0.162 ## SeasonSpring:Sex2 -29.08 68.34 -0.425 0.672 ## SeasonSummer:Sex2 -30.41 50.73 -0.599 0.550 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 109.2 on 91 degrees of freedom ## Multiple R-squared: 0.1064, Adjusted R-squared: 0.0573 ## F-statistic: 2.167 on 5 and 91 DF, p-value: 0.06458 2.7.6 Predictions for Season and Sex Interaction Model \\[\\widehat{\\text{Weight}} = b_0 + b_1 \\times\\text{I}_{\\text{Spring}} + b_2\\times\\text{I}_{\\text{Summer}} +b_3\\times\\text{I}_{\\text{Female}}\\\\ +b_4\\times\\text{I}_{\\text{Spring}}\\text{I}_{\\text{Female}} +b_5\\times\\text{I}_{\\text{Summer}}\\text{I}_{\\text{Female}}\\] \\[ \\begin{aligned} \\widehat{\\text{Weight}} &amp;= 221.14 -14.00 \\times\\text{I}_{\\text{Spring}} -17.95\\times\\text{I}_{\\text{Summer}} -50.07\\times\\text{I}_{\\text{Female}} \\\\ &amp;-29.08\\times\\text{I}_{\\text{Spring}}\\text{I}_{\\text{Female}} -30.41\\times\\text{I}_{\\text{Summer}}\\text{I}_{\\text{Female}} \\end{aligned} \\] Male Female Fall 221.14 -14.00(0) -17.95(0) -50.07(0) -29.08(0)(0) -30.41(0)(0)=221.14 221.14 -14.00(0) -17.95(0) -50.07(1) -29.08(0)(1) -30.41(0)(1) =171.07 Spring 221.14 -14.00(1) -17.95(0) -50.07(0) -29.08(1)(0) -30.41(0)(0) =207.14 211.375 + 8.01221.14 -14.00(1) -17.95(0) -50.07(1) -29.08(1)(1) -30.41(0)(1)=128.00 Summer 221.14 -14.00(0) -17.95(1) -50.07(0) -29.08(0)(0) -30.41(1)(0) =203.19 221.14 -14.00(0) -17.95(1) -50.07(1) -29.08(0)(1) -30.41(1)(1) =122.71 2.7.7 Season and Sex Interaction Model Interpretations \\[\\widehat{\\text{Weight}} = b_0 + b_1 \\times\\text{I}_{\\text{Spring}} + b_2\\times\\text{I}_{\\text{Summer}} +b_3\\times\\text{I}_{\\text{Female}}\\\\ +b_4\\times\\text{I}_{\\text{Spring}}\\text{I}_{\\text{Female}} +b_5\\times\\text{I}_{\\text{Summer}}\\text{I}_{\\text{Female}}\\] Male Female Fall \\(b_0\\) \\(b_0+b_3\\) Spring \\(b_0+b_1\\) \\(b_0+b_1 +b_3+b_4\\) Summer \\(b_0+b_2\\) \\(b_0+b_2+b_3+b_5\\) \\(b_0\\) represents expected weight of male bear in fall \\(b_1\\) represents difference between expected male bear weight in spring, compared to fall \\(b_2\\) represents difference between expected male bear weight in summer, compared to fall \\(b_3\\) represents difference between expected female bear weight, compared to male bear weight in fall \\(b_4\\) represents difference in expected weights between the sexes in the spring, compared to the difference in the fall \\(b_5\\) represents difference in expected weights between the sexes in the summer, compared to the difference in the fall 2.7.8 Interpretations for Season and Sex Interaction Model \\[ \\begin{aligned} \\widehat{\\text{Weight}} &amp;= 221.14 -14.00 \\times\\text{I}_{\\text{Spring}} -17.95\\times\\text{I}_{\\text{Summer}} -50.07\\times\\text{I}_{\\text{Female}} \\\\ &amp;-29.08\\times\\text{I}_{\\text{Spring}}\\text{I}_{\\text{Female}} -30.41\\times\\text{I}_{\\text{Summer}}\\text{I}_{\\text{Female}} \\end{aligned} \\] On average, male bears are expected to weigh 221.14 lbs in the fall. On average male bears are expected to weigh 14 lbs less in the spring than in the fall. On average, male bears are expected to weigh 17.95 lbs less in the summer than in the fall. On average, female bears are expected to weigh 50.07 lbs less than male bears in the fall. On average, the female bears are expected to weigh 29.08 lbs. less relative to male bears in the spring, compared to the expected difference the fall. Thus, female bears are expected to weigh 50.07 + 29.08 = 79.17 lbs less than male bears in the spring. On average, female bears are expected to weigh 30.41 lbs less, relative to male bears in the summer, compared to the expected difference in the fall. Thus, female bears are expected to weigh \\(50.07 + 30.41 = 80.48\\) lbs less than male bears in the summer. The interaction model explains about 10.6% of the variation in bear weights. 2.7.9 Predicting New Observations in R We can calculate predictions directly in R by putting the new data in a data.frame and calling the predict() function. Season &lt;- c(&quot;Fall&quot;, &quot;Fall&quot;, &quot;Spring&quot;, &quot;Spring&quot;, &quot;Summer&quot;, &quot;Summer&quot;) Sex &lt;- factor(c(1,2,1,2,1,2)) NewBears &lt;- data.frame(Season, Sex) predict(Bears_M_Season_Sex_Int, newdata=NewBears) ## 1 2 3 4 5 6 ## 221.1379 171.0714 207.1429 128.0000 203.1923 122.7143 2.7.10 Interaction Between Two Quantitative Variables Interactions are also possible between two quantitative variables. Suppose, for example, that we want to examine the relationship between age and length on weight of a bear. If we expect that the effect of an additional inch in length, on the weight of a bear, might be different depending on the bear’s age, then this would be an example of an interaction between age and length. 2.7.11 Models for Age and Length Model 1 Assumptions (No interaction): Allows weights to differ by age and length Assumes rate of change in weight with respect to age is the same, regardless of length, and rate of change in age with respect to length is same, regardless of age. Model 2 Assumptions: (Interaction between age and length) Allows for differences between seasons and sexes. Allows rate of change in weight with respect to age, to differ, depending on length, and rate of change in weight with respect to length, to differ, depending on age. 2.7.12 Model Equations Model 1 Equation (No Interaction) \\(\\widehat{\\text{Weight}} = b_0+b_1\\times\\text{Age}+b_2\\times\\text{Length}\\) Model 2 Equation (Interaction) \\(\\widehat{\\text{Weight}} = b_0+b_1\\times\\text{Age}+b_2\\times\\text{Length} + b_3 \\times\\text{Age}\\times\\text{Length}\\) \\(b_3\\) is an interaction effects. 2.7.13 6 and 24 Month Old Bears In the interaction model (Model 2), the effect of length on weight depends on age: For a 6-month old bear: \\[ \\begin{aligned} \\widehat{\\text{Weight}} &amp; = b_0+6b_1+b_2\\times\\text{Length} + 6b_3 \\times\\text{Length} \\\\ &amp; = (b_0+6b_1)+(b_2+6b_3)\\times\\text{Length} \\end{aligned} \\] For each additional inch in length, the weight of a 6-month old bear is expected to increase by \\(b_2+6b_3\\) pounds. For a 24-month old bear: \\[ \\begin{aligned} \\widehat{\\text{Weight}} &amp; = b_0+6b_1+b_2\\times\\text{Length} + 6b_3 \\times\\text{Length} \\\\ &amp; = (b_0+24b_1)+(b_2+24b_3)\\times\\text{Length} \\end{aligned} \\] For each additional inch in length, the weight of a 24-month old bear is expected to increase by \\(b_2+24b_3\\) pounds. 2.7.14 Interaction Model in R Bears_M_Age_Length_Int &lt;- lm(data=Bears_Subset, Weight~ Age*Length) summary(Bears_M_Age_Length_Int) ## ## Call: ## lm(formula = Weight ~ Age * Length, data = Bears_Subset) ## ## Residuals: ## Min 1Q Median 3Q Max ## -121.93 -29.90 -7.37 16.25 130.22 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -165.82578 54.76390 -3.028 0.003826 ** ## Age -7.66320 1.97286 -3.884 0.000292 *** ## Length 5.62418 1.00480 5.597 0.000000826 *** ## Age:Length 0.12577 0.02848 4.416 0.000051090 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 49.1 on 52 degrees of freedom ## (41 observations deleted due to missingness) ## Multiple R-squared: 0.8456, Adjusted R-squared: 0.8367 ## F-statistic: 94.94 on 3 and 52 DF, p-value: &lt; 0.00000000000000022 2.7.15 Age, Length Interaction Interpretations For a 6-month old bear: \\[ \\begin{aligned} \\widehat{\\text{Weight}} &amp;= (-165.83+6(-7.66))+(5.62+6(0.13))\\times\\text{Length} \\\\ &amp; = -211.79+6.4\\times\\text{Length} \\end{aligned} \\] For a 24-month old bear: \\[ \\begin{aligned} \\widehat{\\text{Weight}} &amp;= (-165.83+24(-7.66))+(5.62+24(0.13))\\times\\text{Length} \\\\ &amp; = -349.67+8.65\\times\\text{Length} \\end{aligned} \\] For each additional inch in length, the weight of a 6-month old bear is expected to increase by \\(5.62+6(0.13)=6.4\\) pounds. For each additional inch in length, the weight of a 24-month old bear is expected to increase by \\(5.62+24(0.13)=8.65\\) pounds. The interaction model explains about 85% of total variability in bear weight. We could, of course, perform similar calculations for bears of any age/length. The key is that the effect of length on weight depends on age (and likewise, the effect of age on weight depends on length). 2.7.16 Interaction vs Correlation It is easy to confuse the concept of interaction with that of correlation (seen in Section 1.2). A correlation between two variables means that as one increases, the other is more likely to increase or decrease. An interaction between two explanatory variables means that the effect of one on the response depends on the other. For example, we might expect that bigger cars will get lower gas mileage. This is an example of a (negative) correlation between gas mileage and size of the car. In the example, there would only be an interaction, if the effect of gas mileage on a response variable (say price) depends on the size of the car. If for example, better gas mileage was associated with higher price for small cars, but had no impact on price for large cars, then this would be an example of an interaction between size and gas mileage. "],["hypothesis-testing-via-permutation.html", "Chapter 3 Hypothesis Testing via Permutation 3.1 Test for Difference in Means 3.2 Test for Difference in Standard Deviation 3.3 Test for Regression Slope 3.4 Test for Comparing Multiple Groups", " Chapter 3 Hypothesis Testing via Permutation Learning Outcomes: State null and alternative hypotheses associated with models involving categorical and quantitative explanatory variables. Explain how to use permutation tests for hypotheses involving means, medians, F-statistics, slopes, and other regression coefficients, as well as functions of these statistics. Interpret p-values in context. Explain the conclusions we should draw from from a hypothesis test, while accounting for other information available in a dataset. Explain how to simultaneously test for differences between multiple groups. Distinguish between statistical significance and practical importance. 3.1 Test for Difference in Means 3.1.1 Mercury Levels in Florida Lakes A 2004 study by Lange, T., Royals, H. and Connor, L. examined Mercury accumulation in large-mouth bass, taken from a sample of 53 Florida Lakes. If Mercury accumulation exceeds 0.5 ppm, then there are environmental concerns. In fact, the legal safety limit in Canada is 0.5 ppm, although it is 1 ppm in the United States. Figure 3.1: https://www.maine.gov/ifw/fish-wildlife/fisheries/species-information/largemouth-bass.html 3.1.2 Florida Lakes Dataset data(&quot;FloridaLakes&quot;) glimpse(FloridaLakes) ## Rows: 53 ## Columns: 12 ## $ ID &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1… ## $ Lake &lt;chr&gt; &quot;Alligator&quot;, &quot;Annie&quot;, &quot;Apopka&quot;, &quot;Blue Cypress&quot;, &quot;Bri… ## $ Alkalinity &lt;dbl&gt; 5.9, 3.5, 116.0, 39.4, 2.5, 19.6, 5.2, 71.4, 26.4, 4… ## $ pH &lt;dbl&gt; 6.1, 5.1, 9.1, 6.9, 4.6, 7.3, 5.4, 8.1, 5.8, 6.4, 5.… ## $ Calcium &lt;dbl&gt; 3.0, 1.9, 44.1, 16.4, 2.9, 4.5, 2.8, 55.2, 9.2, 4.6,… ## $ Chlorophyll &lt;dbl&gt; 0.7, 3.2, 128.3, 3.5, 1.8, 44.1, 3.4, 33.7, 1.6, 22.… ## $ AvgMercury &lt;dbl&gt; 1.23, 1.33, 0.04, 0.44, 1.20, 0.27, 0.48, 0.19, 0.83… ## $ NumSamples &lt;int&gt; 5, 7, 6, 12, 12, 14, 10, 12, 24, 12, 12, 12, 7, 43, … ## $ MinMercury &lt;dbl&gt; 0.85, 0.92, 0.04, 0.13, 0.69, 0.04, 0.30, 0.08, 0.26… ## $ MaxMercury &lt;dbl&gt; 1.43, 1.90, 0.06, 0.84, 1.50, 0.48, 0.72, 0.38, 1.40… ## $ ThreeYrStdMercury &lt;dbl&gt; 1.53, 1.33, 0.04, 0.44, 1.33, 0.25, 0.45, 0.16, 0.72… ## $ AgeData &lt;int&gt; 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1… We are interested in whether mercury levels are higher or lower, on average, in Northern Florida compared to Southern Florida. We’ll divide the state along route 50, which runs East-West, passing through Northern Orlando. Figure 3.2: from Google Maps We add a variable indicating whether each lake lies in the northern or southern part of the state. library(Lock5Data) data(FloridaLakes) #Location relative to rt. 50 FloridaLakes$Location &lt;- as.factor(c(&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;S&quot;,&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;)) print.data.frame(data.frame(FloridaLakes%&gt;% select(Lake, Location, AvgMercury)), row.names = FALSE) ## Lake Location AvgMercury ## Alligator S 1.23 ## Annie S 1.33 ## Apopka N 0.04 ## Blue Cypress S 0.44 ## Brick S 1.20 ## Bryant N 0.27 ## Cherry N 0.48 ## Crescent N 0.19 ## Deer Point N 0.83 ## Dias N 0.81 ## Dorr N 0.71 ## Down S 0.50 ## Eaton N 0.49 ## East Tohopekaliga S 1.16 ## Farm-13 N 0.05 ## George N 0.15 ## Griffin N 0.19 ## Harney N 0.77 ## Hart S 1.08 ## Hatchineha S 0.98 ## Iamonia N 0.63 ## Istokpoga S 0.56 ## Jackson N 0.41 ## Josephine S 0.73 ## Kingsley N 0.34 ## Kissimmee S 0.59 ## Lochloosa N 0.34 ## Louisa S 0.84 ## Miccasukee N 0.50 ## Minneola N 0.34 ## Monroe N 0.28 ## Newmans N 0.34 ## Ocean Pond N 0.87 ## Ocheese Pond N 0.56 ## Okeechobee S 0.17 ## Orange N 0.18 ## Panasoffkee N 0.19 ## Parker S 0.04 ## Placid S 0.49 ## Puzzle N 1.10 ## Rodman N 0.16 ## Rousseau N 0.10 ## Sampson N 0.48 ## Shipp S 0.21 ## Talquin N 0.86 ## Tarpon S 0.52 ## Tohopekaliga S 0.65 ## Trafford S 0.27 ## Trout S 0.94 ## Tsala Apopka N 0.40 ## Weir N 0.43 ## Wildcat N 0.25 ## Yale N 0.27 3.1.3 Comparing Northern and Southern Lakes We are interested in investigating whether average mercury levels are higher in either Northern Florida or Southern Florida than the other. LakesBP &lt;- ggplot(data=FloridaLakes, aes(x=Location, y=AvgMercury, fill=Location)) + geom_boxplot() + geom_jitter() + ggtitle(&quot;Mercury Levels in Florida Lakes&quot;) + xlab(&quot;Location&quot;) + ylab(&quot;Mercury Level&quot;) + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip() LakesBP LakesTable &lt;- FloridaLakes %&gt;% group_by(Location) %&gt;% summarize(MeanHg=mean(AvgMercury), StDevHg=sd(AvgMercury), N=n()) kable(LakesTable) Location MeanHg StDevHg N N 0.4245455 0.2696652 33 S 0.6965000 0.3838760 20 3.1.4 Model for Northern and Southern Lakes \\(\\widehat{\\text{Hg}} = b_0 +b_1\\text{I}_{\\text{South}}\\) \\(b_0\\) represents the mean mercury level for lakes in North Florida, and \\(b_1\\) represents the mean difference in mercury level for lakes in South Florida, compared to North Florida 3.1.5 Model for Lakes R Output Lakes_M &lt;- lm(data=FloridaLakes, AvgMercury ~ Location) summary(Lakes_M) ## ## Call: ## lm(formula = AvgMercury ~ Location, data = FloridaLakes) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.65650 -0.23455 -0.08455 0.24350 0.67545 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.42455 0.05519 7.692 0.000000000441 *** ## LocationS 0.27195 0.08985 3.027 0.00387 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3171 on 51 degrees of freedom ## Multiple R-squared: 0.1523, Adjusted R-squared: 0.1357 ## F-statistic: 9.162 on 1 and 51 DF, p-value: 0.003868 3.1.6 Interpreting Lakes Regression Output \\(\\widehat{\\text{Hg}} = 0.4245455 +0.2719545\\text{I}_{\\text{South}}\\) \\(b_1 = 0.27915= 0.6965 - 0.4245\\) is equal to the difference in mean mercury levels between Northern and Southern lakes. (We’ve already seen that for categorical variables, the least-squares estimate is the mean, so this makes sense.) We can use \\(b_1\\) to assess the size of the difference in mean mercury concentration levels. Since the lakes we observed are only a sample of all lakes, we cannot assume the difference in mercury concentrations is exactly 0.4245 for all Northern vs Southern Florida lakes. 3.1.7 Evidence of Difference? Do these results provide evidence that among all Florida lakes, the mean mercury level is higher in the South than in the North? Possible Explanations: 1. There really is a difference in average mercury level between lakes in Northern and Southern Florida. 2. There really is no difference in average mercury levels between lakes in Northern and Southern Florida, and we just happened, by chance, to select more lakes with higher mercury concentrations in Southern Florida. Question: Which of these explanations do you think is more reasonable? 3.1.8 Permutation Test Key Question: How likely is it that we would have observed a difference in means (i.e. a value of \\(b_1\\)) as extreme as 0.6965-0.4245 = 0.27195 ppm, merely by chance, if there is really no relationship between location and mercury level? We can answer the key question using a procedure known as a permutation test. In a permutation test, we randomly permute our data to simulate a situation where there is no relationship between our explanatory and response variable. We observe whether it is plausible to observe values of a statistic (in this case the difference in means) as extreme or more extreme than what we saw in the actual data. We’ll simulate situations where there is no relationship between location and mercury level, and see how often we observe a difference in means (\\(b_1\\)) as extreme as 0.27195. Procedure: Randomly shuffle the locations of the lakes, so that any relationship between location and mercury level is due only to chance. Calculate the difference in mean mercury levels (i.e. value of \\(b_1\\)) in “Northern” and “Southern” lakes, using the shuffled data. Repeat steps 1 and 2 many (say 10,000) times, recording the difference in means (i.e. value of \\(b_1\\)) each time. Analyze the distribution of mean differences, simulated under the assumption that there is no relationship between location and mercury level. Look whether the actual difference we observed is consistent with the simulation results. 3.1.9 Applet for Permutation Tests An Art of Stat Web App performs the steps listed above. Follow these steps to perform the simulation. 1. Open the app. 2. Under “Enter Data”, Choose “Provide Own”. 3. For “Response Variable”, type in “Mercury Concentration.” 4. For “Group 1 Label”, enter “North”, and for “Group 2 Label”, enter “South”. 5. Copy/paste the following values into the “Group 1 Data” box. These are the mercury concentrations in the lakes in North Florida. NLakesHg &lt;- as.data.frame(FloridaLakes %&gt;% filter(Location==&quot;N&quot;))$AvgMercury kable(NLakesHg, fill = getOption(&quot;width&quot;)) x 0.04 0.27 0.48 0.19 0.83 0.81 0.71 0.49 0.05 0.15 0.19 0.77 0.63 0.41 0.34 0.34 0.50 0.34 0.28 0.34 0.87 0.56 0.18 0.19 1.10 0.16 0.10 0.48 0.86 0.40 0.43 0.25 0.27 Copy/paste the following values into the “Group 2 Data” box. These are the mercury concentrations in the lakes in North Florida. NLakesHg &lt;- as.data.frame(FloridaLakes %&gt;% filter(Location==&quot;S&quot;))$AvgMercury kable(NLakesHg, fill = getOption(&quot;width&quot;)) x 1.23 1.33 0.44 1.20 0.50 1.16 1.08 0.98 0.56 0.73 0.59 0.84 0.17 0.04 0.49 0.21 0.52 0.65 0.27 0.94 For the question: “Select how many permutations you want to generate:” Choose 1. Click “Generate” The app will randomly assign the lakes to groups, with sizes matching the original data, and calculate the mean for each group. Observe means in the “Permuted Sample” and the difference in means. Is the difference as extreme as we observed in the actual data? STOP HERE UNTIL FURTHER INSTRUCTED. Now generate 5 more permutations. Did you get any differences in means as extreme as we observed in the original data? What does this tell us about the likelihood of observing a difference in means as extreme as 0.27 by chance? STOP HERE UNTIL FURTHER INSTRUCTED. Now generate 10,000 permutations. How often do you get a difference as extreme as we observed in the original data? What does this tell us about the likelihood of observing a difference in means as extreme as 0.27 by chance? 3.1.10 Five Permutations in R We’ll use R to perform permutation tests in the same manner as is done in the Art of Stat App. First Permutation Recall these groups were randomly assigned, so the only differences in averages are due to random chance. ShuffledLakes &lt;- FloridaLakes ## create copy of dataset ShuffledLakes$Location &lt;- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] Shuffle1df &lt;- data.frame(FloridaLakes$Lake, FloridaLakes$Location, FloridaLakes$AvgMercury, ShuffledLakes$Location) names(Shuffle1df) &lt;- c(&quot;Lake&quot;, &quot;Location&quot;, &quot;AvgMercury&quot;, &quot;Shuffled Location&quot;) kable(head(Shuffle1df)) Lake Location AvgMercury Shuffled Location Alligator S 1.23 N Annie S 1.33 S Apopka N 0.04 S Blue Cypress S 0.44 N Brick S 1.20 N Bryant N 0.27 N LakesPerm &lt;- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, y=AvgMercury, fill=`Shuffled Location`)) + geom_boxplot() + geom_jitter() + ggtitle(&quot;Mercury Levels in Florida Lakes&quot;) + xlab(&quot;Location&quot;) + ylab(&quot;Mercury Level&quot;) + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip() LakesPerm LakesPermTable &lt;- Shuffle1df %&gt;% group_by(`Shuffled Location`) %&gt;% summarize(MeanHg=mean(AvgMercury), StDevHg=sd(AvgMercury), N=n()) kable(LakesPermTable) Shuffled Location MeanHg StDevHg N N 0.5460606 0.3552986 33 S 0.4960000 0.3225784 20 Second Permutation ShuffledLakes &lt;- FloridaLakes ## create copy of dataset ShuffledLakes$Location &lt;- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] kable(head(Shuffle1df)) Lake Location AvgMercury Shuffled Location Alligator S 1.23 N Annie S 1.33 S Apopka N 0.04 S Blue Cypress S 0.44 N Brick S 1.20 N Bryant N 0.27 N Shuffle1df &lt;- data.frame(FloridaLakes$Lake, FloridaLakes$Location, FloridaLakes$AvgMercury, ShuffledLakes$Location) names(Shuffle1df) &lt;- c(&quot;Lake&quot;, &quot;Location&quot;, &quot;AvgMercury&quot;, &quot;Shuffled Location&quot;) LakesPerm &lt;- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, y=AvgMercury, fill=`Shuffled Location`)) + geom_boxplot() + geom_jitter() + ggtitle(&quot;Mercury Levels in Florida Lakes&quot;) + xlab(&quot;Location&quot;) + ylab(&quot;Mercury Level&quot;) + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip() LakesPerm LakesPermTable &lt;- Shuffle1df %&gt;% group_by(`Shuffled Location`) %&gt;% summarize(MeanHg=mean(AvgMercury), StDevHg=sd(AvgMercury), N=n()) kable(LakesPermTable) Shuffled Location MeanHg StDevHg N N 0.4839394 0.3316431 33 S 0.5985000 0.3527975 20 Third Permutation ShuffledLakes &lt;- FloridaLakes ## create copy of dataset ShuffledLakes$Location &lt;- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] kable(head(Shuffle1df)) Lake Location AvgMercury Shuffled Location Alligator S 1.23 S Annie S 1.33 S Apopka N 0.04 N Blue Cypress S 0.44 S Brick S 1.20 N Bryant N 0.27 S Shuffle1df &lt;- data.frame(FloridaLakes$Lake, FloridaLakes$Location, FloridaLakes$AvgMercury, ShuffledLakes$Location) names(Shuffle1df) &lt;- c(&quot;Lake&quot;, &quot;Location&quot;, &quot;AvgMercury&quot;, &quot;Shuffled Location&quot;) LakesPerm &lt;- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, y=AvgMercury, fill=`Shuffled Location`)) + geom_boxplot() + geom_jitter() + ggtitle(&quot;Mercury Levels in Florida Lakes&quot;) + xlab(&quot;Location&quot;) + ylab(&quot;Mercury Level&quot;) + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip() LakesPerm LakesPermTable &lt;- Shuffle1df %&gt;% group_by(`Shuffled Location`) %&gt;% summarize(MeanHg=mean(AvgMercury), StDevHg=sd(AvgMercury), N=n()) kable(LakesPermTable) Shuffled Location MeanHg StDevHg N N 0.5324242 0.3863777 33 S 0.5185000 0.2583607 20 Fourth Permutation ShuffledLakes &lt;- FloridaLakes ## create copy of dataset ShuffledLakes$Location &lt;- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] kable(head(Shuffle1df)) Lake Location AvgMercury Shuffled Location Alligator S 1.23 N Annie S 1.33 N Apopka N 0.04 N Blue Cypress S 0.44 S Brick S 1.20 N Bryant N 0.27 S Shuffle1df &lt;- data.frame(FloridaLakes$Lake, FloridaLakes$Location, FloridaLakes$AvgMercury, ShuffledLakes$Location) names(Shuffle1df) &lt;- c(&quot;Lake&quot;, &quot;Location&quot;, &quot;AvgMercury&quot;, &quot;Shuffled Location&quot;) LakesPerm &lt;- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, y=AvgMercury, fill=`Shuffled Location`)) + geom_boxplot() + geom_jitter() + ggtitle(&quot;Mercury Levels in Florida Lakes&quot;) + xlab(&quot;Location&quot;) + ylab(&quot;Mercury Level&quot;) + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip() LakesPerm LakesPermTable &lt;- Shuffle1df %&gt;% group_by(`Shuffled Location`) %&gt;% summarize(MeanHg=mean(AvgMercury), StDevHg=sd(AvgMercury), N=n()) kable(LakesPermTable) Shuffled Location MeanHg StDevHg N N 0.4833333 0.3314803 33 S 0.5995000 0.3527109 20 Fifth Permutation ShuffledLakes &lt;- FloridaLakes ## create copy of dataset ShuffledLakes$Location &lt;- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] kable(head(Shuffle1df)) Lake Location AvgMercury Shuffled Location Alligator S 1.23 N Annie S 1.33 S Apopka N 0.04 N Blue Cypress S 0.44 N Brick S 1.20 N Bryant N 0.27 S Shuffle1df &lt;- data.frame(FloridaLakes$Lake, FloridaLakes$Location, FloridaLakes$AvgMercury, ShuffledLakes$Location) names(Shuffle1df) &lt;- c(&quot;Lake&quot;, &quot;Location&quot;, &quot;AvgMercury&quot;, &quot;Shuffled Location&quot;) LakesPerm &lt;- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, y=AvgMercury, fill=`Shuffled Location`)) + geom_boxplot() + geom_jitter() + ggtitle(&quot;Mercury Levels in Florida Lakes&quot;) + xlab(&quot;Location&quot;) + ylab(&quot;Mercury Level&quot;) + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip() LakesPerm LakesPermTable &lt;- Shuffle1df %&gt;% group_by(`Shuffled Location`) %&gt;% summarize(MeanHg=mean(AvgMercury), StDevHg=sd(AvgMercury), N=n()) kable(LakesPermTable) Shuffled Location MeanHg StDevHg N N 0.5642424 0.3259508 33 S 0.4660000 0.3647551 20 3.1.11 R Code for Permutation Test We’ll write a for loop to perform 10,000 permutations and record the value of \\(b_1\\) (the difference in sample means) for each simulation. b1 &lt;- Lakes_M$coef[2] ## record value of b1 from actual data ## perform simulation b1Sim &lt;- rep(NA, 10000) ## vector to hold results ShuffledLakes &lt;- FloridaLakes ## create copy of dataset for (i in 1:10000){ #randomly shuffle locations ShuffledLakes$Location &lt;- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] ShuffledLakes_M&lt;- lm(data=ShuffledLakes, AvgMercury ~ Location) #fit model to shuffled data b1Sim[i] &lt;- ShuffledLakes_M$coef[2] ## record b1 from shuffled model } NSLakes_SimulationResults &lt;- data.frame(b1Sim) #save results in dataframe 3.1.12 Permutation Tests Results NSLakes_SimulationResultsPlot &lt;- ggplot(data=NSLakes_SimulationResults, aes(x=b1Sim)) + geom_histogram(fill=&quot;lightblue&quot;, color=&quot;white&quot;) + geom_vline(xintercept=c(b1, -1*b1), color=&quot;red&quot;) + xlab(&quot;Lakes: Simulated Value of b1&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Distribution of b1 under assumption of no relationship&quot;) NSLakes_SimulationResultsPlot It appears unlikely that we would observe a difference in sample mean (\\(b_1\\)) as extreme as 0.27195 ppm by chance, if there is really no relationship between location and mercury level. 3.1.13 Conclusions Number of simulations (out of 10,000) resulting in difference in means more extreme than 0.27195. sum(abs(b1Sim) &gt; abs(b1)) ## [1] 39 Proportion of simulations resulting in difference in means more extreme than 0.27195. mean(abs(b1Sim) &gt; abs(b1)) ## [1] 0.0039 The probability of observing a difference in means as extreme as 0.27195 by chance, when there is no relationship between location and mercury level is very low. There is strong evidence of a relationship between location and mercury level. In this case, there is strong evidence that mercury level is higher in Southern Lakes than northern Lakes. 3.1.14 Hypothesis Testing Terminology We can think of the simulation as a test of the following hypotheses: Hypothesis 1: Among all Florida lakes, average mercury level is the same for lakes in Northern Florida, as in Southern Florida. (Thus the difference of 0.27 we observed in our data occurred just by chance). Hypothesis 2: Among all Florida lakes, there is a difference in average mercury level between lakes in Northern Florida and Southern Florida. The “no difference,” or “chance alone” hypothesis is called the null hypothesis. The other hypothesis is called the alternative hypothesis. We used \\(b_1\\) to measure difference in average mercury levels between the locations in our observed data. We found that the probability of observing a difference in means as extreme as 0.27 when Hypothesis 1 is true is very low (approximately 0.0023) The statistic used to measure the difference or relationship we are interested in is called a test statistic. In this case, the test statistic is the difference in sample means (\\(b_1\\)) The p-value is the probability of observing a test statistic as extreme or more extreme than we did due to chance, when the null hypothesis is true. - A low p-value provides evidence against the null hypothesis. - A high p-value means that the data could have plausibly been obtained when the null hypothesis is true, and thus the null hypothesis cannot be ruled out. - A high p-value does not mean that the null hypothesis is true or probably true. A p-value can only tell us the strength of evidence against the null hypothesis, and should never be interpreted as support for the null hypothesis. 3.1.15 How Low Should the p-value Be knitr::include_graphics(&quot;pvals.png&quot;) 3.1.16 Practical Importance A low p-value tells us that the difference in average Mercury levels that we saw in our sample is unlikely to have occurred by chance, providing evidence that there is indeed a difference in average Mercury levels between Northern and Southern lakes. The p-value does not tell us anything about the size of the difference! If the difference is really small (say 0.001 ppm), perhaps there is no need to worry about it. It’s possible to get a small p-value even when the true difference is very small (especially when our sample size is large). In addition to a p-value, we should consider whether a difference is big enough to be meaningful in a practical way, before making any policy decisions. For now, we can use the difference in sample means of 0.27 ppm as an estimate of the size of the difference. Based on our limited knowledge of mercury levels, this does seem big enough to merit further investigation, and possible action. 3.2 Test for Difference in Standard Deviation 3.2.1 Standard Deviation Northern and Southern Lakes Recall that in our sample, the standard deviation was higher for the lakes in Southern Florida than Northern Florida. Note: for a sample of \\(n\\) observations, \\(y_1, \\ldots, y_n\\), standard deviation is a measure of spread, is calculated using the formula: \\[ SD=\\sqrt{\\frac{1}{n-1}\\sum_{i=1}^n(y_i-\\bar{y})^2} \\] LakesBP &lt;- ggplot(data=FloridaLakes, aes(x=Location, y=AvgMercury, fill=Location)) + geom_boxplot() + geom_jitter() + ggtitle(&quot;Mercury Levels in Florida Lakes&quot;) + xlab(&quot;Location&quot;) + ylab(&quot;Mercury Level&quot;) + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip() LakesBP LakesTable &lt;- FloridaLakes %&gt;% group_by(Location) %&gt;% summarize(MeanHg=mean(AvgMercury), StDevHg=sd(AvgMercury), N=n()) kable(LakesTable) Location MeanHg StDevHg N N 0.4245455 0.2696652 33 S 0.6965000 0.3838760 20 Does this provide evidence that there is really more variability in mercury levels for lakes in Southern Florida than in Northern Florida, or could we have just by chance picked lakes with more variability in South Florida? 3.2.2 Hypotheses Null Hypothesis: Standard deviation in mercury levels among all lakes in Northern Florida is the same as the standard deviation in mercury levels among all lakes in Southern Florida. Alternative Hypothesis: Standard deviation in mercury levels among all lakes in Northern Florida is different than the standard deviation in mercury levels among all lakes in Southern Florida. 3.2.3 Permutation Test Steps Procedure: Randomly shuffle the locations of the lakes, so that any relationship between location and mercury level is due only to chance. Calculate the difference in standard deviation in mercury levels (i.e. value of \\(b_1\\)) in “Northern” and “Southern” lakes, using the shuffled data. Repeat steps 1 and 2 many (say 10,000) times, recording the difference in standard deviations each time. Analyze the distribution of differences in standard deviation, simulated under the assumption that there is no relationship between location and mercury level. Look whether the actual difference we observed is consistent with the simulation results. Question: Looking back at the 5 simulations performed in the previous section, does it seem plausible that we could have observed a difference in standard deviations as extreme as \\(0.3839-0.2697 = 0.1142\\) by chance? 3.2.4 R Code for Permutation Test SDTab &lt;- FloridaLakes %&gt;% group_by(Location) %&gt;% summarize(SD=sd(AvgMercury)) DiffSD &lt;- SDTab$SD[2] - SDTab$SD[1] ## perform simulation DiffSim &lt;- rep(NA, 10000) ## vector to hold results ShuffledLakes &lt;- FloridaLakes ## create copy of dataset for (i in 1:10000){ #randomly shuffle locations ShuffledLakes$Location &lt;- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] SDTabSim &lt;- ShuffledLakes %&gt;% group_by(Location) %&gt;% summarize(SD=sd(AvgMercury)) DiffSim[i] &lt;- SDTabSim$SD[2] - SDTabSim$SD[1] #record difference in SD for simulated data } NSLakes_SDSimResults &lt;- data.frame(DiffSim) #save results in dataframe 3.2.5 Permutation Tests Results NSLakes_SDSimResultsPlot &lt;- ggplot(data=NSLakes_SDSimResults, aes(x=DiffSim)) + geom_histogram(fill=&quot;lightblue&quot;, color=&quot;white&quot;) + geom_vline(xintercept=c(DiffSD, -1*DiffSD), color=&quot;red&quot;) + xlab(&quot;Lakes: Difference in SD&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Distribution of Difference in SD under assumption of no relationship&quot;) NSLakes_SDSimResultsPlot Number of simulations (out of 10,000) resulting in standard deviations greater the 0.1142. sum(abs(DiffSim) &gt; abs(DiffSD)) ## [1] 601 Proportion of simulations (out of 10,000) resulting in standard deviations greater the 0.1142. mean(abs(DiffSim) &gt; abs(DiffSD)) ## [1] 0.0601 This p-value represents the probability of observing a difference in sample standard deviations as extreme as 0.1142 in a samples of size 33 and 20 by chance, if in fact, the standard deviation in mercury concentration levels is the same for lakes in Northern Florida as in Southern Florida. 3.2.6 Conclusions It is unlikely that we would observe a difference in standard deviations as extreme as 0.1142 by chance. There is evidence that lakes in Southern Florida exhibit more variability in mercury levels than lakes in Northern Florida (though the evidence is not as strong as it was when we were testing for a difference in means). Again, a p-value does not tell us whether a difference is practically meaningful. Without knowing a lot about mercury levels, and their impact on the ecosystem, it’s harder to tell wheter an estimated difference in standard deviations of 0.11 ppm is meaningful or not. It would be good to consult a biologist before making any decisions based on these results. 3.3 Test for Regression Slope 3.3.1 2015 Cars Dataset We consider data from the Kelly Blue Book, pertaining to new cars, released in 2015. We’ll investigate the relationship between price, length, and time it takes to accelerate from 0 to 60 mph. data(Cars2015) glimpse(Cars2015) ## Rows: 110 ## Columns: 20 ## $ Make &lt;fct&gt; Chevrolet, Hyundai, Kia, Mitsubishi, Nissan, Dodge, Chevrole… ## $ Model &lt;fct&gt; Spark, Accent, Rio, Mirage, Versa Note, Dart, Cruze LS, 500L… ## $ Type &lt;fct&gt; Hatchback, Hatchback, Sedan, Hatchback, Hatchback, Sedan, Se… ## $ LowPrice &lt;dbl&gt; 12.270, 14.745, 13.990, 12.995, 14.180, 16.495, 16.170, 19.3… ## $ HighPrice &lt;dbl&gt; 25.560, 17.495, 18.290, 15.395, 17.960, 23.795, 25.660, 24.6… ## $ Drive &lt;fct&gt; FWD, FWD, FWD, FWD, FWD, FWD, FWD, FWD, FWD, FWD, FWD, AWD, … ## $ CityMPG &lt;int&gt; 30, 28, 28, 37, 31, 23, 24, 24, 28, 30, 27, 27, 25, 27, 30, … ## $ HwyMPG &lt;int&gt; 39, 37, 36, 44, 40, 35, 36, 33, 38, 35, 33, 36, 36, 37, 39, … ## $ FuelCap &lt;dbl&gt; 9.0, 11.4, 11.3, 9.2, 10.9, 14.2, 15.6, 13.1, 12.4, 11.1, 11… ## $ Length &lt;int&gt; 145, 172, 172, 149, 164, 184, 181, 167, 179, 154, 156, 180, … ## $ Width &lt;int&gt; 63, 67, 68, 66, 67, 72, 71, 70, 72, 67, 68, 69, 70, 68, 69, … ## $ Wheelbase &lt;int&gt; 94, 101, 101, 97, 102, 106, 106, 103, 104, 99, 98, 104, 104,… ## $ Height &lt;int&gt; 61, 57, 57, 59, 61, 58, 58, 66, 58, 59, 58, 58, 57, 58, 59, … ## $ UTurn &lt;int&gt; 34, 37, 37, 32, 37, 38, 38, 37, 39, 34, 35, 38, 37, 36, 37, … ## $ Weight &lt;int&gt; 2345, 2550, 2575, 2085, 2470, 3260, 3140, 3330, 2990, 2385, … ## $ Acc030 &lt;dbl&gt; 4.4, 3.7, 3.5, 4.4, 4.0, 3.4, 3.7, 3.9, 3.4, 3.9, 3.9, 3.7, … ## $ Acc060 &lt;dbl&gt; 12.8, 10.3, 9.5, 12.1, 10.9, 9.3, 9.8, 9.5, 9.2, 10.8, 11.1,… ## $ QtrMile &lt;dbl&gt; 19.4, 17.8, 17.3, 19.0, 18.2, 17.2, 17.6, 17.4, 17.1, 18.3, … ## $ PageNum &lt;int&gt; 123, 148, 163, 188, 196, 128, 119, 131, 136, 216, 179, 205, … ## $ Size &lt;fct&gt; Small, Small, Small, Small, Small, Small, Small, Small, Smal… 3.3.2 Car Price and Acceleration Time LowPrice represents the price of a standard (non-luxury) model of a car. Acc060 represents time it takes to accelerate from 0 to 60 mph. data(Cars2015) CarsA060 &lt;- ggplot(data=Cars2015, aes(x=Acc060, y=LowPrice)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) CarsA060 3.3.3 Modeling Price using Acc060 \\(\\widehat{Price} = b_0 + b_1\\times\\text{Acc. Time}\\) Model assumes expected price is a linear function of acceleration time. Interpretations: \\(b_0\\) represents intercept of regression line, i.e. expected price of a car that can accelerate from 0 to 60 mph in no time. This is not a meaningful interpretation in context. \\(b_1\\) represents slope of regression line, i.e. expected change in price for each additional second it takes to accelerate from 0 to 60 mph. 3.3.4 Modeling for Car Price and Acceleration Cars_M_A060 &lt;- lm(data=Cars2015, LowPrice~Acc060) summary(Cars_M_A060) ## ## Call: ## lm(formula = LowPrice ~ Acc060, data = Cars2015) ## ## Residuals: ## Min 1Q Median 3Q Max ## -29.512 -6.544 -1.265 4.759 27.195 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 89.9036 5.0523 17.79 &lt;0.0000000000000002 *** ## Acc060 -7.1933 0.6234 -11.54 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 10.71 on 108 degrees of freedom ## Multiple R-squared: 0.5521, Adjusted R-squared: 0.548 ## F-statistic: 133.1 on 1 and 108 DF, p-value: &lt; 0.00000000000000022 3.3.5 Acc060 Model Interpretations \\(\\widehat{Price} = b_0 + b_1\\times\\text{Acc. Time}\\) \\(\\widehat{Price} = 89.90 - 7.193\\times\\text{Acc. Time}\\) Intercept \\(b_0\\) might be interpreted as the price of a car that can accelerate from 0 to 60 in no time, but this is not a meaningful interpretation since there are no such cars. \\(b_1=-7.1933\\) tells us that on average, the price of a car is expected to decrease by 7.19 thousand dollars for each additional second it takes to accelerate from 0 to 60 mph. \\(R^2 = 0.5521\\) tells us that 55% of the variation in price is explained by the linear model using acceleration time as the explanatory variable. 3.3.6 Is Car Price Associated with Acceleration Time? Is it possible that there is really no relationship between price and acceleration time, and we just happened to choose a sample that led to a slope of -7.1933, by chance? Is it possible that among all cars, the picture looks like the one below, and we just happened to draw a sample of 110 cars, showing a downward trend by chance? 3.3.7 Acc060 Key Question and Hypotheses If there is really no relationship between price and acceleration time, then we would expect a slope (i.e value of \\(b_1\\)) equal to 0. Key Question: How likely is it that we would have observed a slope (i.e. a value of \\(b_1\\)) as extreme as -7.1933 merely by chance, if there is really no relationship between price and acceleration time? Null Hypothesis: Among all 2015 cars, there is no relationship between price and acceleration time, and the slope we observed occurred merely by chance. Alternative Hypothesis: The slope we observed is due to more than chance, and there is a relationship between price and acceleration time among all 2015 cars. 3.3.8 Permutation Test for Slope Procedure: Randomly shuffle the acceleration times, so that any relationship between acceleration time and price is due only to chance. Fit a regression line to the shuffled data and record the slope of the regression line. Repeat steps 1 and 2 many (say 10,000) times, recording the slope (i.e. value of \\(b_1\\)) each time. Analyze the distribution of slopes, simulated under the assumption that there is no relationship between price and acceleration time. Look whether the actual slope we observed is consistent with the simulation results. 3.3.9 Five Permutations First Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Acc060 &lt;- ShuffledCars$Acc060[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Acc060, ShuffledCars$Acc060) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Acc060&quot;, &quot;ShuffledAcc060&quot;) kable(head(Shuffle1df)) Make Model LowPrice Acc060 ShuffledAcc060 Chevrolet Spark 12.270 12.8 6.8 Hyundai Accent 14.745 10.3 10.1 Kia Rio 13.990 9.5 9.4 Mitsubishi Mirage 12.995 12.1 9.7 Nissan Versa Note 14.180 10.9 8.1 Dodge Dart 16.495 9.3 7.2 ggplot(data=Shuffle1df, aes(x=ShuffledAcc060, y=LowPrice)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) Slope of regression line from permuted data: M_Cars_Shuffle &lt;- lm(data=ShuffledCars, LowPrice~Acc060) summary(M_Cars_Shuffle)$coef[2] ## [1] 0.5801725 Second Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Acc060 &lt;- ShuffledCars$Acc060[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Acc060, ShuffledCars$Acc060) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Acc060&quot;, &quot;ShuffledAcc060&quot;) kable(head(Shuffle1df)) Make Model LowPrice Acc060 ShuffledAcc060 Chevrolet Spark 12.270 12.8 6.9 Hyundai Accent 14.745 10.3 8.0 Kia Rio 13.990 9.5 10.5 Mitsubishi Mirage 12.995 12.1 7.2 Nissan Versa Note 14.180 10.9 8.4 Dodge Dart 16.495 9.3 11.0 ggplot(data=Shuffle1df, aes(x=ShuffledAcc060, y=LowPrice)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) Slope of regression line from permuted data: M_Cars_Shuffle &lt;- lm(data=ShuffledCars, LowPrice~Acc060) summary(M_Cars_Shuffle)$coef[2] ## [1] -0.9289392 Third Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Acc060 &lt;- ShuffledCars$Acc060[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Acc060, ShuffledCars$Acc060) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Acc060&quot;, &quot;ShuffledAcc060&quot;) kable(head(Shuffle1df)) Make Model LowPrice Acc060 ShuffledAcc060 Chevrolet Spark 12.270 12.8 6.8 Hyundai Accent 14.745 10.3 8.7 Kia Rio 13.990 9.5 6.7 Mitsubishi Mirage 12.995 12.1 8.8 Nissan Versa Note 14.180 10.9 7.2 Dodge Dart 16.495 9.3 5.5 ggplot(data=Shuffle1df, aes(x=ShuffledAcc060, y=LowPrice)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) Slope of regression line from permuted data: M_Cars_Shuffle &lt;- lm(data=ShuffledCars, LowPrice~Acc060) summary(M_Cars_Shuffle)$coef[2] ## [1] -1.428531 3.3.10 Fourth Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Acc060 &lt;- ShuffledCars$Acc060[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Acc060, ShuffledCars$Acc060) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Acc060&quot;, &quot;ShuffledAcc060&quot;) kable(head(Shuffle1df)) Make Model LowPrice Acc060 ShuffledAcc060 Chevrolet Spark 12.270 12.8 7.4 Hyundai Accent 14.745 10.3 7.0 Kia Rio 13.990 9.5 7.7 Mitsubishi Mirage 12.995 12.1 7.6 Nissan Versa Note 14.180 10.9 6.2 Dodge Dart 16.495 9.3 8.7 ggplot(data=Shuffle1df, aes(x=ShuffledAcc060, y=LowPrice)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) Slope of regression line from permuted data: M_Cars_Shuffle &lt;- lm(data=ShuffledCars, LowPrice~Acc060) summary(M_Cars_Shuffle)$coef[2] ## [1] 0.01197376 Fifth Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Acc060 &lt;- ShuffledCars$Acc060[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Acc060, ShuffledCars$Acc060) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Acc060&quot;, &quot;ShuffledAcc060&quot;) kable(head(Shuffle1df)) Make Model LowPrice Acc060 ShuffledAcc060 Chevrolet Spark 12.270 12.8 8.8 Hyundai Accent 14.745 10.3 7.0 Kia Rio 13.990 9.5 7.5 Mitsubishi Mirage 12.995 12.1 7.8 Nissan Versa Note 14.180 10.9 8.1 Dodge Dart 16.495 9.3 7.9 ggplot(data=Shuffle1df, aes(x=ShuffledAcc060, y=LowPrice)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) Slope of regression line from permuted data: M_Cars_Shuffle &lt;- lm(data=ShuffledCars, LowPrice~Acc060) summary(M_Cars_Shuffle)$coef[2] ## [1] -0.4476822 3.3.11 R Code for Permutation Test b1 &lt;- Cars_M_A060$coef[2] ## record value of b1 from actual data ## perform simulation b1Sim &lt;- rep(NA, 10000) ## vector to hold results ShuffledCars &lt;- Cars2015 ## create copy of dataset for (i in 1:10000){ #randomly shuffle acceleration times ShuffledCars$Acc060 &lt;- ShuffledCars$Acc060[sample(1:nrow(ShuffledCars))] ShuffledCars_M&lt;- lm(data=ShuffledCars, LowPrice ~ Acc060) #fit model to shuffled data b1Sim[i] &lt;- ShuffledCars_M$coef[2] ## record b1 from shuffled model } Cars_A060SimulationResults &lt;- data.frame(b1Sim) #save results in dataframe 3.3.12 Permutation Test Results b1 &lt;- Cars_M_A060$coef[2] ## record value of b1 from actual data Cars_A060SimulationResultsPlot &lt;- ggplot(data=Cars_A060SimulationResults, aes(x=b1Sim)) + geom_histogram(fill=&quot;lightblue&quot;, color=&quot;white&quot;) + geom_vline(xintercept=c(b1, -1*b1), color=&quot;red&quot;) + xlab(&quot;Simulated Value of b1&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Distribution of b1 under assumption of no relationship&quot;) Cars_A060SimulationResultsPlot It is extremely unlikely that we would observe a value of \\(b_1\\) as extreme as -7.1933 by chance, if there is really no relationship between price and acceleration time. 3.3.13 P-value and Conclusion Proportion of simulations resulting in simulation value of \\(b_2\\) more extreme than -7.1933. mean(abs(b1Sim) &gt; abs(b1)) ## [1] 0 The p-value represents the probability of observing a slope as extreme or more extreme than -7.1933 by chance when there is actually no relationship between price and acceleration time. The probability of observing a slope as extreme as -7.1933 by chance, when there is no relationship between location and mercury level practically zero. There is very strong evidence of a relationship between price and acceleration time. A low p-value tells us only that there is evidence of a relationship, not that it is practically meaningful. But an estimated difference of more than $7 thousand for each additional second seems pretty important and would likely influence a buyer’s decision. 3.4 Test for Comparing Multiple Groups 3.4.1 Relationship Price and Car Size Continuing with the sample of 110 cars, seen in the previous section, let’s compare prices of small, midsized, and large cars. ggplot(data=Cars2015, aes(x=Size, y=LowPrice, fill=Size)) + geom_boxplot() + geom_jitter() + coord_flip() Cars2015 %&gt;% group_by(Size) %&gt;% summarize(MeanPrice = mean(LowPrice), StDevPrice=sd(LowPrice), N=n()) ## # A tibble: 3 × 4 ## Size MeanPrice StDevPrice N ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Large 42.3 17.9 29 ## 2 Midsized 33.2 12.0 34 ## 3 Small 26.7 14.4 47 3.4.2 Cars Questions of Interest Do the data provide evidence of a relationship between price and size of vehicle? Is there evidence of a difference in average price between… large and midsized cars? large and small cars? small and midsized cars? 3.4.3 Cars Price and Size Model Cars_M_Size = lm(data=Cars2015, LowPrice~Size) summary(Cars_M_Size) ## ## Call: ## lm(formula = LowPrice ~ Size, data = Cars2015) ## ## Residuals: ## Min 1Q Median 3Q Max ## -20.516 -11.190 -4.005 9.064 57.648 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 42.311 2.737 15.460 &lt; 0.0000000000000002 *** ## SizeMidsized -9.098 3.725 -2.442 0.0162 * ## SizeSmall -15.659 3.480 -4.499 0.0000174 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 14.74 on 107 degrees of freedom ## Multiple R-squared: 0.1593, Adjusted R-squared: 0.1436 ## F-statistic: 10.14 on 2 and 107 DF, p-value: 0.00009271 3.4.4 Relationship between Size and Price Do the data provide evidence of a relationship between price and size of vehicle? \\(\\widehat{\\text{Price}} = b_0 +b_1\\times\\text{I}_{\\text{Midsized}}+ b_2\\times\\text{I}_{\\text{Large}}\\) \\(b_0\\) represents expected price of large cars. \\(b_1\\) represents expected difference in price between large and midsized cars. \\(b_2\\) represents expected difference in price between large and small cars. Unfortunately, none of these measure whether there is an overall relationship between price and size. Question:What statistic can we use to assess the size of differences between more than two groups? 3.4.5 Test Statistic for Car Size and Price Cars_A_Size &lt;- aov(data=Cars2015, LowPrice~Size) summary(Cars_A_Size) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Size 2 4405 2202.7 10.14 0.0000927 *** ## Residuals 107 23242 217.2 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 3.4.6 Key Question in Car Size Investigation Null Hypothesis: Average price, among all 2015 cars, is the same between small, midsized, and large cars. Alternative Hypothesis: Average price among all 2015 cars differs between at least two of these sizes. Key Question: How likely is it that we would have obtained an F-statistic as extreme as 10.14 by chance, if there is really no difference in price between small, medium, and large sized cars, among all 2015 cars? 3.4.7 Simulation-Based Test for F-Statistic We’ll simulate situations where there is no relationship between size and price, and see how often we observe an F-statistic as extreme as 10.14. Procedure: Randomly shuffle the sizes of the vehicles, so that any relationship between size and price is due only to chance. Fit a model, using the shuffled data, with price as the response variable, and size as the explanatory variable. Record the F-statistic. Repeat steps 1 and 2 many (say 10,000) times, recording the F-statistic each time. Analyze the distribution of F-statistics, simulated under the assumption that there is no relationship between size and price. Look whether the actual F-statistic we observed is consistent with the simulation results. 3.4.8 Five Permutations First Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Size &lt;- ShuffledCars$Size[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Size, ShuffledCars$Size) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Size&quot;, &quot;ShuffledSize&quot;) kable(head(Shuffle1df)) Make Model LowPrice Size ShuffledSize Chevrolet Spark 12.270 Small Small Hyundai Accent 14.745 Small Large Kia Rio 13.990 Small Large Mitsubishi Mirage 12.995 Small Midsized Nissan Versa Note 14.180 Small Midsized Dodge Dart 16.495 Small Small Recall this model was fit under an assumption of no relationship between price and size. ggplot(data=ShuffledCars, aes(x=Size, y=LowPrice, fill=Size)) + geom_boxplot() + geom_jitter() + coord_flip() + ggtitle(&quot;Shuffled Cars&quot;) Cars_A_Size_Shuffle &lt;- aov(data=ShuffledCars, LowPrice~Size) summary(Cars_A_Size_Shuffle) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Size 2 746 372.9 1.483 0.232 ## Residuals 107 26902 251.4 Second Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Size &lt;- ShuffledCars$Size[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Size, ShuffledCars$Size) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Size&quot;, &quot;ShuffledSize&quot;) kable(head(Shuffle1df)) Make Model LowPrice Size ShuffledSize Chevrolet Spark 12.270 Small Large Hyundai Accent 14.745 Small Small Kia Rio 13.990 Small Large Mitsubishi Mirage 12.995 Small Large Nissan Versa Note 14.180 Small Midsized Dodge Dart 16.495 Small Large ggplot(data=ShuffledCars, aes(x=Size, y=LowPrice, fill=Size)) + geom_boxplot() + geom_jitter() + coord_flip() + ggtitle(&quot;Shuffled Cars&quot;) Cars_A_Size_Shuffle &lt;- aov(data=ShuffledCars, LowPrice~Size) summary(Cars_A_Size_Shuffle) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Size 2 688 344.1 1.366 0.26 ## Residuals 107 26960 252.0 Third Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Size &lt;- ShuffledCars$Size[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Size, ShuffledCars$Size) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Size&quot;, &quot;ShuffledSize&quot;) kable(head(Shuffle1df)) Make Model LowPrice Size ShuffledSize Chevrolet Spark 12.270 Small Small Hyundai Accent 14.745 Small Large Kia Rio 13.990 Small Small Mitsubishi Mirage 12.995 Small Small Nissan Versa Note 14.180 Small Midsized Dodge Dart 16.495 Small Midsized ggplot(data=ShuffledCars, aes(x=Size, y=LowPrice, fill=Size)) + geom_boxplot() + geom_jitter() + coord_flip() + ggtitle(&quot;Shuffled Cars&quot;) Cars_A_Size_Shuffle &lt;- aov(data=ShuffledCars, LowPrice~Size) summary(Cars_A_Size_Shuffle) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Size 2 42 21.01 0.081 0.922 ## Residuals 107 27606 258.00 Fourth Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Size &lt;- ShuffledCars$Size[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Size, ShuffledCars$Size) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Size&quot;, &quot;ShuffledSize&quot;) kable(head(Shuffle1df)) Make Model LowPrice Size ShuffledSize Chevrolet Spark 12.270 Small Small Hyundai Accent 14.745 Small Small Kia Rio 13.990 Small Midsized Mitsubishi Mirage 12.995 Small Small Nissan Versa Note 14.180 Small Small Dodge Dart 16.495 Small Midsized Recall this model was fit under an assumption of no relationship between price and size. ggplot(data=ShuffledCars, aes(x=Size, y=LowPrice, fill=Size)) + geom_boxplot() + geom_jitter() + coord_flip() + ggtitle(&quot;Shuffled Cars&quot;) Cars_A_Size_Shuffle &lt;- aov(data=ShuffledCars, LowPrice~Size) summary(Cars_A_Size_Shuffle) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Size 2 885 442.6 1.77 0.175 ## Residuals 107 26763 250.1 Fifth Permutation ShuffledCars &lt;- Cars2015 ## create copy of dataset ShuffledCars$Size &lt;- ShuffledCars$Size[sample(1:nrow(ShuffledCars))] Shuffle1df &lt;- data.frame(Cars2015$Make, Cars2015$Model, Cars2015$LowPrice, Cars2015$Size, ShuffledCars$Size) names(Shuffle1df) &lt;- c(&quot;Make&quot;, &quot;Model&quot;, &quot;LowPrice&quot;, &quot;Size&quot;, &quot;ShuffledSize&quot;) kable(head(Shuffle1df)) Make Model LowPrice Size ShuffledSize Chevrolet Spark 12.270 Small Midsized Hyundai Accent 14.745 Small Small Kia Rio 13.990 Small Small Mitsubishi Mirage 12.995 Small Midsized Nissan Versa Note 14.180 Small Midsized Dodge Dart 16.495 Small Large ggplot(data=ShuffledCars, aes(x=Size, y=LowPrice, fill=Size)) + geom_boxplot() + geom_jitter() + coord_flip() + ggtitle(&quot;Shuffled Cars&quot;) Cars_A_Size_Shuffle &lt;- aov(data=ShuffledCars, LowPrice~Size) summary(Cars_A_Size_Shuffle) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Size 2 745 372.3 1.481 0.232 ## Residuals 107 26903 251.4 3.4.9 R Code For Permutation Test We’ll simulate 10,000 permutations and record the F-statistic for each set of permuted data. Fstat &lt;- summary(Cars_M_Size)$fstatistic[1] ## record value of F-statistic from actual data ## perform simulation FSim &lt;- rep(NA, 10000) ## vector to hold results ShuffledCars &lt;- Cars2015 ## create copy of dataset for (i in 1:10000){ #randomly shuffle acceleration times ShuffledCars$Size &lt;- ShuffledCars$Size[sample(1:nrow(ShuffledCars))] ShuffledCars_M&lt;- lm(data=ShuffledCars, LowPrice ~ Size) #fit model to shuffled data FSim[i] &lt;- summary(ShuffledCars_M)$fstatistic[1] ## record F from shuffled model } CarSize_SimulationResults &lt;- data.frame(FSim) #save results in dataframe 3.4.10 F-statistic for Size Simulation Results CarSize_SimulationResults_Plot &lt;- ggplot(data=CarSize_SimulationResults, aes(x=FSim)) + geom_histogram(fill=&quot;lightblue&quot;, color=&quot;white&quot;) + geom_vline(xintercept=c(Fstat), color=&quot;red&quot;) + xlab(&quot;Simulated Value of F&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Distribution of F under assumption of no relationship&quot;) CarSize_SimulationResults_Plot p-value: mean(FSim &gt; Fstat) ## [1] 0 The p-value represents the probability of observing an F-statistic as extreme as 10.14 by chance, in samples of size 29, 34, and 47, if in fact there is no relationship between price and size of car. The data provide strong evidence of a relationship between price and size. 3.4.11 Differences Between Different Sizes Now that we have evidence that car price is related to size, we might want to know which sizes differ from each other. Is there evidence of a difference in average price between… a) large and midsized cars? b) large and small cars? c) small and midsized cars? 3.4.12 Regression Coefficients for Tests Between Sizes \\(\\widehat{\\text{Price}} = b_0 +b_1\\times\\text{I}_{\\text{Midsized}}+ b_2\\times\\text{I}_{\\text{Small}}\\) \\(b_0\\) represents expected price of large cars. \\(b_1\\) represents expected difference in price between large and midsized cars. \\(b_2\\) represents expected difference in price between large and small cars. Thus, we can answer each question by looking at the appropriate regression coefficient. a) large and midsized cars? (\\(b_1\\)) b) large and small cars? (\\(b_2\\)) c) small and midsized cars? (\\(b_1-b_2\\)) 3.4.13 Simulation for Differences between Types of Cars We’ll simulate situations where there is no relationship between size and price, and see how often we observe results for \\(b_1\\), \\(b_2\\), and \\(b_1-b_2\\) as extreme as we did in the actual data. Procedure: Randomly shuffle the sizes of the vehicles, so that any relationship between size and price is due only to chance. Fit a model, using the shuffled data, with price as the response variable, and size as the explanatory variable. Record the values of \\(b_1\\), \\(b_2\\), and \\(b_1-b_2\\). Repeat steps 1 and 2 many (say 10,000) times, recording the values of \\(b_1\\), \\(b_2\\), and \\(b_1-b_2\\) each time. Analyze the distribution of \\(b_1\\), \\(b_2\\), \\(b_1-b_2\\), simulated under the assumption that there is no relationship between size and price. Look whether the actual values we observed are consistent with the simulation results. 3.4.14 Code for Simulation-Based Test of Prices by Size b1 &lt;- Cars_M_Size$coefficients[2] #record b1 from actual data b2 &lt;- Cars_M_Size$coefficients[3] #record b2 from actual data ## perform simulation b1Sim &lt;- rep(NA, 10000) ## vector to hold results b2Sim &lt;- rep(NA, 10000) ## vector to hold results ShuffledCars &lt;- Cars2015 ## create copy of dataset for (i in 1:10000){ #randomly shuffle acceleration times ShuffledCars$Size &lt;- ShuffledCars$Size[sample(1:nrow(ShuffledCars))] ShuffledCars_M&lt;- lm(data=ShuffledCars, LowPrice ~ Size) #fit model to shuffled data b1Sim[i] &lt;- ShuffledCars_M$coefficients[2] ## record b1 from shuffled model b2Sim[i] &lt;- ShuffledCars_M$coefficients[3] ## record b2 from shuffled model } Cars_Size2_SimulationResults &lt;- data.frame(b1Sim, b2Sim) #save results in dataframe 3.4.15 Car Size Simulation-Based Results for \\(b_1\\) Cars_Size2_SimulationResultsPlot_b1 &lt;- ggplot(data=Cars_Size2_SimulationResults, aes(x=b1Sim)) + geom_histogram(fill=&quot;lightblue&quot;, color=&quot;white&quot;) + geom_vline(xintercept=c(b1, -1*b1), color=&quot;red&quot;) + xlab(&quot;Simulated Value of b1&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Large vs Midsize Cars: Distribution of b1 under assumption of no relationship&quot;) Cars_Size2_SimulationResultsPlot_b1 p-value: mean(abs(b1Sim)&gt;abs(b1)) ## [1] 0.0243 The p-value represents the probability of observing a difference in mean prices as extreme as 9.1 by chance, in samples of size 29 and 34 cars, if in fact there is no difference in average prices of large and midsized cars. 3.4.16 Car Size Simulation-Based Results for \\(b_2\\) Cars_Size2_SimulationResultsPlot_b2 &lt;- ggplot(data=Cars_Size2_SimulationResults, aes(x=b2Sim)) + geom_histogram(fill=&quot;lightblue&quot;, color=&quot;white&quot;) + geom_vline(xintercept=c(b2, -1*b2), color=&quot;red&quot;) + xlab(&quot;Simulated Value of b2&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Large vs Small Cars: Distribution of b2 under assumption of no relationship&quot;) Cars_Size2_SimulationResultsPlot_b2 p-value: mean(abs(b2Sim)&gt;abs(b2)) ## [1] 0 The p-value represents the probability of observing a difference in mean prices as extreme as 15.4 by chance, in samples of size 29 and 47 cars, if in fact there is no difference in average prices of large and small cars. 3.4.17 Car Size Simulation-Based Results for \\(b_1-b_2\\) Cars_Size2_SimulationResultsPlot_b1_b2 &lt;- ggplot(data=Cars_Size2_SimulationResults, aes(x=b1Sim-b2Sim)) + geom_histogram(fill=&quot;lightblue&quot;, color=&quot;white&quot;) + geom_vline(xintercept=c(b1-b2, -1*(b1-b2)), color=&quot;red&quot;) + xlab(&quot;Simulated Value of b1-b2&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Small vs Midsize Cars: Distribution of b1-b2 under assumption of no relationship&quot;) Cars_Size2_SimulationResultsPlot_b1_b2 p-value: mean(abs(b1Sim-b2Sim)&gt;abs(b1-b2)) ## [1] 0.0666 The p-value represents the probability of observing a difference in mean prices as extreme as 6.5 by chance, in samples of size 34 and 47 cars, if in fact there is no difference in average prices of midsized and small cars. 3.4.18 Bonferroni Correction We might normally conclude that there is evidence of differences in group means in the p-value is less than 0.05. However, since we are performing multiple tests simultaneously, there is an increased chance that at least one of them will yield a small p-value just by chance. Thus, we should be more strict in deciding what constitutes evidence against the null hypothesis. A commone rule (known as the Bonferroni correction) is to divide the values usually used as criteria for evidence by the number of tests. In this example: - Here, we would say there is some evidence of differences between groups if the p-value is less than 0.10/3=0.0333. - We would say there is strong evidence of differences if the p-value is less than 0.05/3=0.0167 Comparison Coefficient p-value Evidence of Difference large vs midsize \\(b_1\\) 0.0243 Some evidence large vs small \\(b_2\\) 0 Strong evidence small vs midsize \\(b_1-b_2\\) 0.0666 No evidence 3.4.19 Summary of Tests Between Multiple Groups When testing for differences between more than two groups: Perform an overall test, using the F-statistic. A large F-statistic and small p-value tell us there is evidence of differences between at least some of the groups. If the F-tests yields evidence evidence of differences, perform tests on individual model coefficients to determine which groups differ. Use a more strict cutoff criteria, such as the Bonferroni correction. 3.4.20 Bear Weights by Season ggplot(data=Bears_Subset, aes(y=Weight, x=Season, fill=Season)) + geom_boxplot() + geom_jitter() + coord_flip() 3.4.21 Bear Weights by Season Model Bears_M_Season &lt;- lm(data=Bears_Subset, Weight~Season) summary(Bears_M_Season) ## ## Call: ## lm(formula = Weight ~ Season, data = Bears_Subset) ## ## Residuals: ## Min 1Q Median 3Q Max ## -178.84 -79.84 -29.02 54.98 309.16 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 204.84 17.16 11.939 &lt;0.0000000000000002 *** ## SeasonSpring -37.27 34.62 -1.076 0.284 ## SeasonSummer -29.81 24.71 -1.206 0.231 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 112.5 on 94 degrees of freedom ## Multiple R-squared: 0.02034, Adjusted R-squared: -0.0005074 ## F-statistic: 0.9757 on 2 and 94 DF, p-value: 0.3807 3.4.22 F-Statistic for Bear Weights by Season Bears_A_Season &lt;- aov(data=Bears_Subset, Weight~Season) summary(Bears_A_Season) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Season 2 24699 12350 0.976 0.381 ## Residuals 94 1189818 12658 3.4.23 Hypotheses for Bears Seasons F-Test Null Hypothesis: Among all bears of this type, mean weight is the same in each season. Alternative Hypothesis: Among all bears of this type, mean weight differs between at least two of the seasons. Key Question: What is the probability of observing an F-statistic as extreme as 0.976 if there is really no relationship between weight and season? 3.4.24 Simulation-Based Test for Bears F-Statistic We’ll simulate situations where there is no relationship between size and price, and see how often we observe an F-statistic as extreme as 0.976. Procedure: Randomly shuffle the seasons, so that any relationship between weight and season is due only to chance. Fit a model, using the shuffled data, with weight as the response variable, and season as the explanatory variable. Record the F-statistic. Repeat steps 1 and 2 many (say 10,000) times, recording the F-statistic each time. Analyze the distribution of F-statistics, simulated under the assumption that there is no relationship between season and weight Look whether the actual F-statistic we observed is consistent with the simulation results. 3.4.25 Bears F-Statistic Simulation Fstat &lt;- summary(Bears_M_Season)$fstatistic[1] ## record value of F-statistic from actual data ## perform simulation FSim &lt;- rep(NA, 10000) ## vector to hold results ShuffledBears &lt;- Bears_Subset ## create copy of dataset for (i in 1:10000){ #randomly shuffle acceleration times ShuffledBears$Season &lt;- ShuffledBears$Season[sample(1:nrow(ShuffledBears))] ShuffledBears_M&lt;- lm(data=ShuffledBears, Weight ~ Season) #fit model to shuffled data FSim[i] &lt;- summary(ShuffledBears_M)$fstatistic[1] ## record F from shuffled model } Bears_Seasons_SimulationResults &lt;- data.frame(FSim) #save results in dataframe 3.4.26 F-statistic for Bears Season Simulation Bears_Seasons_SimulationResultsPlot &lt;- ggplot(data=Bears_Seasons_SimulationResults, aes(x=FSim)) + geom_histogram(fill=&quot;lightblue&quot;, color=&quot;white&quot;) + geom_vline(xintercept=c(Fstat), color=&quot;red&quot;) + xlab(&quot;Simulated Value of F&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Distribution of F under assumption of no relationship&quot;) Bears_Seasons_SimulationResultsPlot mean(FSim &gt; Fstat) ## [1] 0.3762 The p-value represents the probability of observing and F-statistic as extreme as 0.976 by chance, in a sample of 97, if in fact there is no difference in average weights of bears between seasons. It is not at all unusual to observe an F-statistic as extreme or more extreme than we did if there is really no relationship between weight and season. There is no evidence that average bear weights differ between seasons. 3.4.27 Don’t Accept Null Hypothesis In the previous example, we concluded that there is no evidence that average bear weights differ between seasons. This is different than saying that bear weights are the same in each season. Why would it be inappropriate to say this? 3.4.28 Comparison of Weights by Season Bears_Season_Table &lt;- Bears_Subset %&gt;% group_by(Season) %&gt;% summarize(MeanWeight = mean(Weight), StDevWeight = sd(Weight), N=n()) kable(Bears_Season_Table) Season MeanWeight StDevWeight N Fall 204.8372 125.71414 43 Spring 167.5714 108.74155 14 Summer 175.0250 97.70796 40 3.4.29 Don’t Accept Null Hypothesis (Cont.) The data do show differences in average weight between seasons. It’s just that we can’t rule out the possibility that these differences are due to chance alone. A hypothesis test can only tell us the strength of evidence against the null hypothesis. The absence of evidence against the null hypothesis should not be interpreted as evidence for the null hypothesis. We should never say that the data support/prove/confirm the null hypothesis. We can only say that the data do not provide evidence against the null hypothesis. "],["bootstrap-confindence-intervals.html", "Chapter 4 Bootstrap Confindence Intervals 4.1 Quantifying Sampling Variability 4.2 Bootstrapping Other Statistics 4.3 Difference in Sample Means 4.4 Bootstrapping Regression Coefficients 4.5 Bootstrapping Coefficients in Multiple Regression 4.6 Bootstrap Standard Error Confidence Intervals 4.7 Standard Error Formulas 4.8 Intervals and Tests in Normal Error Regression Model", " Chapter 4 Bootstrap Confindence Intervals Learning Outcomes: Explain how to obtain a bootstrap distribution for a statistic (such as a sample mean, median, standard deviation, proportion, difference in means or proportions, or regression coefficient). Explain the purpose of bootstrapping. Interpret confidence intervals, or explain why it is inappropriate to do so. Explain whether or not the results of a confidence interval are. consistent with the conclusion of a hypothesis test. Define standard error of a statistic and interpret it in context. Explain how sample size and level of confidence impact the width of a confidence interval. Explain how sample size impacts variability in individual observations, and the sampling distribution for a test statistic. 4.1 Quantifying Sampling Variability 4.1.1 Distribution of Mercury Levels in Florida Lakes Recall the example of mercury levels in a sample of 53 Florida Lakes, seen in the previous chapter. Lakes_Hist &lt;- ggplot(data=FloridaLakes, aes(x=AvgMercury)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;, binwidth = 0.2) + ggtitle(&quot;Mercury Levels in Sample of Florida Lakes&quot;) + xlab(&quot;Mercury Level&quot;) + ylab(&quot;Frequency&quot;) Lakes_Hist The table shows mean mercury level, median mercury level, standard deviation in mercury level between lakes, proportion of lakes with mercury level above 1 ppm Lakes_Stats &lt;- FloridaLakes %&gt;% summarize(MeanHg = mean(AvgMercury), MedianHg = median(AvgMercury), StDevHG = sd(AvgMercury), PropOver1 = mean(AvgMercury&gt;1), N=n()) Lakes_Stats ## # A tibble: 1 × 5 ## MeanHg MedianHg StDevHG PropOver1 N ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0.527 0.48 0.341 0.113 53 If Mercury accumulation exceeds 0.5 ppm, then there are environmental concerns. In fact, the legal safety limit in Canada is 0.5 ppm, although it is 1 ppm in the United States. Since the mean mercury level is 0.527 ppm, this might be some cause for concern. Then again, this was based on just a sample of 53 lakes. We would expect mean mercury level to vary from one sample of 53 to the next, so we would not expect the mean of this sample to exactly match the mean mercury level among all Florida lakes. It would be helpful to know how might the mean mercury level could plausibly vary from one sample of size 53 to the next. We could use this information to determine a reasonable range for the mean mercury level of all Florida lakes. If we had lots of different samples of 53 lakes, we could calculate the mean of each sample, and then see how much these means differ from each other (i.e. calculate the standard deviation of the means). Unfortunately, we don’t have lots of samples of size 53, we only have one sample. 4.1.2 Simulation to Quantify Variability Somehow, we need to use information from just this one sample to estimate how much variability could plausibly occur between the mean of many different samples of 53 lakes. Idea: Let’s assume our sample is representative of all Florida lakes. Then, we’ll duplicate it many times to create a large set, that will look like the population of all Florida Lakes. We can then draw samples of 53 from that large population, and record the mean mercury level for each sample of 53. In fact, duplicating the sample many times and selecting new samples of 53 has the same effect as drawing samples of size 53 from the original sample, by putting the lake drawn back in each time. (i.e. sampling with replacement) This means that in each new sample, some lakes will be drawn multiple times and others not at all. It also ensures that each sample is different, allowing us to estimate variability in the sample mean between the different samples of size 53. The variability in sample means in our newly drawn samples is used to approximate the variability in sample means that would occur between different samples of 53 lakes, drawn from the population of all Florida Lakes. 4.1.3 Bootstrap Sampling The approach of sampling from the original sample, described on the previous page is called bootstrap sampling. The new samples drawn are referred to as bootstrap samples. Take a bootstrap sample of size 53, by sampling lakes with replacement. Calculate the mean mercury concentration in the bootstrap sample. Repeat steps 1 and 2 many (say 10,000) times, keeping track of the mean mercury concentrations in each bootstrap sample. Look at the distribution of mean concentrations from the bootstrap samples. The variability in this distribution can be used to approximate the variability in the sampling distribution for the sample mean. 4.1.4 Original Sample print.data.frame(data.frame(FloridaLakes %&gt;% select(Lake, AvgMercury)), row.names = FALSE) ## Lake AvgMercury ## Alligator 1.23 ## Annie 1.33 ## Apopka 0.04 ## Blue Cypress 0.44 ## Brick 1.20 ## Bryant 0.27 ## Cherry 0.48 ## Crescent 0.19 ## Deer Point 0.83 ## Dias 0.81 ## Dorr 0.71 ## Down 0.50 ## Eaton 0.49 ## East Tohopekaliga 1.16 ## Farm-13 0.05 ## George 0.15 ## Griffin 0.19 ## Harney 0.77 ## Hart 1.08 ## Hatchineha 0.98 ## Iamonia 0.63 ## Istokpoga 0.56 ## Jackson 0.41 ## Josephine 0.73 ## Kingsley 0.34 ## Kissimmee 0.59 ## Lochloosa 0.34 ## Louisa 0.84 ## Miccasukee 0.50 ## Minneola 0.34 ## Monroe 0.28 ## Newmans 0.34 ## Ocean Pond 0.87 ## Ocheese Pond 0.56 ## Okeechobee 0.17 ## Orange 0.18 ## Panasoffkee 0.19 ## Parker 0.04 ## Placid 0.49 ## Puzzle 1.10 ## Rodman 0.16 ## Rousseau 0.10 ## Sampson 0.48 ## Shipp 0.21 ## Talquin 0.86 ## Tarpon 0.52 ## Tohopekaliga 0.65 ## Trafford 0.27 ## Trout 0.94 ## Tsala Apopka 0.40 ## Weir 0.43 ## Wildcat 0.25 ## Yale 0.27 Sample Mean: mean(FloridaLakes$AvgMercury) ## [1] 0.5271698 4.1.5 Five Bootstrap Samples in R The sample_n() function samples the specified number rows from a data frame, with or without replacement. Bootstrap Sample 1 BootstrapSample1 &lt;- sample_n(FloridaLakes, 53, replace=TRUE) %&gt;% arrange(Lake) print.data.frame(data.frame(BootstrapSample1%&gt;% select(Lake, AvgMercury)), row.names = FALSE) ## Lake AvgMercury ## Annie 1.33 ## Apopka 0.04 ## Blue Cypress 0.44 ## Bryant 0.27 ## Deer Point 0.83 ## Deer Point 0.83 ## Dias 0.81 ## Dorr 0.71 ## Down 0.50 ## Down 0.50 ## Down 0.50 ## Down 0.50 ## Eaton 0.49 ## Farm-13 0.05 ## George 0.15 ## George 0.15 ## Harney 0.77 ## Harney 0.77 ## Hart 1.08 ## Hart 1.08 ## Hatchineha 0.98 ## Hatchineha 0.98 ## Istokpoga 0.56 ## Istokpoga 0.56 ## Istokpoga 0.56 ## Josephine 0.73 ## Kingsley 0.34 ## Kingsley 0.34 ## Kissimmee 0.59 ## Kissimmee 0.59 ## Miccasukee 0.50 ## Miccasukee 0.50 ## Newmans 0.34 ## Newmans 0.34 ## Orange 0.18 ## Panasoffkee 0.19 ## Placid 0.49 ## Puzzle 1.10 ## Sampson 0.48 ## Sampson 0.48 ## Talquin 0.86 ## Trafford 0.27 ## Trout 0.94 ## Weir 0.43 ## Weir 0.43 ## Weir 0.43 ## Wildcat 0.25 ## Wildcat 0.25 ## Yale 0.27 ## Yale 0.27 ## Yale 0.27 ## Yale 0.27 ## Yale 0.27 Sample Mean: mean(BootstrapSample1$AvgMercury) ## [1] 0.525283 Bootstrap Sample 2 BootstrapSample2 &lt;- sample_n(FloridaLakes, 53, replace=TRUE) %&gt;% arrange(Lake) print.data.frame(data.frame(BootstrapSample2%&gt;% select(Lake, AvgMercury)), row.names = FALSE) ## Lake AvgMercury ## Alligator 1.23 ## Apopka 0.04 ## Blue Cypress 0.44 ## Blue Cypress 0.44 ## Brick 1.20 ## Cherry 0.48 ## Crescent 0.19 ## Crescent 0.19 ## Crescent 0.19 ## Crescent 0.19 ## Dorr 0.71 ## Dorr 0.71 ## East Tohopekaliga 1.16 ## Eaton 0.49 ## Farm-13 0.05 ## George 0.15 ## Harney 0.77 ## Harney 0.77 ## Hart 1.08 ## Hatchineha 0.98 ## Hatchineha 0.98 ## Istokpoga 0.56 ## Jackson 0.41 ## Josephine 0.73 ## Kingsley 0.34 ## Kissimmee 0.59 ## Lochloosa 0.34 ## Lochloosa 0.34 ## Louisa 0.84 ## Miccasukee 0.50 ## Minneola 0.34 ## Monroe 0.28 ## Newmans 0.34 ## Ocean Pond 0.87 ## Okeechobee 0.17 ## Orange 0.18 ## Panasoffkee 0.19 ## Parker 0.04 ## Placid 0.49 ## Placid 0.49 ## Rodman 0.16 ## Shipp 0.21 ## Shipp 0.21 ## Talquin 0.86 ## Talquin 0.86 ## Tarpon 0.52 ## Trafford 0.27 ## Trout 0.94 ## Tsala Apopka 0.40 ## Weir 0.43 ## Weir 0.43 ## Wildcat 0.25 ## Yale 0.27 mean(BootstrapSample2$AvgMercury) ## [1] 0.4960377 Bootstrap Sample 3 BootstrapSample3 &lt;- sample_n(FloridaLakes, 53, replace=TRUE) %&gt;% arrange(Lake) print.data.frame(data.frame(BootstrapSample3%&gt;% select(Lake, AvgMercury)), row.names = FALSE) ## Lake AvgMercury ## Brick 1.20 ## Brick 1.20 ## Bryant 0.27 ## Bryant 0.27 ## Cherry 0.48 ## Crescent 0.19 ## Crescent 0.19 ## Deer Point 0.83 ## Deer Point 0.83 ## Dias 0.81 ## Dorr 0.71 ## Dorr 0.71 ## Down 0.50 ## Down 0.50 ## Farm-13 0.05 ## George 0.15 ## Griffin 0.19 ## Griffin 0.19 ## Harney 0.77 ## Hart 1.08 ## Hart 1.08 ## Hatchineha 0.98 ## Iamonia 0.63 ## Iamonia 0.63 ## Istokpoga 0.56 ## Istokpoga 0.56 ## Istokpoga 0.56 ## Jackson 0.41 ## Josephine 0.73 ## Josephine 0.73 ## Kingsley 0.34 ## Kingsley 0.34 ## Miccasukee 0.50 ## Minneola 0.34 ## Minneola 0.34 ## Newmans 0.34 ## Okeechobee 0.17 ## Orange 0.18 ## Orange 0.18 ## Parker 0.04 ## Sampson 0.48 ## Sampson 0.48 ## Shipp 0.21 ## Shipp 0.21 ## Shipp 0.21 ## Talquin 0.86 ## Talquin 0.86 ## Tarpon 0.52 ## Tohopekaliga 0.65 ## Tsala Apopka 0.40 ## Weir 0.43 ## Wildcat 0.25 ## Yale 0.27 mean(BootstrapSample3$AvgMercury) ## [1] 0.5016981 Bootstrap Sample 4 BootstrapSample4 &lt;- sample_n(FloridaLakes, 53, replace=TRUE) %&gt;% arrange(Lake) print.data.frame(data.frame(BootstrapSample4%&gt;% select(Lake, AvgMercury)), row.names = FALSE) ## Lake AvgMercury ## Annie 1.33 ## Blue Cypress 0.44 ## Blue Cypress 0.44 ## Brick 1.20 ## Brick 1.20 ## Bryant 0.27 ## Dias 0.81 ## Dias 0.81 ## Dorr 0.71 ## Dorr 0.71 ## East Tohopekaliga 1.16 ## Eaton 0.49 ## Farm-13 0.05 ## George 0.15 ## Harney 0.77 ## Harney 0.77 ## Hart 1.08 ## Hatchineha 0.98 ## Jackson 0.41 ## Jackson 0.41 ## Jackson 0.41 ## Jackson 0.41 ## Josephine 0.73 ## Kingsley 0.34 ## Kissimmee 0.59 ## Kissimmee 0.59 ## Lochloosa 0.34 ## Lochloosa 0.34 ## Louisa 0.84 ## Louisa 0.84 ## Louisa 0.84 ## Miccasukee 0.50 ## Minneola 0.34 ## Minneola 0.34 ## Monroe 0.28 ## Newmans 0.34 ## Newmans 0.34 ## Ocean Pond 0.87 ## Ocheese Pond 0.56 ## Okeechobee 0.17 ## Okeechobee 0.17 ## Parker 0.04 ## Parker 0.04 ## Rodman 0.16 ## Sampson 0.48 ## Shipp 0.21 ## Talquin 0.86 ## Tarpon 0.52 ## Tarpon 0.52 ## Trout 0.94 ## Trout 0.94 ## Tsala Apopka 0.40 ## Tsala Apopka 0.40 mean(BootstrapSample4$AvgMercury) ## [1] 0.5637736 Bootstrap Sample 5 BootstrapSample5 &lt;- sample_n(FloridaLakes, 53, replace=TRUE) %&gt;% arrange(Lake) print.data.frame(data.frame(BootstrapSample5%&gt;% select(Lake, AvgMercury)), row.names = FALSE) ## Lake AvgMercury ## Alligator 1.23 ## Alligator 1.23 ## Apopka 0.04 ## Brick 1.20 ## Bryant 0.27 ## Cherry 0.48 ## Cherry 0.48 ## Crescent 0.19 ## Crescent 0.19 ## Deer Point 0.83 ## Deer Point 0.83 ## Deer Point 0.83 ## Deer Point 0.83 ## Dias 0.81 ## Dorr 0.71 ## Dorr 0.71 ## Down 0.50 ## East Tohopekaliga 1.16 ## Eaton 0.49 ## Griffin 0.19 ## Iamonia 0.63 ## Istokpoga 0.56 ## Istokpoga 0.56 ## Jackson 0.41 ## Jackson 0.41 ## Jackson 0.41 ## Kingsley 0.34 ## Lochloosa 0.34 ## Lochloosa 0.34 ## Lochloosa 0.34 ## Miccasukee 0.50 ## Miccasukee 0.50 ## Minneola 0.34 ## Minneola 0.34 ## Monroe 0.28 ## Monroe 0.28 ## Newmans 0.34 ## Orange 0.18 ## Orange 0.18 ## Panasoffkee 0.19 ## Panasoffkee 0.19 ## Parker 0.04 ## Placid 0.49 ## Puzzle 1.10 ## Puzzle 1.10 ## Rodman 0.16 ## Rodman 0.16 ## Rousseau 0.10 ## Sampson 0.48 ## Tohopekaliga 0.65 ## Trafford 0.27 ## Weir 0.43 ## Wildcat 0.25 mean(BootstrapSample5$AvgMercury) ## [1] 0.4922642 4.1.6 Code for Bootstrap for Sample Mean Now, we’ll take 10,000 bootstrap samples, and record the mean mercury concentration in each sample. MeanHg &lt;- rep(NA, 10000) for (i in 1:10000){ BootstrapSample &lt;- sample_n(FloridaLakes, 53, replace=TRUE) MeanHg[i] &lt;- mean(BootstrapSample$AvgMercury) } Lakes_Bootstrap_Results_Mean &lt;- data.frame(MeanHg) 4.1.7 Bootstrap Distribution for Sample Mean Lakes_Bootstrap_Mean &lt;- ggplot(data=Lakes_Bootstrap_Results_Mean, aes(x=MeanHg)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;Mean Mercury in Bootstrap Sample &quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bootstrap Distribution for Sample Mean in Florida Lakes&quot;) + theme(legend.position = &quot;none&quot;) Lakes_Bootstrap_Mean We’ll calculate the 0.025 and 0.975 quantiles of this distribution, that is, the values between which the middle 95% of the bootstrap sample means lie. q.025 &lt;- quantile(Lakes_Bootstrap_Results_Mean$MeanHg, 0.025) q.975 &lt;- quantile(Lakes_Bootstrap_Results_Mean$MeanHg, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 0.4379198 0.6179245 Lakes_Bootstrap_Mean + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) + geom_text(label=&quot;Middle 95%&quot;, x=(q.025 + q.975)/2 , y=50) We are 95% confident that the mean mercury level is all Florida Lakes is between 0.44 and 0.62 ppm. 4.1.8 Confidence Intervals We call the above interval a 95% bootstrap percentile confidence interval for the mean mercury level of all Florida Lakes. A confidence interval provides a reasonable range in which a quantity that pertains to the population could lie, based on data from a sample. The quantity we are estimating, which pertains to the entire population is called a parameter. In this case, the parameter of interest is the mean mercury level of all Florida lakes, and the data is our sample of 53 lakes. When we estimate a population parameter, using a statistic from a sample, we need to provide a confidence interval to account for variability in the statistic from one sample to the next. 4.1.9 What Bootstrapping Does and Doesn’t Do The purpose of bootstrapping is to quantify the amount of uncertainty associated with a statistic that was calculated from a sample. A common misperception is that bootstrapping somehow increases the size of a sample by creating copies (or sampling with replacement). This is wrong!!!! Bootstrap samples are obtained by sampling from the original data, so they contain no new information and do not increase sample size. They simply help us understand how much our sample result could reasonably differ from that of the full population. 4.2 Bootstrapping Other Statistics 4.2.1 General Bootstrapping Procedure The bootstrap procedure can be applied to quantify uncertainty associated with a wide range of statistics (for example, sample proportions, means, medians, standard deviations, regression coefficients, F-statistics, etc.) Given a statistic that was calculated from a sample… Procedure: Take a sample of the same size as the original sample, by sampling cases from the original sample, with replacement. Calculate the statistic of interest in the bootstrap sample. Repeat steps 1 and 2 many (say 10,000) times, keeping track of the statistic calculated in each bootstrap sample. Look at the distribution of statistics calculated from the bootstrap samples. The variability in this distribution can be used to approximate the variability in the sampling distribution for the statistic of interest. We might be interested in quantities other than mean mercury level for the lakes. For example: standard deviation in mercury level sd(FloridaLakes$AvgMercury) ## [1] 0.3410356 percentage of lakes with mercury level exceeding 1 ppm mean(FloridaLakes$AvgMercury&gt;1) ## [1] 0.1132075 Note: in R, taking the mean of a logical variable returns the proportion of this that the condition is TRUE. median mercury level median(FloridaLakes$AvgMercury) ## [1] 0.48 4.2.2 Bootstrapping for Other Quantities We can also use bootstrapping to obtain confidence intervals for the median and standard deviation in mercury levels in Florida lakes. StDevHg &lt;- rep(NA, 10000) PropOver1 &lt;- rep(NA, 10000) MedianHg &lt;- rep(NA, 10000) for (i in 1:10000){ BootstrapSample &lt;- sample_n(FloridaLakes, 53, replace=TRUE) StDevHg[i] &lt;- sd(BootstrapSample$AvgMercury) PropOver1[i] &lt;- mean(BootstrapSample$AvgMercury&gt;1) MedianHg[i] &lt;- median(BootstrapSample$AvgMercury) } Lakes_Bootstrap_Results_Other &lt;- data.frame(MedianHg, PropOver1, StDevHg) 4.2.3 Lakes Bootstrap Percentile CI for St. Dev. q.025 &lt;- quantile(Lakes_Bootstrap_Results_Other$StDevHg, 0.025) q.975 &lt;- quantile(Lakes_Bootstrap_Results_Other$StDevHg, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 0.2778717 0.3910469 Lakes_Bootstrap_SD &lt;- ggplot(data=Lakes_Bootstrap_Results_Other, aes(x=StDevHg)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;Standard Devation in Bootstrap Sample &quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bootstrap Distribution for Standard Deviation in Florida Lakes&quot;) Lakes_Bootstrap_SD + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We are 95% confident that the standard deviation in mercury level for all Florida Lakes is between 0.28 and 0.39 ppm. 4.2.4 Bootstrap Percentile CI for Prop. &gt; 1 ppm q.025 &lt;- quantile(Lakes_Bootstrap_Results_Other$PropOver1, 0.025) q.975 &lt;- quantile(Lakes_Bootstrap_Results_Other$PropOver1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 0.03773585 0.20754717 Lakes_Bootstrap_PropOver1 &lt;- ggplot(data=Lakes_Bootstrap_Results_Other, aes(x=PropOver1)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;Proportion of Lakes over 1 ppm &quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bootstrap Distribution for Prop. Lakes &gt; 1.0 ppm&quot;) Lakes_Bootstrap_PropOver1 + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We are 95% confident that the proportion of all Florida lakes with mercury level over 1 ppm is between 0.04 and 0.21. 4.2.5 Bootstrap Percentile CI for Median q.025 &lt;- quantile(Lakes_Bootstrap_Results_Other$MedianHg, 0.025) q.975 &lt;- quantile(Lakes_Bootstrap_Results_Other$MedianHg, 0.975) Lakes_Bootstrap_Median &lt;- ggplot(data=Lakes_Bootstrap_Results_Other, aes(x=MedianHg)) + geom_histogram(fill=&quot;lightblue&quot;)+ xlab(&quot;Median Mercury in Bootstrap Sample &quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bootstrap Distribution for Sample Median in Florida Lakes&quot;) Lakes_Bootstrap_Median + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We should not draw conclusions from this bootstrap distribution. The bootstrap is unreliable when we see the same values coming up repeatedly in clusters, with large gaps in between. This can be an issue for statistics that are a single value from the dataset (for example median) 4.2.6 When Gaps are/ aren’t OK Sometimes, ggplot() shows gaps in a histogram, due mainly to binwidth. If the points seems to follow a fairly smooth trend (such as for prop &gt; 1), then bootstrapping is ok. If there are large clusters and gaps (such as for median), bootstrapping is inadvisable. Jitter plots can help us look for clusters and gaps. V1 &lt;- ggplot(data=Lakes_Bootstrap_Results_Other, aes(y=PropOver1, x=1)) + geom_jitter() V2 &lt;- ggplot(data=Lakes_Bootstrap_Results_Other, aes(y=MedianHg, x=1)) + geom_jitter() grid.arrange(V1, V2, ncol=2) 4.2.7 Changing Binwidth in Histogram Sometimes, default settings in geom_histogram() lead to less that optimal graphs. ( For example, oddly-placed gaps that do not accurately represent the shape of the data) When a histogram shows undesired gaps, that are not really indivative of large gaps in the data, we can sometimes get rid of them by adjusting the binwidth. Before you do this, explore the data, such as through jitter plots. Do not change binwidth to intentionally manipulate or hide undesirable information. Your goal should be to find a plot that accurately displays the shape/trend in the data. ggplot(data=Lakes_Bootstrap_Results_Other, aes(x=PropOver1)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;, binwidth=0.02) + xlab(&quot;Proportion of Lakes over 1 ppm &quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bootstrap Distribution for Prop. Lakes &gt; 1.0 ppm&quot;) 4.3 Difference in Sample Means 4.3.1 Mercury Levels in Northern vs Southern Florida Lakes We previously used a permutation test and determined that there was strong evidence the the average mercury level for lakes in Southern Florida is higher than the average mercury level for lakes in Northern Florida. library(Lock5Data) data(FloridaLakes) #Location relative to rt. 50 FloridaLakes$Location &lt;- as.factor(c(&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;S&quot;,&quot;N&quot;,&quot;S&quot;,&quot;S&quot;,&quot;S&quot;,&quot;S&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;,&quot;N&quot;)) head(FloridaLakes %&gt;% select(Lake, AvgMercury, Location)) ## # A tibble: 6 × 3 ## Lake AvgMercury Location ## &lt;chr&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 Alligator 1.23 S ## 2 Annie 1.33 S ## 3 Apopka 0.04 N ## 4 Blue Cypress 0.44 S ## 5 Brick 1.2 S ## 6 Bryant 0.27 N LakesBP &lt;- ggplot(data=FloridaLakes, aes(x=Location, y=AvgMercury, fill=Location)) + geom_boxplot() + geom_jitter() + ggtitle(&quot;Mercury Levels in Florida Lakes&quot;) + xlab(&quot;Location&quot;) + ylab(&quot;Mercury Level&quot;) + theme(axis.text.x = element_text(angle = 90)) + coord_flip() LakesBP LakesTable &lt;- FloridaLakes %&gt;% group_by(Location) %&gt;% summarize(MeanHg=mean(AvgMercury), StDevHg=sd(AvgMercury), N=n()) LakesTable ## # A tibble: 2 × 4 ## Location MeanHg StDevHg N ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 N 0.425 0.270 33 ## 2 S 0.696 0.384 20 In our sample of 33 Northern Lakes and 20 Southern Lakes, we saw a difference of 0.27 ppm. We might want to estimate how big or small this difference could be among all Florida lakes. 4.3.2 Model for Northern and Southern Lakes \\(\\widehat{\\text{Hg}} = b_0 +b_1\\text{I}_{\\text{South}}\\) \\(b_0\\) represents the mean mercury level for lakes in North Florida, and \\(b_1\\) represents the mean difference in mercury level for lakes in South Florida, compared to North Florida 4.3.3 Model for Lakes R Output Lakes_M &lt;- lm(data=FloridaLakes, AvgMercury ~ Location) summary(Lakes_M) ## ## Call: ## lm(formula = AvgMercury ~ Location, data = FloridaLakes) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.65650 -0.23455 -0.08455 0.24350 0.67545 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.42455 0.05519 7.692 0.000000000441 *** ## LocationS 0.27195 0.08985 3.027 0.00387 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3171 on 51 degrees of freedom ## Multiple R-squared: 0.1523, Adjusted R-squared: 0.1357 ## F-statistic: 9.162 on 1 and 51 DF, p-value: 0.003868 4.3.4 Bootstrapping for Northern vs Southern Lakes Bootstrapping Procedure Take bootstrap samples of 33 northern Lakes, and 20 southern Lakes, by sampling with replacement. Fit a model and record regression coefficient \\(b_1\\), which represents the difference in mean mercury levels between the samples. Repeat steps 1 and 2 10,000 times, keeping track of the regression coefficient estimates in each bootstrap sample. Look at the distribution of regression coefficients in the bootstrap samples. The variability in this distribution can be used to approximate the variability in the sampling distributions for the \\(b_1\\). 4.3.5 Code for Bootstrapping for N vs S Lakes b1 &lt;- rep(NA, 10000) #vector to store b1 values for (i in 1:10000){ NLakes &lt;- sample_n(FloridaLakes %&gt;% filter(Location==&quot;N&quot;), 33, replace=TRUE) ## sample 33 northern lakes SLakes &lt;- sample_n(FloridaLakes %&gt;% filter(Location==&quot;S&quot;), 20, replace=TRUE) ## sample 20 southern lakes BootstrapSample &lt;- rbind(NLakes, SLakes) ## combine Northern and Southern Lakes M &lt;- lm(data=BootstrapSample, AvgMercury ~ Location) ## fit linear model b1[i] &lt;- coef(M)[2] ## record b1 } NS_Lakes_Bootstrap_Results &lt;- data.frame(b1) #save results as dataframe 4.3.6 Lakes: Bootstrap Percentile CI for Avg. Diff. q.025 &lt;- quantile(NS_Lakes_Bootstrap_Results$b1, 0.025) q.975 &lt;- quantile(NS_Lakes_Bootstrap_Results$b1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 0.08475265 0.46174886 NS_Lakes_Bootstrap_Plot_b1 &lt;- ggplot(data=NS_Lakes_Bootstrap_Results, aes(x=b1)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;b1 in Bootstrap Sample&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Northern vs Southern Lakes: Bootstrap Distribution for b1&quot;) NS_Lakes_Bootstrap_Plot_b1 + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We are 95% confident the average mercury level in Southern Lakes is between 0.08 and 0.46 ppm higher than in Northern Florida. Question: We previously performed a hypothesis test and concluded that there was evidence that mean mercury level was higher for lakes in South Florida than Northern Florida. Is this confidence interval consistent with the result of the hypothesis test? Why or why not? 4.4 Bootstrapping Regression Coefficients 4.4.1 Bootstrapping Regression Slope for All Cars Since \\(b_0\\) and \\(b_1\\) were calculated from a sample of 110 new 2015 cars, we do not expect them to be exactly the same as what we would have obtained if we had data on all 2015 new cars. We’ll use bootstrapping to get a sense for how much variability is associated with the slope and intercept of the regression line. Bootstrapping Procedure Take a bootstrap sample of size 110, by sampling cars with replacement. Fit a linear regression model to the bootstrap sample with price as the response variable, and Acc060 as the explanatory variable. Record \\(b_0\\) and \\(b_1\\). Repeat steps 1 and 2 10,000 times, keeping track of the values on \\(b_0\\) and \\(b_1\\) in each bootstrap sample. Look at the distribution of \\(b_0\\) and \\(b_1\\) from the bootstrap samples. The variability in these distributions can be used to approximate the variability in the sampling distribution for the intercept and slope. 4.4.2 Code for Cars Regression Bootstrap b0 &lt;- rep(NA, 10000) b1 &lt;- rep(NA, 10000) for (i in 1:10000){ BootstrapSample &lt;- sample_n(Cars2015, 110, replace=TRUE) Model_Bootstrap &lt;- lm(data=BootstrapSample, LowPrice~Acc060) b0[i] &lt;- Model_Bootstrap$coeff[1] b1[i] &lt;-Model_Bootstrap$coeff[2] } Cars_Bootstrap_Results_Acc060 &lt;- data.frame(b0, b1) 4.4.3 First 10 Bootstrap Regression Lines ggplot(data=Cars2015, aes(x=Acc060,y=LowPrice))+ geom_point()+ theme_bw() + geom_abline(data=Cars_Bootstrap_Results_Acc060[1:10, ],aes(slope=b1,intercept=b0),color=&quot;red&quot;) + stat_smooth( method=&quot;lm&quot;, se=FALSE) 4.4.4 Bootstrap Percentile CI for Slope of Cars Reg. Line q.025 &lt;- quantile(Cars_Bootstrap_Results_Acc060$b1, 0.025) q.975 &lt;- quantile(Cars_Bootstrap_Results_Acc060$b1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## -8.797594 -5.696359 Cars_Acc060_B_Slope_Plot &lt;- ggplot(data=Cars_Bootstrap_Results_Acc060, aes(x=b1)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;Cars Acc060: Slope in Bootstrap Sample &quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bootstrap Distribution for Slope&quot;) Cars_Acc060_B_Slope_Plot + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We are 95% confident that the average price of a new 2015 car decreases between -8.8 and -5.7 thousand dollars for each additional second it takes to accelerate from 0 to 60 mph. Question: Why shouldn’t we make a bootstrap confidence interval for \\(b_0\\), the intercept, in this context? 4.5 Bootstrapping Coefficients in Multiple Regression 4.5.1 Model for Predicting Bear Weights We previously used a linear regression model to predict the weights of wild bears, using a sample of 97 bears. Recall the model and its interpretations. ggplot(data=Bears_Subset, aes(x=Age, y=Weight, color=Sex)) + geom_point() + stat_smooth(method=&quot;lm&quot;, se=FALSE) 4.5.2 Model for Predicting Bear Weights (cont.) Bear_M_Age_Sex_Int &lt;- lm(data=Bears_Subset, Weight~ Age*Sex) summary(Bear_M_Age_Sex_Int) ## ## Call: ## lm(formula = Weight ~ Age * Sex, data = Bears_Subset) ## ## Residuals: ## Min 1Q Median 3Q Max ## -207.583 -38.854 -9.574 23.905 174.802 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 70.4322 17.7260 3.973 0.000219 *** ## Age 3.2381 0.3435 9.428 0.000000000000765 *** ## Sex2 -31.9574 35.0314 -0.912 0.365848 ## Age:Sex2 -1.0350 0.6237 -1.659 0.103037 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 70.18 on 52 degrees of freedom ## (41 observations deleted due to missingness) ## Multiple R-squared: 0.6846, Adjusted R-squared: 0.6664 ## F-statistic: 37.62 on 3 and 52 DF, p-value: 0.0000000000004552 4.5.3 Model Interpretations in Bears Interaction Model \\(\\widehat{\\text{Weight}}= 70.43+ 3.24 \\times\\text{Age}- 31.95\\times\\text{I}_{Female} -1.04\\times\\text{Age}\\times\\text{I}_{Female}\\) This model was fit using a sample of 97 wild bears. If we were to take a different sample, and fit a regression model, we would obtain different values for \\(b_0\\), \\(b_1\\), \\(b_2\\), and \\(b_3\\), as well as relevant quantities \\(b_0-b_2\\) and \\(b_1-b_3\\), due to sampling variability. Questions of interest: Find a reasonable range for the following quantities: the mean monthly weight gain among all male bears the mean monthly weight gain among all female bears the mean weight among all 24 month old male bears the mean weight among all 24 month old female bears Just as we did for sample means and proportions, we can answer these questions via bootstrapping. 4.5.4 Quantities of Interest First, we need to find expressions for the quantities we are interested in, in terms of the model coefficients. \\(\\widehat{\\text{Weight}}= b_0+ b_1 \\times\\text{Age} - b_2\\times\\text{I}_{Female} + b_3\\times\\text{Age}\\times\\text{I}_{Female}\\) Expected Weight for Female Bears: \\[ \\begin{aligned} \\widehat{\\text{Weight}} &amp; = b_0+ b_1 \\times\\text{Age}+ b_2 + b_3\\times\\text{Age} \\\\ &amp; (b_0 + b_2) + (b_1+b_3)\\times\\text{Age} \\end{aligned} \\] Expected Weight for Male Bears: \\[ \\begin{aligned} \\widehat{\\text{Weight}}= b_0 + b_1 \\times\\text{Age} \\end{aligned} \\] Questions of interest: Find a reasonable range for the following quantities: the mean weight gain per month among all male bears (\\(b_1\\)) the mean weight gain per month among all female bears (\\(b_1 + b_3\\)) the mean weight among all 24 month old male bears (\\(b_0 + 24b_1\\)) the mean weight among all 24 month old female bears (\\(b_0 + b_2 + 24(b_1+b_3)\\)) 4.5.5 Bootstrapping for Bears Regression Coefficients Bootstrapping Procedure Take a bootstrap sample of size 97, by sampling bears with replacement. Fit a model and record regression coefficients \\(b_0\\), \\(b_1\\), \\(b_2\\), \\(b_3\\). Repeat steps 1 and 2 10,000 times, keeping track of the regression coefficient estimates in each bootstrap sample. Look at the distribution of regression coefficients in the bootstrap samples. The variability in this distribution can be used to approximate the variability in the sampling distributions for the regression coefficients. 4.5.6 Bootstrap Code for Bears Regression Coefficients b0 &lt;- rep(NA, 10000) b1 &lt;- rep(NA, 10000) b2 &lt;- rep(NA, 10000) b3 &lt;- rep(NA, 10000) for (i in 1:10000){ BootstrapSample &lt;- sample_n(Bears_Subset, 97, replace=TRUE) #take bootstrap sample M &lt;- lm(data=BootstrapSample, Weight ~ Age*Sex) ## fit linear model b0[i] &lt;- coef(M)[1] ## record b0 b1[i] &lt;- coef(M)[2] ## record b1 b2[i] &lt;- coef(M)[3] ## record b2 b3[i] &lt;- coef(M)[4] ## record b3 } Bears_Bootstrap_Results &lt;- data.frame(b0, b1, b2, b3) 4.5.7 Bootstrap Percentile CI for \\(b_1\\) in Bears Model The average weight gain per month for male bears is represented by \\(b_1\\). q.025 &lt;- quantile(Bears_Bootstrap_Results$b1, 0.025) q.975 &lt;- quantile(Bears_Bootstrap_Results$b1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 2.365099 5.969894 Bears_plot_b1 &lt;- ggplot(data=Bears_Bootstrap_Results, aes(x=b1)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;b1 in Bootstrap Sample&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bears Weight by Age and Sex: Bootstrap Distribution for b1&quot;) Bears_plot_b1 + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We are 95% confident that male bears gain between 2.37 and 5.97 pounds per month, on average. 4.5.8 Bootstrap Percentile CI for \\(b_1 + b_3\\) The average weight gain per month for female bears is represented by \\(b_1 + b3\\). q.025 &lt;- quantile(Bears_Bootstrap_Results$b1 + Bears_Bootstrap_Results$b3, 0.025) q.975 &lt;- quantile(Bears_Bootstrap_Results$b1 + Bears_Bootstrap_Results$b3, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 1.380019 3.443457 ggplot(data=Bears_Bootstrap_Results, aes(x=b1+b3, fill=!(b1+b3 &gt;=q.975 | b1 + b3 &lt;= q.025))) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;b1 + b3 in Bootstrap Sample&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bears Weight by Age and Sex:Bootstrap Distribution for b1+b3&quot;) + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We are 95% confident that female bears gain between 1.3800186 and 3.4434571 pounds per month, on average. 4.5.9 Bootstrap Percentile CI for \\(b_0 + 24b_1\\) The mean weight of all 24 month old male bears is represented by \\(b_0 + 24b_1\\). q.025 &lt;- quantile(Bears_Bootstrap_Results$b0 + 24*Bears_Bootstrap_Results$b1, 0.025) q.975 &lt;- quantile(Bears_Bootstrap_Results$b0 + 24*Bears_Bootstrap_Results$b1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 128.5003 169.0521 ggplot(data=Bears_Bootstrap_Results, aes(x=b0+24*b1)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;b0 + 24b1 in Bootstrap Sample&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bears Weight by Age and Sex: Bootstrap Distribution for b0+24b1&quot;) + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We are 95% confident that the mean weight of all 24 month old bears is between 128.5002676 and 169.0521237 pounds. 4.5.10 Bootstrap Percentile CI for \\((b_0 + b_2) + 24(b_1+b_3)\\) The mean weight of all 24 month old female bears is represented by \\((b_0 + b_2) + 24(b_1+b_3)\\). q.025 &lt;- quantile(Bears_Bootstrap_Results$b0 + Bears_Bootstrap_Results$b2 + 24*(Bears_Bootstrap_Results$b1 + Bears_Bootstrap_Results$b3), 0.025) q.975 &lt;- quantile(Bears_Bootstrap_Results$b0 + Bears_Bootstrap_Results$b2 + 24*(Bears_Bootstrap_Results$b1 + Bears_Bootstrap_Results$b3), 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 76.2520 112.5801 ggplot(data=Bears_Bootstrap_Results, aes(x=(b0+b2)+24*(b1+b3))) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;(b0+b2)+24*(b1+b3) in Bootstrap Sample&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Bears Weight by Age and Sex: Bootstrap Distribution for (b0+b2)+24*(b1+b3)&quot;) + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We are 95% confident that the mean weight of all 24 month old female bears is between 76.2519955 and 112.5800513 pounds. 4.6 Bootstrap Standard Error Confidence Intervals 4.6.1 Shape of Bootstrap Distributions Notice that most of the bootstrap distributions we’ve seen have been symmetric and bell-shaped. When a distribution is symmetric and bell-shaped, then approximately 95% of all observations lie within two standard deviations of the mean. The standard deviation in a distribution of a statistic(i.e. mean, proportion, median, regression coefficient, etc.) is called the standard error of that statistic. 95% bootstrap standard error confidence interval: \\[ \\text{Statistic} \\pm 2\\times\\text{Standard Error} \\] it is only appropriate to use the bootstrap standard error confidence interval method when a sampling distribution is symmetric and bell-shaped The \\(\\pm\\) \\(2\\times\\text{SE}\\) is called a margin of error, and the resulting range of plausible values for the parameter is called a 95% bootstrap stanadard error confidence interval. 4.6.2 Comparing SE and Percential Bootstrap Intervals Let’s compare calculate bootstrap standard error confidence intervals and compare them with some the bootstrap percentile confidence intervals that we’ve seen previously. 4.6.3 Mean Hg in Lakes Lakes_Bootstrap_Mean SE &lt;- sd(Lakes_Bootstrap_Results_Mean$MeanHg) SE ## [1] 0.04636432 Bootstrap Standard Error Confidence Interval Stat &lt;- mean(FloridaLakes$AvgMercury) c(Stat-2*SE, Stat+2*SE) ## [1] 0.4344412 0.6198985 Bootstrap Percentile Confidence Interval q.025 &lt;- quantile(Lakes_Bootstrap_Results_Mean$MeanHg, 0.025) q.975 &lt;- quantile(Lakes_Bootstrap_Results_Mean$MeanHg, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 0.4379198 0.6179245 Lakes_Bootstrap_Mean + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) + geom_segment(aes(x = Stat-2*SE, y = 150, xend = Stat+2*SE, yend = 150),color = &quot;darkgray&quot;,size=10, alpha=0.01) Percentile interval in gold, standard error interval in gray 4.6.4 Difference in Mean Hg in Lakes NS_Lakes_Bootstrap_Plot_b1 SE &lt;- sd(NS_Lakes_Bootstrap_Results$b1) SE ## [1] 0.09559846 Bootstrap Standard Error Confidence Interval Stat &lt;- mean(NS_Lakes_Bootstrap_Results$b1) c(Stat-2*SE, Stat+2*SE) ## [1] 0.08126845 0.46366231 Bootstrap Percentile Confidence Interval q.025 &lt;- quantile(NS_Lakes_Bootstrap_Results$b1, 0.025) q.975 &lt;- quantile(NS_Lakes_Bootstrap_Results$b1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 0.08475265 0.46174886 NS_Lakes_Bootstrap_Plot_b1 + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) + geom_segment(aes(x = Stat-2*SE, y = 150, xend = Stat+2*SE, yend = 150),color = &quot;darkgray&quot;,size=10, alpha=0.01) Percentile interval in gold, standard error interval in gray 4.6.5 Proportion Lakes Exceeding 1 ppm Hg Lakes_Bootstrap_PropOver1 SE &lt;- sd(Lakes_Bootstrap_Results_Other$PropOver1) SE ## [1] 0.04360363 Bootstrap Standard Error Confidence Interval Stat &lt;- mean(Lakes_Bootstrap_Results_Other$PropOver1) c(Stat-2*SE, Stat+2*SE) ## [1] 0.02586822 0.20028273 Bootstrap Percentile Confidence Interval q.025 &lt;- quantile(Lakes_Bootstrap_Results_Other$PropOver1, 0.025) q.975 &lt;- quantile(Lakes_Bootstrap_Results_Other$PropOver1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 0.03773585 0.20754717 Lakes_Bootstrap_PropOver1 + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) + geom_segment(aes(x = Stat-2*SE, y = 150, xend = Stat+2*SE, yend = 150),color = &quot;darkgray&quot;,size=10, alpha=0.01) Percentile interval in gold, standard error interval in gray. 4.6.6 Cars Regression Slope Cars_Acc060_B_Slope_Plot SE &lt;- sd(Cars_Bootstrap_Results_Acc060$b1) SE ## [1] 0.7873212 Bootstrap Standard Error Confidence Interval Stat &lt;- mean(Cars_Bootstrap_Results_Acc060$b1) c(Stat-2*SE, Stat+2*SE) ## [1] -8.787625 -5.638340 Bootstrap Percentile Confidence Interval q.025 &lt;- quantile(Cars_Bootstrap_Results_Acc060$b1, 0.025) q.975 &lt;- quantile(Cars_Bootstrap_Results_Acc060$b1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## -8.797594 -5.696359 Cars_Acc060_B_Slope_Plot + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10) + geom_segment(aes(x = Stat-2*SE, y = 100, xend = Stat+2*SE, yend = 100),color = &quot;gray&quot;,size=10) Percentile interval in gold, standard error interval in gray 4.6.7 Bears \\(b1\\) Coefficient Bears_plot_b1 Bootstrap Standard Error Confidence Interval SE &lt;- sd(Bears_Bootstrap_Results$b1) SE ## [1] 1.01682 Stat &lt;- mean(Bears_Bootstrap_Results$b1) c(Stat-2*SE, Stat+2*SE) ## [1] 1.581729 5.649011 Bootstrap Percentile Confidence Interval q.025 &lt;- quantile(Bears_Bootstrap_Results$b1, 0.025) q.975 &lt;- quantile(Bears_Bootstrap_Results$b1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 2.365099 5.969894 Bears_plot_b1 +xlim(c(1.5,6.5)) + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) + geom_segment(aes(x = Stat-2*SE, y = 150, xend = Stat+2*SE, yend = 150),color = &quot;gray&quot;,size=10, alpha=0.01) Percentile interval in gold, standard error interval in gray 4.7 Standard Error Formulas 4.7.1 What is Standard Error? Standard error is the standard deviation of the distribution of a statistic (sample mean, proportion, regression coefficient, etc.). It describes the amount of variability in this statistic between samples of a given size. This is different than the sample standard deviation, which pertains to the amount of variability between individuals in the sample. Distribution of Mercury Levels in Florida Lakes: Lakes_Hist Standard Deviation of Mercury Levels Between Lakes: sd(FloridaLakes$AvgMercury) ## [1] 0.3410356 The standard deviation in mercury levels between individual lakes is 0.341 ppm. This describes how much variability there is in mercury levels between individual lakes. Bootstrap Distribution for Mean Mercury Level (\\(n=53\\)) Lakes_Bootstrap_Mean + xlim(c(0,1.5)) Standard Error for Mean: SE &lt;- sd(Lakes_Bootstrap_Results_Mean$MeanHg); SE ## [1] 0.04636432 The standard deviation in the distribution for mean mercury levels between different samples of 53 lakes is approximately 0.0463643 ppm. This describes how much variability there is in mean mercury levels between different samples of 53 lakes. Question: Suppose the sample consisted of only 10 lakes, or 30 lakes, instead of 53, and that the distribution of the new lakes in the sample was otherwise similar to that of the original 53. Would you expect the mercury level of individual lakes to increase, decrese, or stay about the same? What about the standard error of the mean mercury level? 4.7.2 Sample Size and Standard Deviation Standard deviation in Mercury levels between 10 lakes: ## [1] 0.3831797 Standard deviation in Mercury levels between 30 lakes: ## [1] 0.3198103 Standard deviation in Mercury levels between 53 lakes: ## [1] 0.3410356 Sample size does not impact the amount of variability between individual lakes. Standard deviation in mercury levels between individual lakes does not systematically increase or decrease based on sample size (of course it varies a little based on the lakes randomly chosen in the sample). 4.7.3 Sample Size and Standard Error Distributions of Mean Between Different Samples Standard Error of the Mean (n=10): ## [1] 0.1166281 Standard Error of the Mean (n=30): ## [1] 0.05772961 Standard Error of the Mean (n=53): ## [1] 0.04636432 As sample size increases, variability between means of different samples decreases. Standard error of the mean decreases. This is also true of standard errors for other statistics (i.e. difference in means, regression slopes, etc.) 4.7.4 Theory-Based Standard Error Formulas In special cases, there are mathematical formulas for standard errors associated regression coefficients. Scenario Standard Error One Sample Mean \\(SE(\\bar{x})=\\frac{s}{\\sqrt{n}}\\) Difference in Sample Means \\(SE(\\bar{x}_1-\\bar{x}_2)=s\\sqrt{\\frac{1}{n_1}+\\frac{1}{n_2}}\\) Intercept in Simple Linear Regression \\(SE(b_0)=s\\sqrt{\\frac{1}{n}+\\frac{\\bar{x}^2}{\\sum(x_i-\\bar{x})^2}}\\) Slope in Simple Linear Regression \\(SE(b_1)=\\sqrt{\\frac{s^2}{\\sum(x_i-\\bar{x})^2}}\\) \\(s=\\sqrt{\\frac{\\displaystyle\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}{(n-(p+1))}}\\), (p is number of regression coefficients not including \\(b_0\\)) is sample standard deviation In the 2nd formula, the standard error estimate \\(s\\sqrt{\\frac{1}{n_1+n_2}}\\) is called a “pooled” estimate since it combines information from all groups. When there is reason to believe standard deviation differs between groups, we often use an “unpooled” standard error estimate of \\(\\sqrt{\\frac{s_1^2}{n_1}+\\frac{s_2^2}{n_2}}\\), where \\(s_1, s_2\\) represents the standard deviation for groups 1 and 2. 4.7.5 One-Sample Mean Example Standard Error of the mean, for sample of 53 lakes. \\(SE(\\bar{x})=\\frac{s}{\\sqrt{n}}\\) sd(FloridaLakes$AvgMercury)/sqrt(53) ## [1] 0.04684485 summary(lm(data=FloridaLakes, AvgMercury~1)) ## ## Call: ## lm(formula = AvgMercury ~ 1, data = FloridaLakes) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.48717 -0.25717 -0.04717 0.24283 0.80283 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.52717 0.04684 11.25 0.00000000000000151 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.341 on 52 degrees of freedom Comparison to Bootstrap: Lakes_Bootstrap_Mean Standard Error for Mean: SE &lt;- sd(Lakes_Bootstrap_Results_Mean$MeanHg); SE ## [1] 0.04636432 4.7.6 Standard Error for Difference in Means (cont.) Standard Error for difference of means between 33 lakes in North Florida, and 20 lakes in South Florida \\[ SE(\\bar{x}_1-\\bar{x}_2)=s\\sqrt{\\frac{1}{n_1}+\\frac{1}{n_2}}, \\] s &lt;- sqrt(sum(Lakes_M$residuals^2)/(53-2)) SE &lt;- s*sqrt(1/20+1/33); SE ## [1] 0.08984774 summary(Lakes_M) ## ## Call: ## lm(formula = AvgMercury ~ Location, data = FloridaLakes) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.65650 -0.23455 -0.08455 0.24350 0.67545 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.42455 0.05519 7.692 0.000000000441 *** ## LocationS 0.27195 0.08985 3.027 0.00387 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3171 on 51 degrees of freedom ## Multiple R-squared: 0.1523, Adjusted R-squared: 0.1357 ## F-statistic: 9.162 on 1 and 51 DF, p-value: 0.003868 Comparison to Bootstrap: NS_Lakes_Bootstrap_Plot_b1 &lt;- ggplot(data=NS_Lakes_Bootstrap_Results, aes(x=b1)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;b1 in Bootstrap Sample&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Northern vs Southern Lakes: Bootstrap Distribution for b1&quot;) NS_Lakes_Bootstrap_Plot_b1 sd(NS_Lakes_Bootstrap_Results$b1) ## [1] 0.09559846 4.7.7 Theory-Based Confidence Intervals If the sampling distribution for a statistic is symmetric and bell-shaped, we can obtain an approximate 95% confidence interval using the formula: \\[ \\text{Statistic} \\pm 2\\times{\\text{Standard Error}}, \\] where the standard error is calculated by formula, rather than via bootstrap simulations. 4.7.8 Comparison of CI Methods We’ve now seen 3 different ways to obtain confidence intervals based on statistics, calculated from data. The table below tells us what must be true of the sampling distribution for a statistic in order to use each technique. Technique No Gaps Bell-Shaped Known Formula for SE Bootstrap Percentile x Bootstrap Standard Error x x Theory-Based x x x 4.8 Intervals and Tests in Normal Error Regression Model 4.8.1 Distribution of Model Parameters Notice that when we used simulation to approximate the sampling distributions of statistics, many (but not all) of these turned out to be symmetric and bell-shaped. grid.arrange(Lakes_Bootstrap_Mean, Cars_Acc060_B_Slope_Plot, NS_Lakes_Bootstrap_Plot_b1, Bears_plot_b1, ncol=2) 4.8.2 Hypothesis Tests in R Output summary(Lakes_M) ## ## Call: ## lm(formula = AvgMercury ~ Location, data = FloridaLakes) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.65650 -0.23455 -0.08455 0.24350 0.67545 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.42455 0.05519 7.692 0.000000000441 *** ## LocationS 0.27195 0.08985 3.027 0.00387 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3171 on 51 degrees of freedom ## Multiple R-squared: 0.1523, Adjusted R-squared: 0.1357 ## F-statistic: 9.162 on 1 and 51 DF, p-value: 0.003868 p-values for each line in the R-output are associated with the null hypothesis \\(\\beta_j=0\\). Hypothesis Test for line (intercept) Null Hypothesis: The average mercury level among all lakes in North Florida is 0 (\\(\\beta_0=0\\)). Alternative Hypothesis: The average mercury level among all lakes in Northern Florida is not 0 (\\(\\beta_0\\neq 0\\)). We already know the average mercury level among all lakes in North Florida is not 0, so this is a silly test. Hypothesis Test for line LocationS Null Hypothesis: There is no difference in average mercury levels between Northern and Southern Florida (\\(\\beta_1=0\\)). Alternative Hypothesis: There is a difference in average mercury levels in Northern and Southern Florida (\\(\\beta_1\\neq 0\\)). This test is relevant to us. 4.8.3 Coefficients Table in R Output Estimate gives the least-squares estimates \\(b_0, b_1, \\ldots, b_p\\) Standard Error gives estimates of the standard deviation in the sampling distribution for estimate. (i.e. how much uncertainty is there about the estimate?) These are computed using the formulas in Section 4.7. t value is the estimate divided by its standard error. Pr(&gt;|t|) is a p-value for the hypothesis test of whether quantity represented \\(b_j\\) could plausibly be 0. R does not obtain these p-values through simulation, but rather by using the symmetric and bell-shaped t-distribution approximate the distribution of these statistics. This is appropriate when the assumptions of the normal error regression model are reasonably satisfied. 4.8.4 t-distribution A t-distribution is a symmetric, bell-shaped curve, with thicker tails (hence more variability), than a \\(\\mathcal{N}(0,1)\\) distribution. 4.8.5 t-Distribution for Regression Coefficients When the distribution of a regression coefficient \\(b_j\\) is reasonably symmetric, then we can use a t-distribution to approximate the distribution of the statistic: \\[ t= \\frac{{b_j}}{\\text{SE}(b_j)} \\] 4.8.6 Hypothesis Test for Lakes in North and South Florida Null Hypothesis: There is no difference in average mercury levels between Northern and Southern Florida (\\(\\beta_1=0\\)). Alternative Hypothesis: There is a difference in average mercury levels in Northern and Southern Florida (\\(\\beta_1\\neq 0\\)). Test Statistic: \\(t=\\frac{{b_j}}{\\text{SE}(b_j)} = \\frac{0.27195}{0.08985} = 3.027\\) Key Question: What is the probability of getting a t-statistic as extreme as 3.027 if \\(\\beta_1=0\\) (i.e. there is no difference in mercury levels between northern and southern lakes). 4.8.7 t-statistic and p-value ts=3.027 gf_dist(&quot;t&quot;, df=51, geom = &quot;area&quot;, fill = ~ (abs(x)&lt; abs(ts)), show.legend=FALSE) + geom_vline(xintercept=c(ts, -ts), color=&quot;red&quot;) + xlab(&quot;t&quot;) 2*pt(-abs(ts), df=51) ## [1] 0.003866374 The low p-value gives us strong evidence of a difference in average mercury levels between lakes in Northern and Southern Florida. 4.8.8 Comparison to Simulation Let’s compare these results to those given by the permutation test and bootstrap confidence interval. Permutation Test NSLakes_SimulationResultsPlot p-value: b1 &lt;- Lakes_M$coef[2] ## record value of b1 from actual data mean(abs(NSLakes_SimulationResults$b1Sim) &gt; abs(b1)) ## [1] 0.0039 4.8.9 Theory-Based CI for \\(\\beta_1\\) in Florida Lakes 95% confidence interval for \\(\\beta_0\\): \\[ \\text{Statistic} \\pm 2\\times\\text{Standard Error} \\] \\[ 0.27195 \\pm 2(0.08985) \\] We can be 95% confident that average mercury level is between 0.09 and 0.45 ppm higher in Southern Florida, than Northern Florida. The confint command returns confidence intervals for all model parameters. confint(Lakes_M) ## 2.5 % 97.5 % ## (Intercept) 0.31374083 0.5353501 ## LocationS 0.09157768 0.4523314 We can be 95% confident that average mercury level in lakes in North Florida is between 0.31 and 0.54 ppm. We can be 95% confident that average mercury level is between 0.09 and 0.45 ppm higher in Southern Florida, than Northern Florida. Percentile Bootstrap Confidence Interval q.025 &lt;- quantile(NS_Lakes_Bootstrap_Results$b1, 0.025) q.975 &lt;- quantile(NS_Lakes_Bootstrap_Results$b1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## 0.08475265 0.46174886 NS_Lakes_Bootstrap_Plot_b1 &lt;- ggplot(data=NS_Lakes_Bootstrap_Results, aes(x=b1)) + geom_histogram(color=&quot;white&quot;, fill=&quot;lightblue&quot;) + xlab(&quot;b1 in Bootstrap Sample&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;Northern vs Southern Lakes: Bootstrap Distribution for b1&quot;) NS_Lakes_Bootstrap_Plot_b1 + geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), color=&quot;gold&quot;, size=10, alpha=0.01) We are 95% confident the average mercury level in Southern Lakes is between 0.08 and 0.46 ppm higher than in Northern Florida. 4.8.10 When to Use “Theory-Based Inference” Probability theory (such as the Central Limit Theorem), tells us that when sample sizes are large enough, the distributions of model parameters are approximately symmetric and bell-shaped. How big the sample size needs to be varies. People sometimes use \\(n\\geq 30\\) as a guide, but this is context dependent. The more skeweness there is in the orginal data, the larger the sample size needs to be, in order to use “theory-based” inference. In Chapter 5, we’ll look into more ways to check the appropriateness of “theory-based” tests and intervals. If in doubt, check your p-values and confidence intervals against those obtained using simulation. (Or just use simulation!) "],["normal-error-regression-model.html", "Chapter 5 Normal Error Regression Model 5.1 The Normal Error Regression Model 5.2 Inference in Normal Error Regression Model 5.3 Intervals for Predicted Values 5.4 Regression Model Assumptions 5.5 Transformations 5.6 Responsible Statistical Inference 5.7 The Regression Effect", " Chapter 5 Normal Error Regression Model Learning Outcomes: Explain when it is appropriate to use “theory-based” standard error formulas. Interpret estimates, standard errors, test statistics, and p-values resulting from linear model output in R. List the assumptions made in the normal error regression model. Calculate p-values corresponding to t-statistics and F-statistics in R. Interpret confidence intervals for an expected response, and prediction intervals, and distinguish between these two types of intervals. Assess the whether linear model assumptions are reasonably satisfied, using residual plots, histograms, and normal QQ plots. Explain when we should or should not expect p-values and confidence intervals obtained via “theory-based” approaches to agree with those obtained via simulation. Identify situations where a log transformation of the response variable is appropriate. Calculate predicted values for models involving a log transformation of the response variable. Interpret regression coefficients in models involving a log transformation of the response variable. Explain the regression effect. 5.1 The Normal Error Regression Model 5.1.1 Example: Ice Cream Dispensor Suppose an ice cream machine is manufacturered to dispense 2 oz. of ice cream per second, on average. If each person using the machine got exactly 2 oz. per second, the relationship between time and amount dispensed would look like this: In reality, however, the actual amount dispensed each time it is used will vary due to unknown factors like: force applied to dispensor temperature build-up of ice cream other unknown factors Thus, the data will actually look like this: 5.1.2 Signal and Noise We assume that there are two components that contribute to our response variable \\(Y_i\\). These are: A function that relates the expected (or average) value of \\(Y\\) to explanatory variables \\(X_1, X_2, \\ldots{X_p}\\). That is, \\(E(Y_i)= f(X_{i1}, X_{i2}, \\ldots, X_{ip})\\). This function is often assumed to be linear, that is \\(E(Y_i)= \\beta_0 + \\beta_1X_{i1} + \\beta_2X_{i2}+ \\ldots+ \\beta_pX_{ip}\\) Random, unexplained, variability that results in an individual response \\(Y_i\\) differing from \\(E(Y_i)\\). The first component is often referred to as signal. The second is referred to as noise. 5.1.3 Normal Distribution In a linear regression model, we assume individual response values \\(Y_i\\) deviate from their expectation, according to a normal distribution. A normal distribution is defined by two parameters: - \\(\\mu\\) representing the center of the distribution - \\(\\sigma\\) representing the standard deviation This distribution is denoted \\(\\mathcal{N}(\\mu, \\sigma)\\). Note that for standard deviation \\(\\sigma\\), \\(\\sigma^2\\) is called the variance. Some books denote the normal distribution as \\(\\mathcal{N}(\\mu, \\sigma^2)\\), instead of \\(\\mathcal{N}(\\mu,\\sigma)\\). 5.1.4 Signal and Noise in Icecream Example In this example, I simulated the amount of ice cream dispensed by adding a random number from a normal distribution with mean 0 and standard deviation 0.5 to the expected amount dispensed, which is given by \\(2x\\), where \\(x\\) represents time pressing the dispenser. Thus, amount dispensed for person \\(i\\) is given by \\[Y_i = 2x_i+\\epsilon_i, \\text{ where } \\epsilon_i\\sim\\mathcal{N}(0, 0.5) \\] set.seed(10082020) time &lt;- c(1, 1.2, 1.5, 1.8, 2.1, 2.1, 2.3, 2.5, 2.6, 2.8, 2.9, 2.9, 3.1, 3.2, 3.6) signal &lt;- 2*time noise &lt;-rnorm(15, 0, 0.5) amount &lt;- 2*time + noise Icecream &lt;- data.frame(time, signal, noise, amount) kable(head(Icecream)) time signal noise amount 1.0 2.0 0.2318223 2.231822 1.2 2.4 -0.4895681 1.910432 1.5 3.0 0.5815205 3.581520 1.8 3.6 -0.0318453 3.568155 2.1 4.2 0.1716097 4.371610 2.1 4.2 -0.9288076 3.271192 5.1.5 What We Actually Get to See In reality, we do not see the signal and noise columns, we only see time and amount. From this, we need to estimate signal, without being thrown off by noise. ggplot(data=Icecream1, aes(x=time, y=amount)) + geom_point() + ggtitle(&quot;Icecream Dispensed&quot;) + xlab(&quot;Time Pressing Dispensor&quot;) + ylab(&quot;Amount Dispensed&quot;) The red line represents the “true” relationship between time and average amount dispensed. The blue line represents the least squares regression line, fit from the data. The blue line is an approximation of the red line. ggplot(data=Icecream1, aes(x=time, y=amount)) + geom_point() + ggtitle(&quot;Icecream Dispensed&quot;) + xlab(&quot;Time Pressing Dispensor&quot;) + ylab(&quot;Amount Dispensed&quot;) + stat_smooth(method=&quot;lm&quot;, se=FALSE) + geom_abline(slope=2, intercept=0, color=&quot;red&quot;) + annotate(&quot;text&quot;, label=&quot;y=2x&quot;, x= 3.5, y=6.5, size=10, color=&quot;red&quot;) 5.1.6 IceCream Model From Simulated Data IC_Model &lt;- lm(data=Icecream1, lm(amount~time)) summary(IC_Model) ## ## Call: ## lm(formula = lm(amount ~ time), data = Icecream1) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.8645 -0.3553 0.0685 0.2252 0.6963 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.1299 0.3968 -0.327 0.749 ## time 2.0312 0.1598 12.714 0.0000000104 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4527 on 13 degrees of freedom ## Multiple R-squared: 0.9256, Adjusted R-squared: 0.9198 ## F-statistic: 161.6 on 1 and 13 DF, p-value: 0.00000001042 5.1.7 Mathematical Form of Normal Error Regression Model The mathematical form of a normal error linear regression model is \\(Y_i = \\beta_0 + \\beta_1X_{i1}+ \\ldots + \\beta_pX_{ip} + \\epsilon_i\\), with \\(\\epsilon_i\\sim\\mathcal{N}(0,\\sigma)\\). Note that in place of \\(X_{ip}\\), we could have indicators for categories, or functions of \\(X_{ip}\\), such as \\(X_{ip}^2\\), \\(\\text{log}(X_{ip})\\), or \\(\\text{sin}(X_{ip})\\). 5.1.8 Parameters and Statistics We call the quantities \\(\\beta_0, \\beta_1, \\ldots, \\beta_p\\) parameters. They pertain to the true but unknown data generating mechanism. We call the estimates \\(b_0, b_1, \\ldots, b_p\\), statistics. They are calculated from our observed data. We use confidence intervals and hypothesis tests make statements about parameters, based on information provided by statistics. In reality, data almost never truly come from normal distributions, but the normal distributions are often useful in approximating real data distributions. As statistician George Box said, “All models are wrong, but some are useful.” 5.2 Inference in Normal Error Regression Model 5.2.1 Distribution of \\(t= \\frac{{b_j}}{\\text{SE}(b_j)}\\) We’ve already seen that we can use t-distributions to perform inference on regression model parameters (\\(b_j\\)’s)when sample sizes are large enough. When our data can reasonably be assumed to follow a normal error regression model, then we can use these t-distributions regardless of sample size. Important Fact: If \\(Y_i = \\beta_0 + \\beta_1X_{i1}+ \\ldots + \\beta_pX_{ip} + \\epsilon_i\\), with \\(\\epsilon_i\\sim\\mathcal{N}(0,\\sigma)\\), then \\[ t= \\frac{{b_j}}{\\text{SE}(b_j)} \\] follows a t-distribution. Confidence Interval for \\(\\beta_j\\) A 95% confidence interval for \\(\\beta_j\\) is given by \\(b_j \\pm t^*\\left({\\text{SE}(b_j)}\\right)\\), where \\(t^*\\) is chosen to achieve the desired confidence level. For a 95% confidence interval, use \\(t^*=2\\). Hypothesis test for \\(\\beta_j=0\\) If \\(Y_i = \\beta_0 + \\beta_1X_{i1}+ \\ldots + \\beta_pX_{ip} + \\epsilon_i\\), with \\(\\epsilon_i\\sim\\mathcal{N}(0,\\sigma)\\), then a test statistic for the null hypothesis: \\(\\beta_j = 0\\) is given by: \\[ t=\\frac{{b_j}}{\\text{SE}(b_j)}, \\] and calculate a p-value using a t-distribution. 5.2.2 F-Distribution An [F distribution] is a right-skewed distribution. It is defined by two parameters, \\(\\nu_1, \\nu_2\\), called numerator and denominator degrees of freedom. 5.2.3 Distribution of F-Statistic If \\(Y_i = \\beta_0 + \\beta_1X_{i1} + \\beta_2{X_i2} + \\ldots + \\beta_qX_{iq} + \\epsilon_i\\), with \\(\\epsilon_i\\sim\\mathcal{N}(0,\\sigma)\\), and \\(Y_i = \\beta_0 + \\beta_1X_{i1} + \\beta_2{X_i2} + \\ldots + \\beta_qX_{iq} + \\beta_{q+1}X_{i{q+1}} \\ldots + \\beta_pX_{ip}+ \\epsilon_i\\), is another proposed model, then \\[ F=\\frac{\\frac{\\text{Unexplained Variability in Reduced Model}-\\text{Unexplained Variability in Full Model}}{p-q}}{\\frac{\\text{Unexplained Variability in Full Model}}{n-(p+1)}} \\] follows an F-distribution. 5.2.4 Bear Weight by Season Recall Bear Weights by Season ggplot(data=Bears_Subset, aes(y=Weight, x=Season, fill=Season)) + geom_boxplot() + geom_jitter() summary(Bears_M_Season) ## ## Call: ## lm(formula = Weight ~ Season, data = Bears_Subset) ## ## Residuals: ## Min 1Q Median 3Q Max ## -178.84 -79.84 -29.02 54.98 309.16 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 204.84 17.16 11.939 &lt;0.0000000000000002 *** ## SeasonSpring -37.27 34.62 -1.076 0.284 ## SeasonSummer -29.81 24.71 -1.206 0.231 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 112.5 on 94 degrees of freedom ## Multiple R-squared: 0.02034, Adjusted R-squared: -0.0005074 ## F-statistic: 0.9757 on 2 and 94 DF, p-value: 0.3807 Bears_A_Season &lt;- aov(data=Bears_Subset, Weight~Season) summary(Bears_A_Season) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Season 2 24699 12350 0.976 0.381 ## Residuals 94 1189818 12658 5.2.5 Bears F-Test Illustration ts=0.976 gf_dist(&quot;f&quot;, df1=2, df2=94, geom = &quot;area&quot;, fill = ~ (abs(x)&lt; abs(ts)), show.legend=FALSE) + geom_vline(xintercept=c(ts), color=&quot;red&quot;) + xlab(&quot;t&quot;) p-value: 1-pf(ts, df1=2, df2=94) ## [1] 0.3806007 5.2.6 Comparison to Simulation Fstat &lt;- summary(Bears_M_Season)$fstatistic[1] Bears_Seasons_SimulationResultsPlot mean(FSim &gt; Fstat) ## [1] 0.3762 The p-value we obtained is very similar to the one we obtained using the simulation-based test. In this case, even though we had concerns about normality, they did not have much impact on the p-value from the F-distribution. The F-test is fairly robust to minor departures from normality. 5.3 Intervals for Predicted Values 5.3.1 Estimation and Prediction Recall the icecream dispensor that is known to dispense icecream at a rate of 2 oz. per second on average, with individual amounts varying according to a normal distribution with mean 0 and standard deviation 0.5 Consider the following two questions: On average, how much icecream will be dispensed for people who press the dispensor for 1.5 seconds? If a single person presses the dispensor for 1.5 seconds, how much icecream will be dispensed? The first question is one of estimation. The second pertains to prediction. 5.3.2 Uncertainty in Estimation and Prediction In estimation and prediction, we must think about two sources of variability. We are using data to estimate \\(\\beta_0\\) and \\(\\beta_1\\), which introduces sampling variability. Even if we did know \\(\\beta_0\\) and \\(\\beta_1\\), there is variability in individual observations, which follows a \\(\\mathcal{N}(0, \\sigma)\\) distribution. In an estimation problem, we only need to think about (1). When predicting the value of a single new observation, we need to think about both (1) and (2). Thus, intervals for predictions of individual observations carry more uncertainty and are wider than confidence intervals for \\(E(Y|X)\\). 5.3.3 Estimation in IC Example kable(t(round(Icecream1, 2))) time 1.00 1.20 1.50 1.80 2.10 2.10 2.30 2.50 2.60 2.80 2.90 2.90 3.1 3.20 3.60 amount 2.23 1.91 3.58 3.57 4.37 3.27 4.65 4.63 4.74 5.77 5.21 5.92 6.2 7.07 7.25 ggplot(data=Icecream1, aes(x=time, y=amount)) + geom_point() + ggtitle(&quot;Icecream Dispensed&quot;) + xlab(&quot;Time Pressing Dispensor&quot;) + ylab(&quot;Amount Dispensed&quot;) In the estimation setting, we are trying o determine the location of the regression line for the entire population. Uncertainty comes from the fact that we only have data from a sample. 5.3.4 Estimation in IC Example kable(t(round(Icecream1, 2))) time 1.00 1.20 1.50 1.80 2.10 2.10 2.30 2.50 2.60 2.80 2.90 2.90 3.1 3.20 3.60 amount 2.23 1.91 3.58 3.57 4.37 3.27 4.65 4.63 4.74 5.77 5.21 5.92 6.2 7.07 7.25 ggplot(data=Icecream1, aes(x=time, y=amount)) + geom_point() + ggtitle(&quot;Icecream Dispensed&quot;) + xlab(&quot;Time Pressing Dispensor&quot;) + ylab(&quot;Amount Dispensed&quot;) + geom_abline(slope=2, intercept=0, color=&quot;red&quot;) + stat_smooth(method=&quot;lm&quot;) 5.3.5 Recall Ice Cream Model Output summary(IC_Model) ## ## Call: ## lm(formula = lm(amount ~ time), data = Icecream1) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.8645 -0.3553 0.0685 0.2252 0.6963 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.1299 0.3968 -0.327 0.749 ## time 2.0312 0.1598 12.714 0.0000000104 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4527 on 13 degrees of freedom ## Multiple R-squared: 0.9256, Adjusted R-squared: 0.9198 ## F-statistic: 161.6 on 1 and 13 DF, p-value: 0.00000001042 b0 &lt;- IC_Model$coefficients[1] b1 &lt;- IC_Model$coefficients[2] s &lt;- sigma(IC_Model) 5.3.6 Estimation in SLR The first question: “On average, how much icecream will be dispensed for people who press the dispensor for 1.5 seconds?” is a question of estimation. It is of the form, for a given \\(X\\), on average what do we expect to be true of \\(Y\\). In the ice cream question, we can answer this exactly, since we know \\(\\beta_0\\) and \\(\\beta_1\\). In a real situation, we don’t know these and have to estimate them from the data, which introduces uncertainty. Confidence interval for \\(E(Y | (X=x))\\): \\[ \\begin{aligned} &amp; b_0+b_1x^* \\pm t^*SE(\\hat{Y}|X=x^*) \\\\ &amp; b_0+b_1x^* \\pm t^*\\sqrt{\\widehat{Var}(\\hat{Y}|X=x^*)} \\end{aligned} \\] The second question is a question of prediction. Even if we knew the true values of \\(beta_0\\) and \\(\\beta_1\\), we would not be able to given the exact amount dispensed for an individual user, since this varies between users. Prediction interval for \\(E(Y | (X=x))\\): \\[ \\begin{aligned} &amp; b_0+b_1x^* \\pm t^*\\sqrt{\\widehat{Var}(\\hat{Y}|X=x^*) + s^2} \\end{aligned} \\] The extra \\(s^2\\) in the calculation of prediction variance comes from the uncertainty associated with individual observations. 5.3.7 Confidence Interval in R predict(IC_Model, newdata=data.frame(time=1.5), interval = &quot;confidence&quot;, level=0.95) ## fit lwr upr ## 1 2.916965 2.523728 3.310201 We are 95% confident that the mean amount of ice cream dispensed when the dispensor is held for 1.5 seconds is between 2.52 and 3.31 oz. 5.3.8 Prediction Interval in R predict(IC_Model, newdata=data.frame(time=1.5), interval = &quot;prediction&quot;, level=0.95) ## fit lwr upr ## 1 2.916965 1.862832 3.971097 We are 95% confident that in individual who holds the dispensor for 1.5 seconds will get between 1.86 and 3.97 oz of ice cream. 5.3.9 Confidence and Prediction Intervals The prediction interval (in red) is wider than the confidence interval (in blue), since it must account for variability between individuals, in addition to sampling variability. 5.3.10 Confidence and Prediction Bands 5.3.11 Calculations (Optional) In simple linear regression, \\[ \\begin{aligned} SE(\\hat{Y}|X=x^*) = \\sqrt{\\frac{1}{n}+ \\frac{(x^*-\\bar{x})^2}{\\displaystyle\\sum_{i=1}^n(x_i-\\bar{x})^2}} \\end{aligned} \\] Thus a confidence interval for \\(E(Y | (X=x))\\) is: \\[ \\begin{aligned} &amp; b_0+b_1x^* \\pm t^*SE(\\hat{Y}|X=x^*) \\\\ &amp; = b_0+b_1x^* \\pm 2s\\sqrt{\\frac{1}{n}+ \\frac{(x^*-\\bar{x})^2}{\\displaystyle\\sum_{i=1}^n(x_i-\\bar{x})^2}} \\ \\end{aligned} \\] A prediction interval for \\(E(Y | (X=x))\\) is: \\[\\beta_0 + \\beta_1x^* \\pm t^* s\\sqrt{\\left(\\frac{1}{n}+ \\frac{(x^*-\\bar{x})^2}{\\displaystyle\\sum_{i=1}^n(x_i-\\bar{x})^2}\\right) + 1} \\] Calculations in Icecream example For \\(x=1.5\\), a confidence interval is: \\[ \\begin{aligned} &amp; b_0+b_1x^* \\pm t^*SE(\\hat{Y}|X=x^*) \\\\ &amp; = b_0+b_1x^* \\pm 2s\\sqrt{\\frac{1}{n}+ \\frac{(x^*-\\bar{x})^2}{\\displaystyle\\sum_{i=1}^n(x_i-\\bar{x})^2}} \\\\ &amp; = -0.1299087 + 2.0312489 \\pm 20.4527185 \\sqrt{\\frac{1}{15}+ \\frac{(1.5-2.3733)^2}{8.02933}} \\end{aligned} \\] A prediction interval is: \\[ \\begin{aligned} &amp; b_0+b_1x^* \\pm t^*SE(\\hat{Y}|X=x^*) \\\\ &amp; = b_0+b_1x^* \\pm 2s\\sqrt{\\frac{1}{n}+ \\frac{(x^*-\\bar{x})^2}{\\displaystyle\\sum_{i=1}^n(x_i-\\bar{x})^2}} \\\\ &amp; = -0.1299087 + 2.0312489 \\pm 20.4527185 \\sqrt{\\left(\\frac{1}{15}+ \\frac{(1.5-2.3733)^2}{8.02933}\\right)+1} \\end{aligned} \\] 5.3.12 Intervals in Cars Model What is a reasonable range for the average price of all new 2015 cars that can accelerate from 0 to 60 mph in 7 seconds? If a car I am looking to buy can accelerate from 0 to 60 mph in 7 seconds, what price range should I expect? 5.3.13 Cars Confidence Interval What is a reasonable range for the average price of all new 2015 cars that can accelerate from 0 to 60 mph in 7 seconds? predict(Cars_M_A060, newdata=data.frame(Acc060=7), interval=&quot;confidence&quot;, level=0.95) ## fit lwr upr ## 1 39.5502 37.21856 41.88184 We are 95% confident that the average price of new 2015 cars that accelerate from 0 to 60 mph in 7 seconds is between 37.2 and 41.9 thousand dollars. Note: this is a confidence interval for \\(\\beta_0 -7\\beta_1\\). 5.3.14 Cars Prediction Interval If a car I am looking to buy can accelerate from 0 to 60 mph in 7 seconds, what price range should I expect? predict(Cars_M_A060, newdata=data.frame(Acc060=7), interval=&quot;prediction&quot;, level=0.95) ## fit lwr upr ## 1 39.5502 18.19826 60.90215 We are 95% confident that a single new 2015 car that accelerates from 0 to 60 mph in 7 seconds will cost between 18.2 and 60.9 thousand dollars. 5.3.15 Cars Interval Visualization 5.3.16 Lakes Questions of Interest Calculate an interval that we are 95% confident contains the mean mercury concentration for all lakes in Northern Florida. Do the same for Southern Florida. Calculate an interval that we are 95% confident contains the mean mercury concentration for an individual lake in Northern Florida. Do the same for a lake in Southern Florida. 5.3.17 Lakes Confidence Interval predict(Lakes_M, newdata=data.frame(Location=c(&quot;N&quot;, &quot;S&quot;)), interval=&quot;confidence&quot;, level=0.95) ## fit lwr upr ## 1 0.4245455 0.3137408 0.5353501 ## 2 0.6965000 0.5541689 0.8388311 We are 95% confident that the mean mercury level in North Florida is between 0.31 and 0.54 ppm. We are 95% confident that the mean mercury level in South Florida is between 0.55 and 0.84 ppm. Note: these are confidence intervals for \\(\\beta_0\\), and \\(\\beta_0 + \\beta_1\\), respectively. 5.3.18 Lakes Prediction Interval predict(Lakes_M, newdata=data.frame(Location=c(&quot;N&quot;, &quot;S&quot;)), interval=&quot;prediction&quot;, level=0.95) ## fit lwr upr ## 1 0.4245455 -0.22155101 1.070642 ## 2 0.6965000 0.04425685 1.348743 We are 95% confident that an individual lake in North Florida will have mercury level between 0 and 1.07 ppm. We are 95% confident that the mean mercury level in South Florida is between 0.04 and 1.35 ppm. Note that the normality assumption, which allows for negative mercury levels leads to a somewhat nonsensical result. 5.4 Regression Model Assumptions 5.4.1 What We’re Assuming Let’s think carefully about what we are assuming in order to use the hypothesis tests and confidence intervals provided in R. The statement \\(Y_i = \\beta_0 + \\beta_1X_{i1}+ \\ldots + \\beta_pX_{ip} + \\epsilon_i\\), with \\(\\epsilon_i\\sim\\mathcal{N}(0,\\sigma)\\) implies the following: Linearity: the expected value of \\(Y\\) is a linear function of \\(X_1, X_2, \\ldots, X_p\\). Normality: Given the values of \\(X_1, X_2, \\ldots, X_p\\), \\(Y\\) follows a normal distribution. Constant Variance: Regardless of the values of \\(X_1, X_2, \\ldots, X_p\\), the variance (or standard deviation) in the normal distribution for \\(Y\\) is the same. Independence: each observation is independent of the rest. 5.4.2 Illustration of Model Assumptions We know that these assumptions held true in the ice cream example, because we generated the data in a way that was consistent with these. In practice, we will have only the data, without knowing the exact mechanism that produced it. We should only rely on the t-distribution based p-values and confidence intervals in the R output if these appear to be reasonable assumptions. Of course, these assumptions will almost never be truly satisfied, but they should at least be a reasonable approximation if we are to draw meaningful conclusions. 5.4.3 Checking Model Assumptions The following plots are useful when assessing the appropriateness of the normal error regression model. Scatterplot of residuals against predicted values Histogram of standardized residuals heavy skewness indicates a problem with normality assumption Normal quantile plot severe departures from diagonal line indicate problem with normality assumption 5.4.4 Residual vs Predicted Plots Useful for detecting issues with the linearity or constant variance assumption. curvature indicates a problem with linearity assumption “funnel” or “megaphone” shape indicates problem with constant variance assumption P1 &lt;- ggplot(data=Violations, aes(y=no_viol_Model$residuals, x=no_viol_Model$fitted.values)) + geom_point() + ggtitle(&quot;No Violation&quot;) + xlab(&quot;Predicted Values&quot;) + ylab(&quot;Residuals&quot;) P2 &lt;- ggplot(data=Violations, aes(y=lin_viol_Model$residuals, x=no_viol_Model$fitted.values)) + geom_point() + ggtitle(&quot;Violation of Linearity Assumption&quot;)+ xlab(&quot;Predicted Values&quot;) + ylab(&quot;Residuals&quot;) P3 &lt;- ggplot(data=Violations, aes(y=cvar_viol_Model$residuals, x=no_viol_Model$fitted.values)) + geom_point() + ggtitle(&quot;Violation of Constant Variance Assumption&quot;)+ xlab(&quot;Predicted Values&quot;) + ylab(&quot;Residuals&quot;) grid.arrange(P1, P2, P3, ncol=3) If there is only one explanatory variable, plotting the residuals against that variable reveals the same information. 5.4.5 Histogram of Residuals Useful for assessing normality assumption. Severe skewness indicates violation of normality assumption P1 &lt;- ggplot(data=Violations, aes(x=no_viol_Model$residuals)) + geom_histogram() + ggtitle(&quot;No Violation&quot;) +xlab(&quot;Residual&quot;) P2 &lt;- ggplot(data=Violations, aes(x=norm_viol_Model$residuals)) + geom_histogram() + ggtitle(&quot;Violation of Normality Assumption&quot;) + xlab(&quot;Residual&quot;) grid.arrange(P1, P2, ncol=2) 5.4.6 Normal Quantile-Quantile (QQ) Plot Sometimes histograms can be inconclusive, especially when sample size is smaller. A Normal quantile-quantile plot displays quantiles of the residuals against the expected quantiles of a normal distribution. Severe departures from diagonal line indicate a problem with normality assumption. P1 &lt;- ggplot(data=Violations, aes(sample = scale(no_viol_Model$residuals))) + stat_qq() + stat_qq_line() + xlab(&quot;Normal Quantiles&quot;) + ylab(&quot;Residual Quantiles&quot;) + ggtitle(&quot;No Violation&quot;) + xlim(c(-4,4)) + ylim(c(-4,4)) P2 &lt;- ggplot(data=Violations, aes(sample = scale(norm_viol_Model$residuals))) + stat_qq() + stat_qq_line() + xlab(&quot;Normal Quantiles&quot;) + ylab(&quot;Residual Quantiles&quot;) + ggtitle(&quot;Violation of Normality Assumption&quot;) + xlim(c(-4,4)) + ylim(c(-4,4)) grid.arrange(P1, P2, ncol=2) 5.4.7 Checking Model Assumptions - Independence Independence is often difficult to assess through plots of data, but it is important to think about whether there were factors in the data collection that would cause some observations to be more highly correlated than others. For example: People in the study who are related. Some plants grown in the same greenhouse and others in different greenhouses. Some observations taken in same time period and others at different times. All of these require more complicated models that account for correlation using spatial and time structure. 5.4.8 Summary of Checks for Model Assumptions Model assumption How to detect violation Linearity Curvature in residual plot Constant Variance Funnel shape in residual plot Normality Skewness in histogram of residuals or departure from diag. line in QQ plot Independence No graphical check, carefully examine data collection 5.4.9 Impact of Model Assumption Violations Model assumption Impact Linearity predictions and intervals unreliable Constant Variance predictions still reliable; some intervals will be too wide and others too narrow, prediction intervals heavily affected, confidence intervals may be affected, especially when sample size is small Normality predictions still reliable; intervals will be symmetric when they shouldn’t be , prediction intervals heavily affected, confidence intervals may be affected, especially when sample size is small Independence predictions unreliable and intervals unreliable 5.4.10 Cars Model Assumptions Recall the regression line estimating the relationship between a car’s price and acceleration time. This line was calculated using a sample of 110 cars, released in 2015. \\(\\text{Price}_i = \\beta_0 + \\beta_1\\times\\text{Acc. Time}_i + \\epsilon_i\\), where \\(\\epsilon_i\\sim\\mathcal{N}(0, \\sigma)\\). The model assumes: Linearity: the expected price of a car is a linear function of its acceleration time. Normality: for any given acceleration time, the prices of actual cars follow a normal distribution. For example the distribution of prices for all cars that accelerate from 0 to 60 in 8 seconds is normal, and so is the distribution of prices of cars that accelerate from 0 to 60 in 10 seconds (though these normal distributions have different means.) Constant Variance: the normal distribution for prices is the same for all acceleration times. Independence: no two cars are any more alike than any others. We should only use the p-values and confidence intervals provided by R, which depend on the t-distribution approximation, if we believe these assumptions are reasonable. 5.4.11 Cars Assumptions Check P1 &lt;- ggplot(data=Cars2015, aes(y=Cars_M_A060$residuals, x=Cars_M_A060$fitted.values)) + geom_point() + ggtitle(&quot;Cars Model Residual Plot&quot;) + xlab(&quot;Predicted Values&quot;) + ylab(&quot;Residuals&quot;) P2 &lt;- ggplot(data=Cars2015, aes(x=Cars_M_A060$residuals)) + geom_histogram() + ggtitle(&quot;Histogram of Residuals&quot;) + xlab(&quot;Residual&quot;) P3 &lt;- ggplot(data=Cars2015, aes(sample = scale(Cars_M_A060$residuals))) + stat_qq() + stat_qq_line() + xlab(&quot;Normal Quantiles&quot;) + ylab(&quot;Residual Quantiles&quot;) + ggtitle(&quot;Cars Model QQ Plot&quot;) grid.arrange(P1, P2, P3, ncol=3) There is a funnel-shape in the residual plot, indicating a concern about the constant variance assumption. There appears to be more variability in prices for more expensive cars than for cheaper cars. There is also some concern about the normality assumption, as the histogram and QQ plot indicate right-skew in the residuals. Since the sample size is large and the violations aren’t too severe, these concerns probably won’t have much impact on tests and confidence intervals associated with the slope and intercept of the regression line, but they will likely lead to unreliable prediction intervals. 5.4.12 Model for Mercury Florida Lakes Recall our sample of 53 Florida Lakes, 33 in the north, and 20 in the south. \\(\\text{Mercury}_i = \\beta_0 + \\beta_1\\times\\text{I}_{\\text{South}_i} + \\epsilon_i\\), where \\(\\epsilon_i\\sim\\mathcal{N}(0, \\sigma)\\). LakesBP 5.4.13 Lakes Model Assumptions Linearity: there is an expected mercury concentration for lakes in North Florida, and another for lakes in South Florida. Normality: mercury concentrations of individual lakes in the north are normally distributed, and so are mercury concentrations in the south. These normal distributions might have different means. Constant Variance: the normal distribution for mercury concentrations in North Florida has the same standard deviation as the normal distribution for mercury concentrations in South Florida Independence: no two lakes are any more alike than any others. We might have concerns about this, do to some lakes being geographically closer to each other than others. We should only use the p-values and confidence intervals provided by R, which depend on the t-distribution approximation, if we believe these assumptions are reasonable. 5.4.14 Lakes Assumptions Check P1 &lt;- ggplot(data=FloridaLakes, aes(y=Lakes_M$residuals, x=Lakes_M$fitted.values)) + geom_point() + ggtitle(&quot;Lakes Model Residual Plot&quot;) + xlab(&quot;Predicted Values&quot;) + ylab(&quot;Residuals&quot;) P2 &lt;- ggplot(data=FloridaLakes, aes(x=Lakes_M$residuals)) + geom_histogram() + ggtitle(&quot;Lakes of Residuals&quot;) + xlab(&quot;Residual&quot;) P3 &lt;- ggplot(data=FloridaLakes, aes(sample = scale(Lakes_M$residuals))) + stat_qq() + stat_qq_line() + xlab(&quot;Normal Quantiles&quot;) + ylab(&quot;Residual Quantiles&quot;) + ggtitle(&quot;Lakes Model QQ Plot&quot;) grid.arrange(P1, P2, P3, ncol=3) Notice that we see two lines of predicted values and residuals. This makes sense since all lakes in North Florida will have the same predicted value, as will all lakes in Southern Florida. There appears to be a little more variability in residuals for Southern Florida (on the right), than Northern Florida, causing some concern about the constant variance assumption. Overall, though, the assumptions seem mostly reasonable. We shouldn’t be concerned about using theory-based hypothesis tests or confidence intervals for the mean mercury level or difference in mean mercury levels. There might be some concern that prediction intervals could be either too wide or too narrow, but this is not a major concern, since the constant variance assumption is not severe. 5.4.15 General Comments on Model Assumptions We shouldn’t think about model assumptions being satisfied as a yes/no question. In reality assumptions are never perfectly satisfied, so it’s a question of how severe violations must be in order to impact results. This is context dependent. A model might be reasonable for certain purposes (i.e. confidence interval for \\(\\beta_1\\)) but not for others (i.e. prediction of response value for new observation). When model assumptions are a concern, consider a using a transformation of the data or a more flexible technique, such as a nonparametric method or statistical machine learning algorithm. We’ll talk more about these soon. Remember that all statistical techniques are approximations 5.5 Transformations 5.5.1 Cars Assumptions Check P1 &lt;- ggplot(data=Cars2015, aes(y=Cars_M_A060$residuals, x=Cars_M_A060$fitted.values)) + geom_point() + ggtitle(&quot;Cars Model Residual Plot&quot;) + xlab(&quot;Predicted Values&quot;) + ylab(&quot;Residuals&quot;) P2 &lt;- ggplot(data=Cars2015, aes(x=Cars_M_A060$residuals)) + geom_histogram() + ggtitle(&quot;Histogram of Residuals&quot;) + xlab(&quot;Residual&quot;) P3 &lt;- ggplot(data=Cars2015, aes(sample = scale(Cars_M_A060$residuals))) + stat_qq() + stat_qq_line() + xlab(&quot;Normal Quantiles&quot;) + ylab(&quot;Residual Quantiles&quot;) + ggtitle(&quot;Cars Model QQ Plot&quot;) grid.arrange(P1, P2, P3, ncol=3) There is a funnel-shape in the residual plot, indicating a concern about the constant variance assumption. There appears to be more variability in prices for more expensive cars than for cheaper cars. There is also some concern about the normality assumption, as the histogram and QQ plot indicate right-skew in the residuals. 5.5.2 Confidence Interval for \\(\\beta_1\\) in Cars Example confint(Cars_M_A060, level=0.95) ## 2.5 % 97.5 % ## (Intercept) 79.888995 99.918163 ## Acc060 -8.429027 -5.957651 We are 95% confident that the average price of a new 2015 car decreases between 8.43 and 5.96 thousand dollars for each additional second it takes to accelerate from 0 to 60 mph. Bootstrap Confidence Interval for \\(\\beta_1\\): q.025 &lt;- quantile(Cars_Bootstrap_Results_Acc060$b1, 0.025) q.975 &lt;- quantile(Cars_Bootstrap_Results_Acc060$b1, 0.975) c(q.025, q.975) ## 2.5% 97.5% ## -8.797594 -5.696359 The bootstrap confidence interval is slightly wider than the one based on the t-approximation. This difference can be attributed to the questions about the constant variance and normality assumptions. 5.5.3 Confidence and Prediction Intervals predict(Cars_M_A060, newdata=data.frame(Acc060=7), interval=&quot;confidence&quot;) ## fit lwr upr ## 1 39.5502 37.21856 41.88184 predict(Cars_M_A060, newdata=data.frame(Acc060=10), interval=&quot;confidence&quot;) ## fit lwr upr ## 1 17.97018 14.71565 21.22472 We are 95% confident that the mean price for all cars that can accelerate from 0 to 60 mph in 7 seconds is between 37.2 and 41.9 thousand dollars. We are 95% confident that the mean price for all cars that can accelerate from 0 to 60 mph in 10 seconds is between 14.7 and 22.2 thousand dollars. 5.5.4 Prediction Intervals for Expected Price Given Acc060 predict(Cars_M_A060, newdata=data.frame(Acc060=7), interval=&quot;prediction&quot;) ## fit lwr upr ## 1 39.5502 18.19826 60.90215 predict(Cars_M_A060, newdata=data.frame(Acc060=10), interval=&quot;prediction&quot;) ## fit lwr upr ## 1 17.97018 -3.502148 39.44252 We are 95% confident that a single car that can accelerate from 0 to 60 mph in 7 seconds will cost between 18.2 thousand and 60.9 thousand dollars. We are 95% confident that a single car that can accelerate from 0 to 60 mph in 10 seconds will cost between 0 thousand and 39.4 thousand dollars. 5.5.5 Confidence and Prediction Interval Illustration 5.5.6 Concerns about Intervals and Model Assumptions The confidence and prediction intervals for cars that take 7 and 10 seconds to accelerate have similar widths. This seems inconsistent with the data, which showed more variability about prices for more expensive cars than less expensive ones. - The intervals are computed using same value for \\(s\\), which is a result of the constant variance assumption. Our residual plot showed us this assumption might not be valid in this situation. The confidence and prediction intervals are symmetric about the expected price, even though the distribution of residuals was right-skewed. - This is the result of the normality assumption, which our histogram and QQ-plot showed might not be valid here. Since we had concerns about the model assumptions, the intervals might not be reliable. We saw that the confidence interval for \\(\\beta_1\\) differed somewhat, but not terribly, from the one produced via Bootstrap. It is harder to tell the degree to which the confidence and prediction intervals for price for a given acceleration time might be off, but we should treat these with caution. 5.5.7 Modeling Log Price When residual plots yield model inadequacy, we might try to correct these by applying a transformation to the response variable. When working a nonnegative, right-skewed response variable, it is often helpful to work with the logarithm of the response variable. Note: In R, log() denotes the natural (base e) logarithm, often denoted ln(). We can actually use any logarithm, but the natural logarithm is commonly used. 5.5.8 Plot of LogPrice and Acc060 ggplot(data=Cars2015, aes(x=Acc060, y=log(LowPrice))) + geom_point() + xlab(&quot;Acceleration Time&quot;) + ylab(&quot;Log of Price&quot;) + ggtitle(&quot;Acceleration Time and Log Price&quot;) + stat_smooth(method=&quot;lm&quot;, se=FALSE) 5.5.9 Model for Log Transform Cars_M_Log &lt;- lm(data=Cars2015, log(LowPrice)~Acc060) summary(Cars_M_Log) ## ## Call: ## lm(formula = log(LowPrice) ~ Acc060, data = Cars2015) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.84587 -0.19396 0.00908 0.18615 0.53350 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.13682 0.13021 39.45 &lt;0.0000000000000002 *** ## Acc060 -0.22064 0.01607 -13.73 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.276 on 108 degrees of freedom ## Multiple R-squared: 0.6359, Adjusted R-squared: 0.6325 ## F-statistic: 188.6 on 1 and 108 DF, p-value: &lt; 0.00000000000000022 5.5.10 LogPrice Model: What We’re Assuming Linearity: the log of expected price of a car is a linear function of its acceleration time. Normality: for any given acceleration time, the log of prices of actual cars follow a normal distribution. Constant Variance: the normal distribution for log of price is the same for all acceleration times. Independence: no two cars are any more alike than any others. We should only use the p-values and confidence intervals provided by R, which depend on the t-distribution approximation, if we believe these assumptions are reasonable. 5.5.11 Model Assumption Check for Transformed Model P1 &lt;- ggplot(data=Cars2015, aes(y=Cars_M_Log$residuals, x=Cars_M_Log$fitted.values)) + geom_point() + ggtitle(&quot;Cars Log Model Residual Plot&quot;) + xlab(&quot;Predicted Values&quot;) + ylab(&quot;Residuals&quot;) P2 &lt;- ggplot(data=Cars2015, aes(x=Cars_M_Log$residuals)) + geom_histogram() + ggtitle(&quot;Histogram of Residuals&quot;) + xlab(&quot;Residual&quot;) P3 &lt;- ggplot(data=Cars2015, aes(sample = scale(Cars_M_Log$residuals))) + stat_qq() + stat_qq_line() + xlab(&quot;Normal Quantiles&quot;) + ylab(&quot;Residual Quantiles&quot;) + ggtitle(&quot;Cars Model QQ Plot&quot;) grid.arrange(P1, P2, P3, ncol=3) There is still some concern about constant variance, though perhaps not as much. The normality assumption appears more reasonable. 5.5.12 Model for Log of Car Price \\[ \\widehat{\\text{Log Price}} = b_0 + b_1\\times \\text{Acc060} \\] Thus \\[ \\begin{aligned} \\widehat{\\text{Price}} &amp; = e^{b_0 + b_1\\times \\text{Acc060} } \\\\ &amp; e^{b_0}e^{b_1 \\times \\text{Acc060}} \\\\ &amp; e^{b_0}(e^{b_1})^\\text{Acc060} \\end{aligned} \\] 5.5.13 Log Model Predictions Prediction Equation: \\[ \\begin{aligned} \\widehat{\\text{Price}} &amp; = e^{5.13582}e^{-0.22064 \\times \\text{Acc060}} \\end{aligned} \\] Predicted price for car that takes 7 seconds to accelerate: \\[ \\begin{aligned} \\widehat{\\text{Price}} &amp; = e^{5.13582}e^{-0.22064 \\times \\text{7}} = 36.3 \\end{aligned} \\] Predicted price for car that takes 10 seconds to accelerate: \\[ \\begin{aligned} \\widehat{\\text{Price}} &amp; = e^{5.13582}e^{-0.22064 \\times \\text{10}}= 18.7 \\end{aligned} \\] Predictions are for log(Price), so we need to exponentiate. predict(Cars_M_Log, newdata=data.frame(Acc060=c(7))) ## 1 ## 3.592343 exp(predict(Cars_M_Log, newdata=data.frame(Acc060=c(7)))) ## 1 ## 36.31908 A car that accelerates from 0 to 60 mph in 7 seconds is expected to cost 36.3 thousand dollars. 5.5.14 Log Model Interpretations \\[ \\begin{aligned} \\widehat{\\text{Price}} &amp; = e^{b_0 + b_1\\times \\text{Acc060} } \\\\ &amp; e^{b_0}e^{b_1 \\times \\text{Acc060}} \\\\ &amp; e^{b_0}(e^{b_1})^\\text{Acc060} \\end{aligned} \\] \\(e^{b_0}\\) is theoretically the expected price of a car that can accelerate from 0 to 60 mph in no time, but this is not a meaningful interpretation. For each additional second it takes a car to accelerate, price is expected to multiply by a factor of \\(e^{b_1}\\). For each additional second in acceleration time, price is expected to multiply by a a factor of \\(e^{-0.22} = 0.80\\). Thus, each 1-second increase in acceleration time is estimated to be associated with a 20% drop in price, on average. 5.5.15 Log Model CI for \\(\\beta_0\\), \\(\\beta_1\\) confint(Cars_M_Log) ## 2.5 % 97.5 % ## (Intercept) 4.8787105 5.3949208 ## Acc060 -0.2524862 -0.1887916 We are 95% confident that the price of a car changes, on average, by multiplicative factor between \\(e^{-0.252} = 0.7773\\) and \\(e^{-0.189}=0.828\\) for each additional second in acceleration time. That is, we believe the price decreases between 17% and 23% on average for each additional second in acceleration time. 5.5.16 Log Model CI for Expected Response predict(Cars_M_Log, newdata=data.frame(Acc060=c(7)), interval=&quot;confidence&quot;) ## fit lwr upr ## 1 3.592343 3.53225 3.652436 exp(predict(Cars_M_Log, newdata=data.frame(Acc060=c(7)), interval=&quot;confidence&quot;)) ## fit lwr upr ## 1 36.31908 34.20083 38.56852 We are 95% confident that the mean price amoung all cars that accelerate from 0 to 60 mph in 7 seconds is between \\(e^{3.53225} =34.2\\) and \\(e^{3.652436}=38.6\\) thousand dollars. 5.5.17 Log Model Prediction Interval predict(Cars_M_Log, newdata=data.frame(Acc060=c(7)), interval=&quot;prediction&quot;) ## fit lwr upr ## 1 3.592343 3.042041 4.142645 exp(predict(Cars_M_Log, newdata=data.frame(Acc060=c(7)), interval=&quot;prediction&quot;)) ## fit lwr upr ## 1 36.31908 20.94796 62.96917 We are 95% confident that the expected price for a car that accelerates from 0 to 60 mph in 7 seconds is between \\(e^{3.04} =20.9\\) and \\(e^{4.14}=63.9\\) thousand dollars. 5.5.18 Confidence Interval Comparison 95% Confidence interval for average price of cars that take 7 seconds to accelerate: Original Model: predict(Cars_M_A060, newdata=data.frame(Acc060=7), interval=&quot;confidence&quot;, level=0.95) ## fit lwr upr ## 1 39.5502 37.21856 41.88184 Transformed Model: exp(predict(Cars_M_Log, newdata=data.frame(Acc060=c(7)), interval=&quot;confidence&quot;, level=0.95)) ## fit lwr upr ## 1 36.31908 34.20083 38.56852 5.5.19 Prediction Interval Comparison 95% Prediction interval for price of an individual car that takes 7 seconds to accelerate: Original Model: predict(Cars_M_A060, newdata=data.frame(Acc060=7), interval=&quot;prediction&quot;, level=0.95) ## fit lwr upr ## 1 39.5502 18.19826 60.90215 Transformed Model: exp(predict(Cars_M_Log, newdata=data.frame(Acc060=c(7)), interval=&quot;prediction&quot;, level=0.95)) ## fit lwr upr ## 1 36.31908 20.94796 62.96917 Notice that the transformed interval is not symmetric and allows for a longer “tail” on the right than the left. 5.5.20 Log Model Visualization The log model suggests an nonlinear trend in price with respect to acceleration time and gives wider confidence and prediction intervals for cars that accelerate faster and tend to be more expensive. It also gives non-symmetric intervals. These results appear to be consistent with the observed data. 5.5.21 Comments on Transformations We could have used another transformation, such as \\(\\sqrt{\\text{Price}}\\) The log tranform leads to a nice interpretation involving percent change. Other transformations might yield better predictions, but are often hard to interpret. There is often a tradeoff between model complexity and interpretability. We’ll talk more about this. We did an example of a transformation in a model with a single explanatory variable. If the explanatory variable is categorical: - \\(e^{b_0}\\) represents the expected response in the baseline category - \\(e^{b_j}\\) represents the number of times larger the expected response in category \\(j\\) is, compared to the baseline category. When working with multiple regression models, it is still important to mention holding other variables constant when interpreting parameters associated with one of the variables. 5.6 Responsible Statistical Inference 5.6.1 Statistical Significance vs Practical Importance “(S)cientists have embraced and even avidly pursued meaningless differences solely because they are statistically significant, and have ignored important effects because they failed to pass the screen of statistical significance…It is a safe bet that people have suffered or died because scientists (and editors, regulators, journalists and others) have used significance tests to interpret results, and have consequently failed to identify the most beneficial courses of action.” -ASA statement on p-values, 2016 5.6.2 What a p-value tells us Performing responsible statistical inference requires understanding what p-values do and do not tell us, and how they should and should not be interpreted. A low p-value tells us that the data we observed are inconsistent with our null hypothesis or some assumption we make in our model. A large p-value tells us that the data we observed could have plausibly been obtained under our supposed model and null hypothesis. A p-value never provides evidence supporting the null hypothesis, it only tells us the strength of evidence against it. A p-value is impacted by the size of the difference between group, or change per unit increase (effect size) the amount of variability in the data the sample size Sometimes, a p-value tells us more about sample size, than relationship we’re actually interested in. A p-value does not tell us the “size” of a difference or effect, or whether it is practically meaningful. 5.6.3 Flights from New York to Chicago A travelor lives in New York and wants to fly to Chicago. They consider flying out of two New York airports: Newark (EWR) LaGuardia (LGA) We have data on the times of flights from both airports to Chicago’s O’Hare airport from 2013 (more than 14,000 flights). Assuming these flights represent a random sample of all flights from these airports to Chicago, consider how the traveler might use this information to decide which airport to fly out of. library(nycflights13) data(flights) flights$origin &lt;- as.factor(flights$origin) flights$dest &lt;- as.factor(flights$dest) We’ll create a dataset containing only flights from Newark and Laguardia to O’Hare, and only the variables we’re interested in. Flights_NY_CHI &lt;- flights %&gt;% filter(origin %in% c(&quot;EWR&quot;, &quot;LGA&quot;) &amp; dest ==&quot;ORD&quot;) %&gt;% select(origin, dest, air_time) 5.6.4 Visualizing New York to Chicago Flights p1 &lt;- ggplot(data=Flights_NY_CHI, aes(x=air_time, fill=origin, color=origin)) + geom_density(alpha=0.2) + ggtitle(&quot;Flight Time&quot;) p2 &lt;- ggplot(data=Flights_NY_CHI, aes(x=air_time, y=origin)) + geom_boxplot() + ggtitle(&quot;Flight Time&quot;) grid.arrange(p1, p2, ncol=2) library(knitr) T &lt;- Flights_NY_CHI %&gt;% group_by(origin) %&gt;% summarize(Mean_Airtime = mean(air_time, na.rm=TRUE), SD = sd(air_time, na.rm=TRUE), n=sum(!is.na(air_time))) kable(T) origin Mean_Airtime SD n EWR 113.2603 9.987122 5828 LGA 115.7998 9.865270 8507 Question: If you were flying from New York to Chicago, would this information influence which airport you would fly out of? If so, which would you be more likely to choose? 5.6.5 Model for Airlines Data M_Flights &lt;- lm(data=Flights_NY_CHI, air_time~origin) summary(M_Flights) ## ## Call: ## lm(formula = air_time ~ origin, data = Flights_NY_CHI) ## ## Residuals: ## Min 1Q Median 3Q Max ## -26.26 -7.26 -1.26 5.20 84.74 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 113.2603 0.1299 872.06 &lt;0.0000000000000002 *** ## originLGA 2.5395 0.1686 15.06 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 9.915 on 14333 degrees of freedom ## (622 observations deleted due to missingness) ## Multiple R-squared: 0.01558, Adjusted R-squared: 0.01551 ## F-statistic: 226.9 on 1 and 14333 DF, p-value: &lt; 0.00000000000000022 5.6.6 Confidence Interval for Flights confint(M_Flights) ## 2.5 % 97.5 % ## (Intercept) 113.00572 113.514871 ## originLGA 2.20905 2.869984 Flights from LGA are estimated to take 2.5 minutes longer than flights from EWR on average. The very low p-value provides strong evidence of a difference in mean flight time. We are 95% confident that flights from LGA to ORD take between 2.2 and 2.9 minutes longer, on average, than flights from EWR to ORD. 5.6.7 Flights Conclusions? Although we have a low p-value, indicating a discernable difference, the size of this difference (2-3 minutes in airtime) is very small. A travelor would most likely have other, more important considerations when deciding which airport to fly from. The low p-value is due to the very large sample size, rather than the size of the difference. Note: there is also some question about whether it is appropriate to use a hypothesis test or confidence interval here at all. We have data on all flights in 2013, so one could argue that we have the entire population already. Perhaps, we could view this as a sample and generalize to flights in other years, though conditions change, so it is not clear that these flights from 2013 would be representative of flights in other years. 5.6.8 Smoking and Birthweight Example We consider data on the relationship between a pregnant mother’s smoking and the birthweight of the baby. Data come from a sample of 80 babies born in North Carolina in 2004. Thirty of the mothers were smokers, and fifty were nonsmokers. p1 &lt;- ggplot(data=NCBirths, aes(x=weight, fill=habit, color=habit)) + geom_density(alpha=0.2) + ggtitle(&quot;Birthweight and Smoking&quot;) p2 &lt;- ggplot(data=NCBirths, aes(x=weight, y=habit)) + geom_boxplot() + ggtitle(&quot;Birthweight and Smoking&quot;) grid.arrange(p1, p2, ncol=2) library(knitr) T &lt;- NCBirths %&gt;% group_by(habit) %&gt;% summarize(Mean_Weight = mean(weight), SD = sd(weight), n=n()) kable(T) habit Mean_Weight SD n nonsmoker 7.039200 1.709388 50 smoker 6.616333 1.106418 30 5.6.9 Model for Birthweight M_Birthwt &lt;- lm(data=NCBirths, weight~habit) summary(M_Birthwt) ## ## Call: ## lm(formula = weight ~ habit, data = NCBirths) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.0392 -0.6763 0.2372 0.8280 2.4437 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.0392 0.2140 32.89 &lt;0.0000000000000002 *** ## habitsmoker -0.4229 0.3495 -1.21 0.23 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.514 on 78 degrees of freedom ## Multiple R-squared: 0.01842, Adjusted R-squared: 0.005834 ## F-statistic: 1.464 on 1 and 78 DF, p-value: 0.23 5.6.10 Conclusions from Birthweight Data confint(M_Birthwt) ## 2.5 % 97.5 % ## (Intercept) 6.613070 7.4653303 ## habitsmoker -1.118735 0.2730012 The average birtweight of babies whose mothers are smokers is estimated to be about 0.42 lbs less than the average birthweight for babies whose mothers are nonsmokers. The large p-value of 0.23, tells us that there is not enough evidence to say that a mother’s smoking is associated with lower birthweights. It is plausible that this difference could have occurred by chance. We are 95% confident that the average birtweight of babies whose mothers are smokers is between 1.12 lbs less and 0.27 lbs more than the average birthweight for babies whose mothers are nonsmokers. Question: Many studies have shown that a mother’s smoking puts a baby at risk of low birthweight. Do our results contradict this research? Should we conclude that smoking has no impact on birthweights? 5.6.11 Impact of Small Sample Size Notice that we observed a difference of about 0.4 lbs. in mean birthweight, which is a considerable difference. The large p-value is mosty due to the relatively small sample size. Even though we observed a mean difference of 0.4 lbs, the sample is to small to allow us to say conclusively that smoking is associated with lower birthweights. This is very different from concluding that smoking does not impact birthweight. This is an example of why we should never “accept the null hypothesis” or say that our data “support the null hypothesis.” 5.6.12 Larger Dataset In fact, this sample of 80 babies is part of a larger dataset, consisting of 1,000 babies born in NC in 2004. When we consider the full dataset, notice that the difference between the groups is similar, but the p-value is much smaller, providing stronger evidence of a relationship between a mother’s smoking and lower birthweight. M_Birthwt_Full &lt;- lm(data=ncbirths, weight~habit) summary(M_Birthwt_Full) ## ## Call: ## lm(formula = weight ~ habit, data = ncbirths) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.1443 -0.7043 0.1657 0.9157 4.6057 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.14427 0.05086 140.472 &lt;0.0000000000000002 *** ## habitsmoker -0.31554 0.14321 -2.203 0.0278 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.503 on 997 degrees of freedom ## (1 observation deleted due to missingness) ## Multiple R-squared: 0.004846, Adjusted R-squared: 0.003848 ## F-statistic: 4.855 on 1 and 997 DF, p-value: 0.02779 5.6.13 Cautions and Advice p-values are only (a small) part of a statistical analysis. For small samples, real differences might not be statistically significant. -Don’t accept null hypothesis. Gather more information. For large, even very small differences will be statistically significant. -Look at confidence interval. Is difference practically important? When many hypotheses are tested at once (such as many food items) some will produce a significant result just by change. -Use a multiple testing correction, such as Bonferroni Interpret p-values on a “sliding scale” 0.049 is practically the same as 0.051 Is sample representative of larger population? Were treatments randomly assigned (for experiments)? Are there other variables to consider? 5.7 The Regression Effect 5.7.1 The Regression Effect Exam 1 vs Exam 2 scores for intro stat students at another college What is the relationship between scores on the two exams? 5.7.2 The Regression Effect Exam 1 vs Exam 2 scores for intro stat students at another college How many of the 6 students who scored below 70 on Exam 1 improved their scores on Exam 2? How many of the 7 students who scored above 90 improved on Exam 2? 5.7.3 The Regression Effect A low score on an exam is often the result of both poor preparation and bad luck. A high score often results from both good preparation and good luck. While changes in study habits and preparation likely explain some improvement in low scores, we would also expect the lowest performers to improve simply because of better luck. Likewise, some of the highest performers may simply not be as lucky on exam 2, so a small dropoff should not be interpreted as weaker understanding of the exam material. 5.7.4 Simulating Regression Effect set.seed(110322018) Understanding &lt;-rnorm(25, 80, 10) Score1 &lt;- Understanding + rnorm(25, 0, 5) Score2 &lt;- Understanding + rnorm(25, 0, 5) Understanding &lt;- round(Understanding,0) TestSim &lt;- data.frame(Understanding, Score1, Score2) ggplot(data=TestSim, aes(y=Score2, x=Score1))+ geom_point() + stat_smooth(method=&quot;lm&quot;) + geom_abline(slope=1) + geom_text(aes(label=Understanding), vjust = 0, nudge_y = 0.5) This phenomon is called the regression effect. 5.7.5 Test Scores Simulation - Highest Scores kable(head(TestSim%&gt;%arrange(desc(Score1)))) Understanding Score1 Score2 97 98.86412 93.60285 89 98.57157 88.25851 94 97.23330 92.65175 91 93.92857 98.23312 85 93.66503 88.70963 93 92.06243 88.67015 These students’ success on test 1 is due to a strong understanding and good luck. We would expect the understanding to carry over to test 2 (provided the student continues to study in a similar way), but not necessarily the luck. 5.7.6 Test Scores Simulation - Lowest Scores kable(head(TestSim%&gt;%arrange(Score1))) Understanding Score1 Score2 58 54.44354 50.30597 69 59.86641 77.04696 61 61.35228 65.54305 66 65.22433 73.45304 75 65.87041 80.79416 72 69.53082 74.96092 These students’ lack of success on test 1 is due to a low understanding and poor luck. We would expect the understanding to carry over to test 2 (unless the student improves their preparation), but not necessarily the luck. 5.7.7 Another Example Wins by NFL teams in 2017 and 2018 5.7.8 Other Examples of Regression Effect A 1973 article by Kahneman, D. and Tversky, A., “On the Psychology of Prediction,” Pysch. Rev. 80:237-251 describes an instance of the regression effect in the training of Israeli air force pilots. Trainees were praised after performing well and criticized after performing badly. The flight instructors observed that “high praise for good execution of complex maneuvers typically results in a decrement of performance on the next try.” Kahneman and Tversky write that : “We normally reinforce others when their behavior is good and punish them when their behavior is bad. By regression alone, therefore, they [the trainees] are most likely to improve after being punished and most likely to deteriorate after being rewarded. Consequently, we are exposed to a lifetime schedule in which we are most often rewarded for punishing others, and punished for rewarding.” "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
